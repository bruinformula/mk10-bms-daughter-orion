
mk10-orion-bms-daughter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004124  08004124  00005124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041dc  080041dc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041dc  080041dc  000051dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041e0  080041e0  000051e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080041e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  08004240  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004240  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbb6  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7c  00000000  00000000  00011c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  000136c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000824  00000000  00000000  00014150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff87  00000000  00000000  00014974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8d2  00000000  00000000  000348fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c11d8  00000000  00000000  000411cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001023a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003034  00000000  00000000  001023e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010541c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800410c 	.word	0x0800410c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800410c 	.word	0x0800410c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MCP3204_ReadChannel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint16_t MCP3204_ReadChannel(uint8_t ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  uint8_t rx_buf[3] = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2100      	movs	r1, #0
 80005ac:	460a      	mov	r2, r1
 80005ae:	801a      	strh	r2, [r3, #0]
 80005b0:	460a      	mov	r2, r1
 80005b2:	709a      	strb	r2, [r3, #2]

  if (ch > 3) return 0;          // guard
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d901      	bls.n	80005be <MCP3204_ReadChannel+0x22>
 80005ba:	2300      	movs	r3, #0
 80005bc:	e031      	b.n	8000622 <MCP3204_ReadChannel+0x86>

  MCP3204_CS_LOW();
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c4:	4819      	ldr	r0, [pc, #100]	@ (800062c <MCP3204_ReadChannel+0x90>)
 80005c6:	f000 fe0b 	bl	80011e0 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(&hspi1,
                              (uint8_t*)mcp_cmd[ch],  // tx
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	4a17      	ldr	r2, [pc, #92]	@ (8000630 <MCP3204_ReadChannel+0x94>)
 80005d4:	1899      	adds	r1, r3, r2
  if (HAL_SPI_TransmitReceive(&hspi1,
 80005d6:	f107 020c 	add.w	r2, r7, #12
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2303      	movs	r3, #3
 80005e2:	4814      	ldr	r0, [pc, #80]	@ (8000634 <MCP3204_ReadChannel+0x98>)
 80005e4:	f002 f83b 	bl	800265e <HAL_SPI_TransmitReceive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <MCP3204_ReadChannel+0x62>
                              rx_buf,                 // rx
                              3,
                              HAL_MAX_DELAY) != HAL_OK)
  {
    MCP3204_CS_HIGH();
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <MCP3204_ReadChannel+0x90>)
 80005f6:	f000 fdf3 	bl	80011e0 <HAL_GPIO_WritePin>
    return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e011      	b.n	8000622 <MCP3204_ReadChannel+0x86>
  }
  MCP3204_CS_HIGH();
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000604:	4809      	ldr	r0, [pc, #36]	@ (800062c <MCP3204_ReadChannel+0x90>)
 8000606:	f000 fdeb 	bl	80011e0 <HAL_GPIO_WritePin>

  /* Combine the 12 data bits: rx_buf[1] = xxxx B11-B8,  rx_buf[2] = B7-B0      */
  return ( (rx_buf[1] & 0x0F) << 8 ) | rx_buf[2];
 800060a:	7b7b      	ldrb	r3, [r7, #13]
 800060c:	b21b      	sxth	r3, r3
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	b21b      	sxth	r3, r3
 8000612:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000616:	b21a      	sxth	r2, r3
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	b21b      	sxth	r3, r3
 800061c:	4313      	orrs	r3, r2
 800061e:	b21b      	sxth	r3, r3
 8000620:	b29b      	uxth	r3, r3
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	48000800 	.word	0x48000800
 8000630:	0800414c 	.word	0x0800414c
 8000634:	20000078 	.word	0x20000078

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b087      	sub	sp, #28
 800063c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fae6 	bl	8000c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f845 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f903 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 f8d1 	bl	80007f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800064e:	f000 f891 	bl	8000774 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10);               // settle
 8000652:	200a      	movs	r0, #10
 8000654:	f000 fb50 	bl	8000cf8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (uint8_t ch = 0; ch < 4; ch++)
 8000658:	2300      	movs	r3, #0
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	e00c      	b.n	8000678 <main+0x40>
	  {
	      adc_raw[ch] = MCP3204_ReadChannel(ch);
 800065e:	79fc      	ldrb	r4, [r7, #7]
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff9a 	bl	800059c <MCP3204_ReadChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <main+0x88>)
 800066e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	  for (uint8_t ch = 0; ch < 4; ch++)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	3301      	adds	r3, #1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d9ef      	bls.n	800065e <main+0x26>
	  }

	  int n = snprintf(uart_buf, sizeof(uart_buf),
	                   "CH0=%4u  CH1=%4u  CH2=%4u  CH3=%4u\r\n",
	                   adc_raw[0], adc_raw[1], adc_raw[2], adc_raw[3]);
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <main+0x88>)
 8000680:	881b      	ldrh	r3, [r3, #0]
	  int n = snprintf(uart_buf, sizeof(uart_buf),
 8000682:	4618      	mov	r0, r3
	                   adc_raw[0], adc_raw[1], adc_raw[2], adc_raw[3]);
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <main+0x88>)
 8000686:	885b      	ldrh	r3, [r3, #2]
	  int n = snprintf(uart_buf, sizeof(uart_buf),
 8000688:	461a      	mov	r2, r3
	                   adc_raw[0], adc_raw[1], adc_raw[2], adc_raw[3]);
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <main+0x88>)
 800068c:	889b      	ldrh	r3, [r3, #4]
	  int n = snprintf(uart_buf, sizeof(uart_buf),
 800068e:	4619      	mov	r1, r3
	                   adc_raw[0], adc_raw[1], adc_raw[2], adc_raw[3]);
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <main+0x88>)
 8000692:	88db      	ldrh	r3, [r3, #6]
	  int n = snprintf(uart_buf, sizeof(uart_buf),
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	9101      	str	r1, [sp, #4]
 8000698:	9200      	str	r2, [sp, #0]
 800069a:	4603      	mov	r3, r0
 800069c:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <main+0x8c>)
 800069e:	2140      	movs	r1, #64	@ 0x40
 80006a0:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <main+0x90>)
 80006a2:	f003 f87f 	bl	80037a4 <sniprintf>
 80006a6:	6038      	str	r0, [r7, #0]

	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, n, HAL_MAX_DELAY);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	4905      	ldr	r1, [pc, #20]	@ (80006c8 <main+0x90>)
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <main+0x94>)
 80006b4:	f002 fba4 	bl	8002e00 <HAL_UART_Transmit>

	  HAL_Delay(200);   // 5 Hz update
 80006b8:	20c8      	movs	r0, #200	@ 0xc8
 80006ba:	f000 fb1d 	bl	8000cf8 <HAL_Delay>
  {
 80006be:	e7cb      	b.n	8000658 <main+0x20>
 80006c0:	20000164 	.word	0x20000164
 80006c4:	08004124 	.word	0x08004124
 80006c8:	2000016c 	.word	0x2000016c
 80006cc:	200000dc 	.word	0x200000dc

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	@ 0x58
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2244      	movs	r2, #68	@ 0x44
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f896 	bl	8003810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006f6:	f000 fd99 	bl	800122c <HAL_PWREx_ControlVoltageScaling>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000700:	f000 f90c 	bl	800091c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000704:	2310      	movs	r3, #16
 8000706:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000710:	2360      	movs	r3, #96	@ 0x60
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000718:	2301      	movs	r3, #1
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000720:	2310      	movs	r3, #16
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000724:	2307      	movs	r3, #7
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fdcf 	bl	80012d8 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000740:	f000 f8ec 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2303      	movs	r3, #3
 800074a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f9cf 	bl	8001b00 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000768:	f000 f8d8 	bl	800091c <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3758      	adds	r7, #88	@ 0x58
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_SPI1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <MX_SPI1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_SPI1_Init+0x74>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_SPI1_Init+0x74>)
 800078e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000792:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_SPI1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007aa:	2228      	movs	r2, #40	@ 0x28
 80007ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007d4:	f001 fea0 	bl	8002518 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f89d 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000078 	.word	0x20000078
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	@ (800084c <MX_USART2_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000834:	f002 fa96 	bl	8002d64 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f86d 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000dc 	.word	0x200000dc
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b2b      	ldr	r3, [pc, #172]	@ (8000914 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a2a      	ldr	r2, [pc, #168]	@ (8000914 <MX_GPIO_Init+0xc4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a24      	ldr	r2, [pc, #144]	@ (8000914 <MX_GPIO_Init+0xc4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a1e      	ldr	r2, [pc, #120]	@ (8000914 <MX_GPIO_Init+0xc4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	4818      	ldr	r0, [pc, #96]	@ (8000918 <MX_GPIO_Init+0xc8>)
 80008b6:	f000 fc93 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4812      	ldr	r0, [pc, #72]	@ (8000918 <MX_GPIO_Init+0xc8>)
 80008d0:	f000 fb1c 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80008d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	480a      	ldr	r0, [pc, #40]	@ (8000918 <MX_GPIO_Init+0xc8>)
 80008ee:	f000 fb0d 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008f6:	230b      	movs	r3, #11
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000908:	f000 fb00 	bl	8000f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	@ 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	@ 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_SPI_MspInit+0x7c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d127      	bne.n	80009e2 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_SPI_MspInit+0x80>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000996:	4a16      	ldr	r2, [pc, #88]	@ (80009f0 <HAL_SPI_MspInit+0x80>)
 8000998:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800099c:	6613      	str	r3, [r2, #96]	@ 0x60
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_SPI_MspInit+0x80>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_SPI_MspInit+0x80>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <HAL_SPI_MspInit+0x80>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_SPI_MspInit+0x80>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009c2:	2338      	movs	r3, #56	@ 0x38
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d2:	2305      	movs	r3, #5
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_SPI_MspInit+0x84>)
 80009de:	f000 fa95 	bl	8000f0c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40013000 	.word	0x40013000
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400

080009f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09e      	sub	sp, #120	@ 0x78
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2254      	movs	r2, #84	@ 0x54
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fef9 	bl	8003810 <memset>
  if(huart->Instance==USART2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <HAL_UART_MspInit+0xcc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d148      	bne.n	8000aba <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fa87 	bl	8001f48 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a40:	f7ff ff6c 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a44:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <HAL_UART_MspInit+0xd0>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a48:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac8 <HAL_UART_MspInit+0xd0>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_UART_MspInit+0xd0>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_UART_MspInit+0xd0>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <HAL_UART_MspInit+0xd0>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0xd0>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a74:	2304      	movs	r3, #4
 8000a76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a84:	2307      	movs	r3, #7
 8000a86:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f000 fa3b 	bl	8000f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f000 fa29 	bl	8000f0c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3778      	adds	r7, #120	@ 0x78
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 f8c9 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f002 fe60 	bl	8003820 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000c000 	.word	0x2000c000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	200001ac 	.word	0x200001ac
 8000b94:	20000300 	.word	0x20000300

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 fe1f 	bl	800382c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fd23 	bl	8000638 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c00:	080041e4 	.word	0x080041e4
  ldr r2, =_sbss
 8000c04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c08:	200002fc 	.word	0x200002fc

08000c0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_IRQHandler>

08000c0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f943 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f80e 	bl	8000c40 <HAL_InitTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e001      	b.n	8000c34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c30:	f7ff fe7a 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d023      	beq.n	8000c9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_InitTick+0x70>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f941 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10f      	bne.n	8000c96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d809      	bhi.n	8000c90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f919 	bl	8000eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_InitTick+0x74>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e007      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e004      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e001      	b.n	8000ca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200001b0 	.word	0x200001b0

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200001b0 	.word	0x200001b0

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	@ (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	@ 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	@ 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff47 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff5c 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffb0 	bl	8000e60 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1a:	e148      	b.n	80011ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 813a 	beq.w	80011a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <HAL_GPIO_Init+0x40>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 0201 	and.w	r2, r3, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d017      	beq.n	8000fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d123      	bne.n	800103e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	6939      	ldr	r1, [r7, #16]
 800103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0203 	and.w	r2, r3, #3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8094 	beq.w	80011a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <HAL_GPIO_Init+0x2c0>)
 8001082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001084:	4a51      	ldr	r2, [pc, #324]	@ (80011cc <HAL_GPIO_Init+0x2c0>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6613      	str	r3, [r2, #96]	@ 0x60
 800108c:	4b4f      	ldr	r3, [pc, #316]	@ (80011cc <HAL_GPIO_Init+0x2c0>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001098:	4a4d      	ldr	r2, [pc, #308]	@ (80011d0 <HAL_GPIO_Init+0x2c4>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010c2:	d00d      	beq.n	80010e0 <HAL_GPIO_Init+0x1d4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a43      	ldr	r2, [pc, #268]	@ (80011d4 <HAL_GPIO_Init+0x2c8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0x1d0>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a42      	ldr	r2, [pc, #264]	@ (80011d8 <HAL_GPIO_Init+0x2cc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_GPIO_Init+0x1cc>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1d6>
 80010d8:	2307      	movs	r3, #7
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1d6>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1d6>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f2:	4937      	ldr	r1, [pc, #220]	@ (80011d0 <HAL_GPIO_Init+0x2c4>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001124:	4a2d      	ldr	r2, [pc, #180]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114e:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001154:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001178:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a2:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <HAL_GPIO_Init+0x2d0>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f aeaf 	bne.w	8000f1c <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <HAL_PWREx_GetVoltageRange+0x18>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40007000 	.word	0x40007000

0800122c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800123a:	d130      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800123c:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001248:	d038      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001252:	4a1e      	ldr	r2, [pc, #120]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001254:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2232      	movs	r2, #50	@ 0x32
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a1b      	ldr	r2, [pc, #108]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	e002      	b.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001284:	d102      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f2      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001298:	d110      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e00f      	b.n	80012be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012aa:	d007      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012b4:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f000 bc02 	b.w	8001af0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ec:	4b96      	ldr	r3, [pc, #600]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f6:	4b94      	ldr	r3, [pc, #592]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80e4 	beq.w	80014d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <HAL_RCC_OscConfig+0x4c>
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	f040 808b 	bne.w	8001432 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f040 8087 	bne.w	8001432 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001324:	4b88      	ldr	r3, [pc, #544]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x64>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e3d9      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1a      	ldr	r2, [r3, #32]
 8001340:	4b81      	ldr	r3, [pc, #516]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <HAL_RCC_OscConfig+0x7e>
 800134c:	4b7e      	ldr	r3, [pc, #504]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001354:	e005      	b.n	8001362 <HAL_RCC_OscConfig+0x8a>
 8001356:	4b7c      	ldr	r3, [pc, #496]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001362:	4293      	cmp	r3, r2
 8001364:	d223      	bcs.n	80013ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fd8c 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e3ba      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137a:	4b73      	ldr	r3, [pc, #460]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a72      	ldr	r2, [pc, #456]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b70      	ldr	r3, [pc, #448]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	496d      	ldr	r1, [pc, #436]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001398:	4b6b      	ldr	r3, [pc, #428]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	4968      	ldr	r1, [pc, #416]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
 80013ac:	e025      	b.n	80013fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ae:	4b66      	ldr	r3, [pc, #408]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a65      	ldr	r2, [pc, #404]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b63      	ldr	r3, [pc, #396]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4960      	ldr	r1, [pc, #384]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	495b      	ldr	r1, [pc, #364]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fd4c 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e37a      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013fa:	f000 fc81 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b51      	ldr	r3, [pc, #324]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	4950      	ldr	r1, [pc, #320]	@ (800154c <HAL_RCC_OscConfig+0x274>)
 800140c:	5ccb      	ldrb	r3, [r1, r3]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	4a4e      	ldr	r2, [pc, #312]	@ (8001550 <HAL_RCC_OscConfig+0x278>)
 8001418:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800141a:	4b4e      	ldr	r3, [pc, #312]	@ (8001554 <HAL_RCC_OscConfig+0x27c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fc0e 	bl	8000c40 <HAL_InitTick>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d052      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	e35e      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d032      	beq.n	80014a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800143a:	4b43      	ldr	r3, [pc, #268]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a42      	ldr	r2, [pc, #264]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001446:	f7ff fc4b 	bl	8000ce0 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800144e:	f7ff fc47 	bl	8000ce0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e347      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001460:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146c:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a35      	ldr	r2, [pc, #212]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4930      	ldr	r1, [pc, #192]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148a:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	492b      	ldr	r1, [pc, #172]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
 800149e:	e01a      	b.n	80014d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014a0:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a28      	ldr	r2, [pc, #160]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc18 	bl	8000ce0 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc14 	bl	8000ce0 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e314      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1dc>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d073      	beq.n	80015ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_OscConfig+0x21c>
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d10e      	bne.n	800150c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d063      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d15f      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e2f1      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x24c>
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e025      	b.n	8001570 <HAL_RCC_OscConfig+0x298>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800152c:	d114      	bne.n	8001558 <HAL_RCC_OscConfig+0x280>
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a02      	ldr	r2, [pc, #8]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e013      	b.n	8001570 <HAL_RCC_OscConfig+0x298>
 8001548:	40021000 	.word	0x40021000
 800154c:	08004158 	.word	0x08004158
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004
 8001558:	4ba0      	ldr	r3, [pc, #640]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a9f      	ldr	r2, [pc, #636]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b9d      	ldr	r3, [pc, #628]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a9c      	ldr	r2, [pc, #624]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fbb2 	bl	8000ce0 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fbae 	bl	8000ce0 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e2ae      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	4b92      	ldr	r3, [pc, #584]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2a8>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb9e 	bl	8000ce0 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fb9a 	bl	8000ce0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	@ 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e29a      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2d0>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d060      	beq.n	8001698 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x310>
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d119      	bne.n	8001616 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d116      	bne.n	8001616 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	4b7c      	ldr	r3, [pc, #496]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x328>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e277      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b76      	ldr	r3, [pc, #472]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	4973      	ldr	r1, [pc, #460]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001614:	e040      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d023      	beq.n	8001666 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161e:	4b6f      	ldr	r3, [pc, #444]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6e      	ldr	r2, [pc, #440]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fb59 	bl	8000ce0 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fb55 	bl	8000ce0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e255      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b65      	ldr	r3, [pc, #404]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b62      	ldr	r3, [pc, #392]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	495f      	ldr	r1, [pc, #380]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e018      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b5d      	ldr	r3, [pc, #372]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5c      	ldr	r2, [pc, #368]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800166c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff fb35 	bl	8000ce0 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fb31 	bl	8000ce0 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e231      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	4b53      	ldr	r3, [pc, #332]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ac:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b2:	4a4a      	ldr	r2, [pc, #296]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fb10 	bl	8000ce0 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fb0c 	bl	8000ce0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e20c      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	4b41      	ldr	r3, [pc, #260]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ef      	beq.n	80016c4 <HAL_RCC_OscConfig+0x3ec>
 80016e4:	e01b      	b.n	800171e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b3d      	ldr	r3, [pc, #244]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ec:	4a3b      	ldr	r2, [pc, #236]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff faf3 	bl	8000ce0 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff faef 	bl	8000ce0 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1ef      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ef      	bne.n	80016fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80a6 	beq.w	8001878 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001730:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10d      	bne.n	8001758 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001754:	2301      	movs	r3, #1
 8001756:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d118      	bne.n	8001796 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001764:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1d      	ldr	r2, [pc, #116]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001770:	f7ff fab6 	bl	8000ce0 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001778:	f7ff fab2 	bl	8000ce0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1b2      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4d8>
 800179e:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ae:	e029      	b.n	8001804 <HAL_RCC_OscConfig+0x52c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d115      	bne.n	80017e4 <HAL_RCC_OscConfig+0x50c>
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	4a03      	ldr	r2, [pc, #12]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x52c>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	4b9a      	ldr	r3, [pc, #616]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ea:	4a99      	ldr	r2, [pc, #612]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f4:	4b96      	ldr	r3, [pc, #600]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fa:	4a95      	ldr	r2, [pc, #596]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d016      	beq.n	800183a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fa68 	bl	8000ce0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fa64 	bl	8000ce0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e162      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	4b89      	ldr	r3, [pc, #548]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ed      	beq.n	8001814 <HAL_RCC_OscConfig+0x53c>
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff fa51 	bl	8000ce0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff fa4d 	bl	8000ce0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e14b      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	4b7d      	ldr	r3, [pc, #500]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ed      	bne.n	8001842 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b78      	ldr	r3, [pc, #480]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001870:	4a77      	ldr	r2, [pc, #476]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001876:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d03c      	beq.n	80018fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800188c:	4b70      	ldr	r3, [pc, #448]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 800188e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001892:	4a6f      	ldr	r2, [pc, #444]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fa20 	bl	8000ce0 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a4:	f7ff fa1c 	bl	8000ce0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e11c      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018b6:	4b66      	ldr	r3, [pc, #408]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80018b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ef      	beq.n	80018a4 <HAL_RCC_OscConfig+0x5cc>
 80018c4:	e01b      	b.n	80018fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018c6:	4b62      	ldr	r3, [pc, #392]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80018c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018cc:	4a60      	ldr	r2, [pc, #384]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fa03 	bl	8000ce0 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018de:	f7ff f9ff 	bl	8000ce0 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0ff      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f0:	4b57      	ldr	r3, [pc, #348]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80018f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ef      	bne.n	80018de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80f3 	beq.w	8001aee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190c:	2b02      	cmp	r3, #2
 800190e:	f040 80c9 	bne.w	8001aa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001912:	4b4f      	ldr	r3, [pc, #316]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0203 	and.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	429a      	cmp	r2, r3
 8001924:	d12c      	bne.n	8001980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	3b01      	subs	r3, #1
 8001932:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d123      	bne.n	8001980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001942:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d11b      	bne.n	8001980 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001952:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d113      	bne.n	8001980 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d109      	bne.n	8001980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d06b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d062      	beq.n	8001a4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001986:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0ac      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 800199c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a2:	f7ff f99d 	bl	8000ce0 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff f999 	bl	8000ce0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e099      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019bc:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c8:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_RCC_OscConfig+0x77c>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019d8:	3a01      	subs	r2, #1
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	4311      	orrs	r1, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019e2:	0212      	lsls	r2, r2, #8
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019ea:	0852      	lsrs	r2, r2, #1
 80019ec:	3a01      	subs	r2, #1
 80019ee:	0552      	lsls	r2, r2, #21
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019f6:	0852      	lsrs	r2, r2, #1
 80019f8:	3a01      	subs	r2, #1
 80019fa:	0652      	lsls	r2, r2, #25
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a02:	06d2      	lsls	r2, r2, #27
 8001a04:	430a      	orrs	r2, r1
 8001a06:	4912      	ldr	r1, [pc, #72]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0f      	ldr	r2, [pc, #60]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a24:	f7ff f95c 	bl	8000ce0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f958 	bl	8000ce0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e058      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <HAL_RCC_OscConfig+0x778>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4a:	e050      	b.n	8001aee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e04f      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d144      	bne.n	8001aee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a70:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a20      	ldr	r2, [pc, #128]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a7c:	f7ff f930 	bl	8000ce0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f92c 	bl	8000ce0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e02c      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x7ac>
 8001aa2:	e024      	b.n	8001aee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d01f      	beq.n	8001aea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001ab0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f913 	bl	8000ce0 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f90f 	bl	8000ce0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e00f      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4905      	ldr	r1, [pc, #20]	@ (8001af8 <HAL_RCC_OscConfig+0x820>)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x824>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e001      	b.n	8001aee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	feeefffc 	.word	0xfeeefffc

08001b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0e7      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b75      	ldr	r3, [pc, #468]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d910      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b72      	ldr	r3, [pc, #456]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 0207 	bic.w	r2, r3, #7
 8001b2a:	4970      	ldr	r1, [pc, #448]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b6e      	ldr	r3, [pc, #440]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0cf      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d908      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b63      	ldr	r3, [pc, #396]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4960      	ldr	r1, [pc, #384]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d04c      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d121      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0a6      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e09a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e08e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e086      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4943      	ldr	r1, [pc, #268]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be8:	f7ff f87a 	bl	8000ce0 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff f876 	bl	8000ce0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e06e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 020c 	and.w	r2, r3, #12
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1eb      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d208      	bcs.n	8001c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	492b      	ldr	r1, [pc, #172]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c46:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d210      	bcs.n	8001c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	4923      	ldr	r1, [pc, #140]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c64:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e036      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	4918      	ldr	r1, [pc, #96]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4910      	ldr	r1, [pc, #64]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb4:	f000 f824 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	490b      	ldr	r1, [pc, #44]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_ClockConfig+0x1fc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe ffb1 	bl	8000c40 <HAL_InitTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08004158 	.word	0x08004158
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d121      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d11e      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d34:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d40:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	e004      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d134      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d003      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0xac>
 8001da4:	e005      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001da8:	617b      	str	r3, [r7, #20]
      break;
 8001daa:	e005      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dae:	617b      	str	r3, [r7, #20]
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	617b      	str	r3, [r7, #20]
      break;
 8001db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0e5b      	lsrs	r3, r3, #25
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	3301      	adds	r3, #1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001df8:	69bb      	ldr	r3, [r7, #24]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08004170 	.word	0x08004170
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4904      	ldr	r1, [pc, #16]	@ (8001e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08004168 	.word	0x08004168

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e60:	f7ff ffda 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0adb      	lsrs	r3, r3, #11
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4904      	ldr	r1, [pc, #16]	@ (8001e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08004168 	.word	0x08004168

08001e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea0:	f7ff f9b6 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001ea4:	6178      	str	r0, [r7, #20]
 8001ea6:	e014      	b.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff f9a6 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed8:	d10b      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d919      	bls.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ee4:	d902      	bls.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e013      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e010      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d902      	bls.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef8:	2303      	movs	r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e00a      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b80      	cmp	r3, #128	@ 0x80
 8001f02:	d102      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e004      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b70      	cmp	r3, #112	@ 0x70
 8001f0e:	d101      	bne.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4909      	ldr	r1, [pc, #36]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f24:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40022000 	.word	0x40022000

08001f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f50:	2300      	movs	r3, #0
 8001f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f54:	2300      	movs	r3, #0
 8001f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d031      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f6c:	d01a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f72:	d814      	bhi.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4a5c      	ldr	r2, [pc, #368]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f8a:	e00c      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f9ce 	bl	8002334 <RCCEx_PLLSAI1_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f9c:	e003      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fa6:	7cfb      	ldrb	r3, [r7, #19]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fac:	4b51      	ldr	r3, [pc, #324]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fba:	494e      	ldr	r1, [pc, #312]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fc2:	e001      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 809e 	beq.w	8002112 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fda:	4b46      	ldr	r3, [pc, #280]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b40      	ldr	r3, [pc, #256]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	4a3f      	ldr	r2, [pc, #252]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002008:	2301      	movs	r3, #1
 800200a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b3a      	ldr	r3, [pc, #232]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a39      	ldr	r2, [pc, #228]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002018:	f7fe fe62 	bl	8000ce0 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800201e:	e009      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe fe5e 	bl	8000ce0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d902      	bls.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	74fb      	strb	r3, [r7, #19]
        break;
 8002032:	e005      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002034:	4b30      	ldr	r3, [pc, #192]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ef      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d15a      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002046:	4b2b      	ldr	r3, [pc, #172]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01e      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	429a      	cmp	r2, r3
 8002060:	d019      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002062:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800206c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002074:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800207e:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	4a1b      	ldr	r2, [pc, #108]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800208e:	4a19      	ldr	r2, [pc, #100]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d016      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe1e 	bl	8000ce0 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a6:	e00b      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe fe1a 	bl	8000ce0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d902      	bls.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	74fb      	strb	r3, [r7, #19]
            break;
 80020be:	e006      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ec      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d4:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e2:	4904      	ldr	r1, [pc, #16]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020ea:	e009      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	74bb      	strb	r3, [r7, #18]
 80020f0:	e006      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002100:	7c7b      	ldrb	r3, [r7, #17]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b8a      	ldr	r3, [pc, #552]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	4a89      	ldr	r2, [pc, #548]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800211e:	4b84      	ldr	r3, [pc, #528]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002124:	f023 0203 	bic.w	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4980      	ldr	r1, [pc, #512]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002140:	4b7b      	ldr	r3, [pc, #492]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	f023 020c 	bic.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	4978      	ldr	r1, [pc, #480]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002162:	4b73      	ldr	r3, [pc, #460]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002168:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	496f      	ldr	r1, [pc, #444]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002184:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002192:	4967      	ldr	r1, [pc, #412]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a6:	4b62      	ldr	r3, [pc, #392]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	495e      	ldr	r1, [pc, #376]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c8:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	4956      	ldr	r1, [pc, #344]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ea:	4b51      	ldr	r3, [pc, #324]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	494d      	ldr	r1, [pc, #308]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d028      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800220c:	4b48      	ldr	r3, [pc, #288]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4945      	ldr	r1, [pc, #276]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800222a:	d106      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800222c:	4b40      	ldr	r3, [pc, #256]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a3f      	ldr	r2, [pc, #252]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002236:	60d3      	str	r3, [r2, #12]
 8002238:	e011      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002242:	d10c      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f872 	bl	8002334 <RCCEx_PLLSAI1_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d028      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800226a:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002270:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	492d      	ldr	r1, [pc, #180]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002288:	d106      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228a:	4b29      	ldr	r3, [pc, #164]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4a28      	ldr	r2, [pc, #160]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002294:	60d3      	str	r3, [r2, #12]
 8002296:	e011      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f843 	bl	8002334 <RCCEx_PLLSAI1_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01c      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d6:	4916      	ldr	r1, [pc, #88]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022e6:	d10c      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	2102      	movs	r1, #2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f820 	bl	8002334 <RCCEx_PLLSAI1_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002314:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	4904      	ldr	r1, [pc, #16]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002324:	7cbb      	ldrb	r3, [r7, #18]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002342:	4b74      	ldr	r3, [pc, #464]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d018      	beq.n	8002380 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800234e:	4b71      	ldr	r3, [pc, #452]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0203 	and.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d10d      	bne.n	800237a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
       ||
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002366:	4b6b      	ldr	r3, [pc, #428]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
       ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d047      	beq.n	800240a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e044      	b.n	800240a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d018      	beq.n	80023ba <RCCEx_PLLSAI1_Config+0x86>
 8002388:	2b03      	cmp	r3, #3
 800238a:	d825      	bhi.n	80023d8 <RCCEx_PLLSAI1_Config+0xa4>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d002      	beq.n	8002396 <RCCEx_PLLSAI1_Config+0x62>
 8002390:	2b02      	cmp	r3, #2
 8002392:	d009      	beq.n	80023a8 <RCCEx_PLLSAI1_Config+0x74>
 8002394:	e020      	b.n	80023d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002396:	4b5f      	ldr	r3, [pc, #380]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11d      	bne.n	80023de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a6:	e01a      	b.n	80023de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d116      	bne.n	80023e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b8:	e013      	b.n	80023e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023ba:	4b56      	ldr	r3, [pc, #344]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023c6:	4b53      	ldr	r3, [pc, #332]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023d6:	e006      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e004      	b.n	80023e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023de:	bf00      	nop
 80023e0:	e002      	b.n	80023e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10d      	bne.n	800240a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023ee:	4b49      	ldr	r3, [pc, #292]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	430b      	orrs	r3, r1
 8002404:	4943      	ldr	r1, [pc, #268]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002406:	4313      	orrs	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d17c      	bne.n	800250a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002410:	4b40      	ldr	r3, [pc, #256]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3f      	ldr	r2, [pc, #252]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002416:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800241a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241c:	f7fe fc60 	bl	8000ce0 <HAL_GetTick>
 8002420:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002422:	e009      	b.n	8002438 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002424:	f7fe fc5c 	bl	8000ce0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d902      	bls.n	8002438 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	73fb      	strb	r3, [r7, #15]
        break;
 8002436:	e005      	b.n	8002444 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002438:	4b36      	ldr	r3, [pc, #216]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ef      	bne.n	8002424 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d15f      	bne.n	800250a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d110      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002458:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6892      	ldr	r2, [r2, #8]
 8002460:	0211      	lsls	r1, r2, #8
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68d2      	ldr	r2, [r2, #12]
 8002466:	06d2      	lsls	r2, r2, #27
 8002468:	430a      	orrs	r2, r1
 800246a:	492a      	ldr	r1, [pc, #168]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	610b      	str	r3, [r1, #16]
 8002470:	e027      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d112      	bne.n	800249e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002478:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002480:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6892      	ldr	r2, [r2, #8]
 8002488:	0211      	lsls	r1, r2, #8
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6912      	ldr	r2, [r2, #16]
 800248e:	0852      	lsrs	r2, r2, #1
 8002490:	3a01      	subs	r2, #1
 8002492:	0552      	lsls	r2, r2, #21
 8002494:	430a      	orrs	r2, r1
 8002496:	491f      	ldr	r1, [pc, #124]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	610b      	str	r3, [r1, #16]
 800249c:	e011      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800249e:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6892      	ldr	r2, [r2, #8]
 80024ae:	0211      	lsls	r1, r2, #8
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6952      	ldr	r2, [r2, #20]
 80024b4:	0852      	lsrs	r2, r2, #1
 80024b6:	3a01      	subs	r2, #1
 80024b8:	0652      	lsls	r2, r2, #25
 80024ba:	430a      	orrs	r2, r1
 80024bc:	4915      	ldr	r1, [pc, #84]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe fc07 	bl	8000ce0 <HAL_GetTick>
 80024d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024d4:	e009      	b.n	80024ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d6:	f7fe fc03 	bl	8000ce0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d902      	bls.n	80024ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	73fb      	strb	r3, [r7, #15]
          break;
 80024e8:	e005      	b.n	80024f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ef      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4903      	ldr	r1, [pc, #12]	@ (8002514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e095      	b.n	8002656 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800253a:	d009      	beq.n	8002550 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
 8002542:	e005      	b.n	8002550 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fa00 	bl	8000970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002586:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002590:	d902      	bls.n	8002598 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e002      	b.n	800259e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800259c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80025a6:	d007      	beq.n	80025b8 <HAL_SPI_Init+0xa0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025b0:	d002      	beq.n	80025b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fa:	ea42 0103 	orr.w	r1, r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	f003 0204 	and.w	r2, r3, #4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002634:	ea42 0103 	orr.w	r1, r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b08a      	sub	sp, #40	@ 0x28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002670:	f7fe fb36 	bl	8000ce0 <HAL_GetTick>
 8002674:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800267c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800268c:	7ffb      	ldrb	r3, [r7, #31]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d00c      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x4e>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002698:	d106      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x4a>
 80026a2:	7ffb      	ldrb	r3, [r7, #31]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d001      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
 80026aa:	e1f3      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_SPI_TransmitReceive+0x60>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_SPI_TransmitReceive+0x60>
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1e8      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x72>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e1e1      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x436>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d003      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2205      	movs	r2, #5
 80026e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800272e:	d802      	bhi.n	8002736 <HAL_SPI_TransmitReceive+0xd8>
 8002730:	8abb      	ldrh	r3, [r7, #20]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d908      	bls.n	8002748 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e007      	b.n	8002758 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002756:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	d007      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800277e:	f240 8083 	bls.w	8002888 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_SPI_TransmitReceive+0x132>
 800278a:	8afb      	ldrh	r3, [r7, #22]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d16f      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	1c9a      	adds	r2, r3, #2
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b4:	e05c      	b.n	8002870 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d11b      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x19e>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x19e>
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d113      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	1c9a      	adds	r2, r3, #2
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d11c      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x1e6>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	b292      	uxth	r2, r2
 8002822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	1c9a      	adds	r2, r3, #2
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002840:	2301      	movs	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002844:	f7fe fa4c 	bl	8000ce0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002850:	429a      	cmp	r2, r3
 8002852:	d80d      	bhi.n	8002870 <HAL_SPI_TransmitReceive+0x212>
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d009      	beq.n	8002870 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e111      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d19d      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x158>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d197      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x158>
 8002886:	e0e5      	b.n	8002a54 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x23a>
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	2b01      	cmp	r3, #1
 8002894:	f040 80d1 	bne.w	8002a3a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d912      	bls.n	80028c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a6:	881a      	ldrh	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b2:	1c9a      	adds	r2, r3, #2
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b02      	subs	r3, #2
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028c6:	e0b8      	b.n	8002a3a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ee:	e0a4      	b.n	8002a3a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d134      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x30a>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02f      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x30a>
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	2b01      	cmp	r3, #1
 800290c:	d12c      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d912      	bls.n	800293e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b02      	subs	r3, #2
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800293c:	e012      	b.n	8002964 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d148      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x3aa>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d042      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d923      	bls.n	80029d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	b292      	uxth	r2, r2
 800299a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b02      	subs	r3, #2
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d81f      	bhi.n	8002a04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	e016      	b.n	8002a04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f103 020c 	add.w	r2, r3, #12
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a08:	f7fe f96a 	bl	8000ce0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d803      	bhi.n	8002a20 <HAL_SPI_TransmitReceive+0x3c2>
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d102      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x3c8>
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e02c      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f47f af55 	bne.w	80028f0 <HAL_SPI_TransmitReceive+0x292>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f af4e 	bne.w	80028f0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f93d 	bl	8002cd8 <SPI_EndRxTxTransaction>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00e      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3728      	adds	r7, #40	@ 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aac:	f7fe f918 	bl	8000ce0 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002abc:	f7fe f910 	bl	8000ce0 <HAL_GetTick>
 8002ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ac2:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	015b      	lsls	r3, r3, #5
 8002ac8:	0d1b      	lsrs	r3, r3, #20
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ad2:	e054      	b.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d050      	beq.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002adc:	f7fe f900 	bl	8000ce0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d902      	bls.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d13d      	bne.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b0a:	d111      	bne.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b14:	d004      	beq.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1e:	d107      	bne.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b38:	d10f      	bne.n	8002b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e017      	b.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d19b      	bne.n	8002ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000000 	.word	0x20000000

08002bac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bbe:	f7fe f88f 	bl	8000ce0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002bce:	f7fe f887 	bl	8000ce0 <HAL_GetTick>
 8002bd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00da      	lsls	r2, r3, #3
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	0d1b      	lsrs	r3, r3, #20
 8002bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bf4:	e060      	b.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002bfc:	d107      	bne.n	8002c0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d050      	beq.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c16:	f7fe f863 	bl	8000ce0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d902      	bls.n	8002c2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d13d      	bne.n	8002ca8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c44:	d111      	bne.n	8002c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4e:	d004      	beq.n	8002c5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c58:	d107      	bne.n	8002c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c72:	d10f      	bne.n	8002c94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e010      	b.n	8002cca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d196      	bne.n	8002bf6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3728      	adds	r7, #40	@ 0x28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff ff5b 	bl	8002bac <SPI_WaitFifoStateUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e027      	b.n	8002d5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	2180      	movs	r1, #128	@ 0x80
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff fec0 	bl	8002a9c <SPI_WaitFlagStateUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e014      	b.n	8002d5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff ff34 	bl	8002bac <SPI_WaitFifoStateUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e000      	b.n	8002d5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e040      	b.n	8002df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fe36 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	@ 0x24
 8002d90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fade 	bl	800336c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8af 	bl	8002f14 <UART_SetConfig>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01b      	b.n	8002df8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fb5d 	bl	80034b0 <UART_CheckIdleState>
 8002df6:	4603      	mov	r3, r0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d177      	bne.n	8002f08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_UART_Transmit+0x24>
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e070      	b.n	8002f0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2221      	movs	r2, #33	@ 0x21
 8002e34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e36:	f7fd ff53 	bl	8000ce0 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e54:	d108      	bne.n	8002e68 <HAL_UART_Transmit+0x68>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d104      	bne.n	8002e68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e003      	b.n	8002e70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e70:	e02f      	b.n	8002ed2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2180      	movs	r1, #128	@ 0x80
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fbbf 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e03b      	b.n	8002f0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	3302      	adds	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e007      	b.n	8002ec0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1c9      	bne.n	8002e72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2140      	movs	r1, #64	@ 0x40
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fb89 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e005      	b.n	8002f0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f18:	b08a      	sub	sp, #40	@ 0x28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4bb4      	ldr	r3, [pc, #720]	@ (8003214 <UART_SetConfig+0x300>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4aa9      	ldr	r2, [pc, #676]	@ (8003218 <UART_SetConfig+0x304>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4aa0      	ldr	r2, [pc, #640]	@ (800321c <UART_SetConfig+0x308>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d126      	bne.n	8002fec <UART_SetConfig+0xd8>
 8002f9e:	4ba0      	ldr	r3, [pc, #640]	@ (8003220 <UART_SetConfig+0x30c>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d81b      	bhi.n	8002fe4 <UART_SetConfig+0xd0>
 8002fac:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <UART_SetConfig+0xa0>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002fd5 	.word	0x08002fd5
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fdd 	.word	0x08002fdd
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fca:	e080      	b.n	80030ce <UART_SetConfig+0x1ba>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd2:	e07c      	b.n	80030ce <UART_SetConfig+0x1ba>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fda:	e078      	b.n	80030ce <UART_SetConfig+0x1ba>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe2:	e074      	b.n	80030ce <UART_SetConfig+0x1ba>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fea:	e070      	b.n	80030ce <UART_SetConfig+0x1ba>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a8c      	ldr	r2, [pc, #560]	@ (8003224 <UART_SetConfig+0x310>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d138      	bne.n	8003068 <UART_SetConfig+0x154>
 8002ff6:	4b8a      	ldr	r3, [pc, #552]	@ (8003220 <UART_SetConfig+0x30c>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d82d      	bhi.n	8003060 <UART_SetConfig+0x14c>
 8003004:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <UART_SetConfig+0xf8>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003041 	.word	0x08003041
 8003010:	08003061 	.word	0x08003061
 8003014:	08003061 	.word	0x08003061
 8003018:	08003061 	.word	0x08003061
 800301c:	08003051 	.word	0x08003051
 8003020:	08003061 	.word	0x08003061
 8003024:	08003061 	.word	0x08003061
 8003028:	08003061 	.word	0x08003061
 800302c:	08003049 	.word	0x08003049
 8003030:	08003061 	.word	0x08003061
 8003034:	08003061 	.word	0x08003061
 8003038:	08003061 	.word	0x08003061
 800303c:	08003059 	.word	0x08003059
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003046:	e042      	b.n	80030ce <UART_SetConfig+0x1ba>
 8003048:	2302      	movs	r3, #2
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304e:	e03e      	b.n	80030ce <UART_SetConfig+0x1ba>
 8003050:	2304      	movs	r3, #4
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003056:	e03a      	b.n	80030ce <UART_SetConfig+0x1ba>
 8003058:	2308      	movs	r3, #8
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305e:	e036      	b.n	80030ce <UART_SetConfig+0x1ba>
 8003060:	2310      	movs	r3, #16
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003066:	e032      	b.n	80030ce <UART_SetConfig+0x1ba>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6a      	ldr	r2, [pc, #424]	@ (8003218 <UART_SetConfig+0x304>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d12a      	bne.n	80030c8 <UART_SetConfig+0x1b4>
 8003072:	4b6b      	ldr	r3, [pc, #428]	@ (8003220 <UART_SetConfig+0x30c>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800307c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003080:	d01a      	beq.n	80030b8 <UART_SetConfig+0x1a4>
 8003082:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003086:	d81b      	bhi.n	80030c0 <UART_SetConfig+0x1ac>
 8003088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800308c:	d00c      	beq.n	80030a8 <UART_SetConfig+0x194>
 800308e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003092:	d815      	bhi.n	80030c0 <UART_SetConfig+0x1ac>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <UART_SetConfig+0x18c>
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309c:	d008      	beq.n	80030b0 <UART_SetConfig+0x19c>
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x1ac>
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a6:	e012      	b.n	80030ce <UART_SetConfig+0x1ba>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e00e      	b.n	80030ce <UART_SetConfig+0x1ba>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e00a      	b.n	80030ce <UART_SetConfig+0x1ba>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030be:	e006      	b.n	80030ce <UART_SetConfig+0x1ba>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e002      	b.n	80030ce <UART_SetConfig+0x1ba>
 80030c8:	2310      	movs	r3, #16
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a51      	ldr	r2, [pc, #324]	@ (8003218 <UART_SetConfig+0x304>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d17a      	bne.n	80031ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d824      	bhi.n	800312a <UART_SetConfig+0x216>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <UART_SetConfig+0x1d4>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800310d 	.word	0x0800310d
 80030ec:	0800312b 	.word	0x0800312b
 80030f0:	08003115 	.word	0x08003115
 80030f4:	0800312b 	.word	0x0800312b
 80030f8:	0800311b 	.word	0x0800311b
 80030fc:	0800312b 	.word	0x0800312b
 8003100:	0800312b 	.word	0x0800312b
 8003104:	0800312b 	.word	0x0800312b
 8003108:	08003123 	.word	0x08003123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7fe fe90 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003110:	61f8      	str	r0, [r7, #28]
        break;
 8003112:	e010      	b.n	8003136 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003114:	4b44      	ldr	r3, [pc, #272]	@ (8003228 <UART_SetConfig+0x314>)
 8003116:	61fb      	str	r3, [r7, #28]
        break;
 8003118:	e00d      	b.n	8003136 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800311a:	f7fe fdf1 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800311e:	61f8      	str	r0, [r7, #28]
        break;
 8003120:	e009      	b.n	8003136 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003126:	61fb      	str	r3, [r7, #28]
        break;
 8003128:	e005      	b.n	8003136 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8107 	beq.w	800334c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	429a      	cmp	r2, r3
 800314c:	d305      	bcc.n	800315a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	429a      	cmp	r2, r3
 8003158:	d903      	bls.n	8003162 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003160:	e0f4      	b.n	800334c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2200      	movs	r2, #0
 8003166:	461c      	mov	r4, r3
 8003168:	4615      	mov	r5, r2
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	022b      	lsls	r3, r5, #8
 8003174:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003178:	0222      	lsls	r2, r4, #8
 800317a:	68f9      	ldr	r1, [r7, #12]
 800317c:	6849      	ldr	r1, [r1, #4]
 800317e:	0849      	lsrs	r1, r1, #1
 8003180:	2000      	movs	r0, #0
 8003182:	4688      	mov	r8, r1
 8003184:	4681      	mov	r9, r0
 8003186:	eb12 0a08 	adds.w	sl, r2, r8
 800318a:	eb43 0b09 	adc.w	fp, r3, r9
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800319c:	4650      	mov	r0, sl
 800319e:	4659      	mov	r1, fp
 80031a0:	f7fd f866 	bl	8000270 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4613      	mov	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031b2:	d308      	bcc.n	80031c6 <UART_SetConfig+0x2b2>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ba:	d204      	bcs.n	80031c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	e0c2      	b.n	800334c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031cc:	e0be      	b.n	800334c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031d6:	d16a      	bne.n	80032ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80031d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d834      	bhi.n	800324a <UART_SetConfig+0x336>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <UART_SetConfig+0x2d4>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	0800322d 	.word	0x0800322d
 80031f0:	08003235 	.word	0x08003235
 80031f4:	0800324b 	.word	0x0800324b
 80031f8:	0800323b 	.word	0x0800323b
 80031fc:	0800324b 	.word	0x0800324b
 8003200:	0800324b 	.word	0x0800324b
 8003204:	0800324b 	.word	0x0800324b
 8003208:	08003243 	.word	0x08003243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800320c:	f7fe fe10 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003210:	61f8      	str	r0, [r7, #28]
        break;
 8003212:	e020      	b.n	8003256 <UART_SetConfig+0x342>
 8003214:	efff69f3 	.word	0xefff69f3
 8003218:	40008000 	.word	0x40008000
 800321c:	40013800 	.word	0x40013800
 8003220:	40021000 	.word	0x40021000
 8003224:	40004400 	.word	0x40004400
 8003228:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7fe fe16 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8003230:	61f8      	str	r0, [r7, #28]
        break;
 8003232:	e010      	b.n	8003256 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003234:	4b4c      	ldr	r3, [pc, #304]	@ (8003368 <UART_SetConfig+0x454>)
 8003236:	61fb      	str	r3, [r7, #28]
        break;
 8003238:	e00d      	b.n	8003256 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323a:	f7fe fd61 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800323e:	61f8      	str	r0, [r7, #28]
        break;
 8003240:	e009      	b.n	8003256 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003246:	61fb      	str	r3, [r7, #28]
        break;
 8003248:	e005      	b.n	8003256 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d077      	beq.n	800334c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005a      	lsls	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	441a      	add	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d916      	bls.n	80032a6 <UART_SetConfig+0x392>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327e:	d212      	bcs.n	80032a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f023 030f 	bic.w	r3, r3, #15
 8003288:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	b29b      	uxth	r3, r3
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	b29a      	uxth	r2, r3
 8003296:	8afb      	ldrh	r3, [r7, #22]
 8003298:	4313      	orrs	r3, r2
 800329a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	8afa      	ldrh	r2, [r7, #22]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e052      	b.n	800334c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032ac:	e04e      	b.n	800334c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d827      	bhi.n	8003306 <UART_SetConfig+0x3f2>
 80032b6:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <UART_SetConfig+0x3a8>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032e1 	.word	0x080032e1
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	08003307 	.word	0x08003307
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	08003307 	.word	0x08003307
 80032d4:	08003307 	.word	0x08003307
 80032d8:	08003307 	.word	0x08003307
 80032dc:	080032ff 	.word	0x080032ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe fda6 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80032e4:	61f8      	str	r0, [r7, #28]
        break;
 80032e6:	e014      	b.n	8003312 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7fe fdb8 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 80032ec:	61f8      	str	r0, [r7, #28]
        break;
 80032ee:	e010      	b.n	8003312 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <UART_SetConfig+0x454>)
 80032f2:	61fb      	str	r3, [r7, #28]
        break;
 80032f4:	e00d      	b.n	8003312 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fd03 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 80032fa:	61f8      	str	r0, [r7, #28]
        break;
 80032fc:	e009      	b.n	8003312 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003302:	61fb      	str	r3, [r7, #28]
        break;
 8003304:	e005      	b.n	8003312 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003310:	bf00      	nop
    }

    if (pclk != 0U)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d019      	beq.n	800334c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	085a      	lsrs	r2, r3, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b0f      	cmp	r3, #15
 8003330:	d909      	bls.n	8003346 <UART_SetConfig+0x432>
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003338:	d205      	bcs.n	8003346 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e002      	b.n	800334c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003358:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	@ 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003366:	bf00      	nop
 8003368:	00f42400 	.word	0x00f42400

0800336c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01a      	beq.n	8003482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800346a:	d10a      	bne.n	8003482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b098      	sub	sp, #96	@ 0x60
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c0:	f7fd fc0e 	bl	8000ce0 <HAL_GetTick>
 80034c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d12e      	bne.n	8003532 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f88c 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d021      	beq.n	8003532 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003502:	653b      	str	r3, [r7, #80]	@ 0x50
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800350c:	647b      	str	r3, [r7, #68]	@ 0x44
 800350e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800351a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e6      	bne.n	80034ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e062      	b.n	80035f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d149      	bne.n	80035d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003540:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003548:	2200      	movs	r2, #0
 800354a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f856 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d03c      	beq.n	80035d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	623b      	str	r3, [r7, #32]
   return(result);
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003578:	633b      	str	r3, [r7, #48]	@ 0x30
 800357a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e6      	bne.n	800355a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	60fb      	str	r3, [r7, #12]
   return(result);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3308      	adds	r3, #8
 80035aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e011      	b.n	80035f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3758      	adds	r7, #88	@ 0x58
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003610:	e04f      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d04b      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7fd fb61 	bl	8000ce0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <UART_WaitOnFlagUntilTimeout+0x30>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e04e      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d037      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b80      	cmp	r3, #128	@ 0x80
 8003646:	d034      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d031      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d110      	bne.n	800367e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2208      	movs	r2, #8
 8003662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f838 	bl	80036da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2208      	movs	r2, #8
 800366e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e029      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368c:	d111      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f81e 	bl	80036da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d0a0      	beq.n	8003612 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b095      	sub	sp, #84	@ 0x54
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003700:	643b      	str	r3, [r7, #64]	@ 0x40
 8003702:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e6      	bne.n	80036e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	61fb      	str	r3, [r7, #28]
   return(result);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3308      	adds	r3, #8
 8003732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374c:	2b01      	cmp	r3, #1
 800374e:	d118      	bne.n	8003782 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	60bb      	str	r3, [r7, #8]
   return(result);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f023 0310 	bic.w	r3, r3, #16
 8003764:	647b      	str	r3, [r7, #68]	@ 0x44
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	613b      	str	r3, [r7, #16]
   return(result);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e6      	bne.n	8003750 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003796:	bf00      	nop
 8003798:	3754      	adds	r7, #84	@ 0x54
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <sniprintf>:
 80037a4:	b40c      	push	{r2, r3}
 80037a6:	b530      	push	{r4, r5, lr}
 80037a8:	4b18      	ldr	r3, [pc, #96]	@ (800380c <sniprintf+0x68>)
 80037aa:	1e0c      	subs	r4, r1, #0
 80037ac:	681d      	ldr	r5, [r3, #0]
 80037ae:	b09d      	sub	sp, #116	@ 0x74
 80037b0:	da08      	bge.n	80037c4 <sniprintf+0x20>
 80037b2:	238b      	movs	r3, #139	@ 0x8b
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ba:	b01d      	add	sp, #116	@ 0x74
 80037bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037c0:	b002      	add	sp, #8
 80037c2:	4770      	bx	lr
 80037c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80037c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80037d2:	bf14      	ite	ne
 80037d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80037d8:	4623      	moveq	r3, r4
 80037da:	9304      	str	r3, [sp, #16]
 80037dc:	9307      	str	r3, [sp, #28]
 80037de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037e2:	9002      	str	r0, [sp, #8]
 80037e4:	9006      	str	r0, [sp, #24]
 80037e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80037ec:	ab21      	add	r3, sp, #132	@ 0x84
 80037ee:	a902      	add	r1, sp, #8
 80037f0:	4628      	mov	r0, r5
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	f000 f994 	bl	8003b20 <_svfiprintf_r>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	bfbc      	itt	lt
 80037fc:	238b      	movlt	r3, #139	@ 0x8b
 80037fe:	602b      	strlt	r3, [r5, #0]
 8003800:	2c00      	cmp	r4, #0
 8003802:	d0da      	beq.n	80037ba <sniprintf+0x16>
 8003804:	9b02      	ldr	r3, [sp, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e7d6      	b.n	80037ba <sniprintf+0x16>
 800380c:	2000000c 	.word	0x2000000c

08003810 <memset>:
 8003810:	4402      	add	r2, r0
 8003812:	4603      	mov	r3, r0
 8003814:	4293      	cmp	r3, r2
 8003816:	d100      	bne.n	800381a <memset+0xa>
 8003818:	4770      	bx	lr
 800381a:	f803 1b01 	strb.w	r1, [r3], #1
 800381e:	e7f9      	b.n	8003814 <memset+0x4>

08003820 <__errno>:
 8003820:	4b01      	ldr	r3, [pc, #4]	@ (8003828 <__errno+0x8>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	2000000c 	.word	0x2000000c

0800382c <__libc_init_array>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	4d0d      	ldr	r5, [pc, #52]	@ (8003864 <__libc_init_array+0x38>)
 8003830:	4c0d      	ldr	r4, [pc, #52]	@ (8003868 <__libc_init_array+0x3c>)
 8003832:	1b64      	subs	r4, r4, r5
 8003834:	10a4      	asrs	r4, r4, #2
 8003836:	2600      	movs	r6, #0
 8003838:	42a6      	cmp	r6, r4
 800383a:	d109      	bne.n	8003850 <__libc_init_array+0x24>
 800383c:	4d0b      	ldr	r5, [pc, #44]	@ (800386c <__libc_init_array+0x40>)
 800383e:	4c0c      	ldr	r4, [pc, #48]	@ (8003870 <__libc_init_array+0x44>)
 8003840:	f000 fc64 	bl	800410c <_init>
 8003844:	1b64      	subs	r4, r4, r5
 8003846:	10a4      	asrs	r4, r4, #2
 8003848:	2600      	movs	r6, #0
 800384a:	42a6      	cmp	r6, r4
 800384c:	d105      	bne.n	800385a <__libc_init_array+0x2e>
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	f855 3b04 	ldr.w	r3, [r5], #4
 8003854:	4798      	blx	r3
 8003856:	3601      	adds	r6, #1
 8003858:	e7ee      	b.n	8003838 <__libc_init_array+0xc>
 800385a:	f855 3b04 	ldr.w	r3, [r5], #4
 800385e:	4798      	blx	r3
 8003860:	3601      	adds	r6, #1
 8003862:	e7f2      	b.n	800384a <__libc_init_array+0x1e>
 8003864:	080041dc 	.word	0x080041dc
 8003868:	080041dc 	.word	0x080041dc
 800386c:	080041dc 	.word	0x080041dc
 8003870:	080041e0 	.word	0x080041e0

08003874 <__retarget_lock_acquire_recursive>:
 8003874:	4770      	bx	lr

08003876 <__retarget_lock_release_recursive>:
 8003876:	4770      	bx	lr

08003878 <_free_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	2900      	cmp	r1, #0
 800387e:	d041      	beq.n	8003904 <_free_r+0x8c>
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f0c      	subs	r4, r1, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	18e4      	addlt	r4, r4, r3
 800388c:	f000 f8e0 	bl	8003a50 <__malloc_lock>
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <_free_r+0x90>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	b933      	cbnz	r3, 80038a4 <_free_r+0x2c>
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6014      	str	r4, [r2, #0]
 800389a:	4628      	mov	r0, r5
 800389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a0:	f000 b8dc 	b.w	8003a5c <__malloc_unlock>
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d908      	bls.n	80038ba <_free_r+0x42>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf01      	itttt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	e7ed      	b.n	8003896 <_free_r+0x1e>
 80038ba:	461a      	mov	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b10b      	cbz	r3, 80038c4 <_free_r+0x4c>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d9fa      	bls.n	80038ba <_free_r+0x42>
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	1850      	adds	r0, r2, r1
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d10b      	bne.n	80038e4 <_free_r+0x6c>
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	4401      	add	r1, r0
 80038d0:	1850      	adds	r0, r2, r1
 80038d2:	4283      	cmp	r3, r0
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	d1e0      	bne.n	800389a <_free_r+0x22>
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	4408      	add	r0, r1
 80038e0:	6010      	str	r0, [r2, #0]
 80038e2:	e7da      	b.n	800389a <_free_r+0x22>
 80038e4:	d902      	bls.n	80038ec <_free_r+0x74>
 80038e6:	230c      	movs	r3, #12
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	e7d6      	b.n	800389a <_free_r+0x22>
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	1821      	adds	r1, r4, r0
 80038f0:	428b      	cmp	r3, r1
 80038f2:	bf04      	itt	eq
 80038f4:	6819      	ldreq	r1, [r3, #0]
 80038f6:	685b      	ldreq	r3, [r3, #4]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	bf04      	itt	eq
 80038fc:	1809      	addeq	r1, r1, r0
 80038fe:	6021      	streq	r1, [r4, #0]
 8003900:	6054      	str	r4, [r2, #4]
 8003902:	e7ca      	b.n	800389a <_free_r+0x22>
 8003904:	bd38      	pop	{r3, r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	200002f8 	.word	0x200002f8

0800390c <sbrk_aligned>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	4e0f      	ldr	r6, [pc, #60]	@ (800394c <sbrk_aligned+0x40>)
 8003910:	460c      	mov	r4, r1
 8003912:	6831      	ldr	r1, [r6, #0]
 8003914:	4605      	mov	r5, r0
 8003916:	b911      	cbnz	r1, 800391e <sbrk_aligned+0x12>
 8003918:	f000 fba4 	bl	8004064 <_sbrk_r>
 800391c:	6030      	str	r0, [r6, #0]
 800391e:	4621      	mov	r1, r4
 8003920:	4628      	mov	r0, r5
 8003922:	f000 fb9f 	bl	8004064 <_sbrk_r>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d103      	bne.n	8003932 <sbrk_aligned+0x26>
 800392a:	f04f 34ff 	mov.w	r4, #4294967295
 800392e:	4620      	mov	r0, r4
 8003930:	bd70      	pop	{r4, r5, r6, pc}
 8003932:	1cc4      	adds	r4, r0, #3
 8003934:	f024 0403 	bic.w	r4, r4, #3
 8003938:	42a0      	cmp	r0, r4
 800393a:	d0f8      	beq.n	800392e <sbrk_aligned+0x22>
 800393c:	1a21      	subs	r1, r4, r0
 800393e:	4628      	mov	r0, r5
 8003940:	f000 fb90 	bl	8004064 <_sbrk_r>
 8003944:	3001      	adds	r0, #1
 8003946:	d1f2      	bne.n	800392e <sbrk_aligned+0x22>
 8003948:	e7ef      	b.n	800392a <sbrk_aligned+0x1e>
 800394a:	bf00      	nop
 800394c:	200002f4 	.word	0x200002f4

08003950 <_malloc_r>:
 8003950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003954:	1ccd      	adds	r5, r1, #3
 8003956:	f025 0503 	bic.w	r5, r5, #3
 800395a:	3508      	adds	r5, #8
 800395c:	2d0c      	cmp	r5, #12
 800395e:	bf38      	it	cc
 8003960:	250c      	movcc	r5, #12
 8003962:	2d00      	cmp	r5, #0
 8003964:	4606      	mov	r6, r0
 8003966:	db01      	blt.n	800396c <_malloc_r+0x1c>
 8003968:	42a9      	cmp	r1, r5
 800396a:	d904      	bls.n	8003976 <_malloc_r+0x26>
 800396c:	230c      	movs	r3, #12
 800396e:	6033      	str	r3, [r6, #0]
 8003970:	2000      	movs	r0, #0
 8003972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a4c <_malloc_r+0xfc>
 800397a:	f000 f869 	bl	8003a50 <__malloc_lock>
 800397e:	f8d8 3000 	ldr.w	r3, [r8]
 8003982:	461c      	mov	r4, r3
 8003984:	bb44      	cbnz	r4, 80039d8 <_malloc_r+0x88>
 8003986:	4629      	mov	r1, r5
 8003988:	4630      	mov	r0, r6
 800398a:	f7ff ffbf 	bl	800390c <sbrk_aligned>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	4604      	mov	r4, r0
 8003992:	d158      	bne.n	8003a46 <_malloc_r+0xf6>
 8003994:	f8d8 4000 	ldr.w	r4, [r8]
 8003998:	4627      	mov	r7, r4
 800399a:	2f00      	cmp	r7, #0
 800399c:	d143      	bne.n	8003a26 <_malloc_r+0xd6>
 800399e:	2c00      	cmp	r4, #0
 80039a0:	d04b      	beq.n	8003a3a <_malloc_r+0xea>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	4639      	mov	r1, r7
 80039a6:	4630      	mov	r0, r6
 80039a8:	eb04 0903 	add.w	r9, r4, r3
 80039ac:	f000 fb5a 	bl	8004064 <_sbrk_r>
 80039b0:	4581      	cmp	r9, r0
 80039b2:	d142      	bne.n	8003a3a <_malloc_r+0xea>
 80039b4:	6821      	ldr	r1, [r4, #0]
 80039b6:	1a6d      	subs	r5, r5, r1
 80039b8:	4629      	mov	r1, r5
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7ff ffa6 	bl	800390c <sbrk_aligned>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d03a      	beq.n	8003a3a <_malloc_r+0xea>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	442b      	add	r3, r5
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	f8d8 3000 	ldr.w	r3, [r8]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	bb62      	cbnz	r2, 8003a2c <_malloc_r+0xdc>
 80039d2:	f8c8 7000 	str.w	r7, [r8]
 80039d6:	e00f      	b.n	80039f8 <_malloc_r+0xa8>
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	1b52      	subs	r2, r2, r5
 80039dc:	d420      	bmi.n	8003a20 <_malloc_r+0xd0>
 80039de:	2a0b      	cmp	r2, #11
 80039e0:	d917      	bls.n	8003a12 <_malloc_r+0xc2>
 80039e2:	1961      	adds	r1, r4, r5
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	6025      	str	r5, [r4, #0]
 80039e8:	bf18      	it	ne
 80039ea:	6059      	strne	r1, [r3, #4]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	bf08      	it	eq
 80039f0:	f8c8 1000 	streq.w	r1, [r8]
 80039f4:	5162      	str	r2, [r4, r5]
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	4630      	mov	r0, r6
 80039fa:	f000 f82f 	bl	8003a5c <__malloc_unlock>
 80039fe:	f104 000b 	add.w	r0, r4, #11
 8003a02:	1d23      	adds	r3, r4, #4
 8003a04:	f020 0007 	bic.w	r0, r0, #7
 8003a08:	1ac2      	subs	r2, r0, r3
 8003a0a:	bf1c      	itt	ne
 8003a0c:	1a1b      	subne	r3, r3, r0
 8003a0e:	50a3      	strne	r3, [r4, r2]
 8003a10:	e7af      	b.n	8003972 <_malloc_r+0x22>
 8003a12:	6862      	ldr	r2, [r4, #4]
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	bf0c      	ite	eq
 8003a18:	f8c8 2000 	streq.w	r2, [r8]
 8003a1c:	605a      	strne	r2, [r3, #4]
 8003a1e:	e7eb      	b.n	80039f8 <_malloc_r+0xa8>
 8003a20:	4623      	mov	r3, r4
 8003a22:	6864      	ldr	r4, [r4, #4]
 8003a24:	e7ae      	b.n	8003984 <_malloc_r+0x34>
 8003a26:	463c      	mov	r4, r7
 8003a28:	687f      	ldr	r7, [r7, #4]
 8003a2a:	e7b6      	b.n	800399a <_malloc_r+0x4a>
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	d1fb      	bne.n	8003a2c <_malloc_r+0xdc>
 8003a34:	2300      	movs	r3, #0
 8003a36:	6053      	str	r3, [r2, #4]
 8003a38:	e7de      	b.n	80039f8 <_malloc_r+0xa8>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	6033      	str	r3, [r6, #0]
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f000 f80c 	bl	8003a5c <__malloc_unlock>
 8003a44:	e794      	b.n	8003970 <_malloc_r+0x20>
 8003a46:	6005      	str	r5, [r0, #0]
 8003a48:	e7d6      	b.n	80039f8 <_malloc_r+0xa8>
 8003a4a:	bf00      	nop
 8003a4c:	200002f8 	.word	0x200002f8

08003a50 <__malloc_lock>:
 8003a50:	4801      	ldr	r0, [pc, #4]	@ (8003a58 <__malloc_lock+0x8>)
 8003a52:	f7ff bf0f 	b.w	8003874 <__retarget_lock_acquire_recursive>
 8003a56:	bf00      	nop
 8003a58:	200002f0 	.word	0x200002f0

08003a5c <__malloc_unlock>:
 8003a5c:	4801      	ldr	r0, [pc, #4]	@ (8003a64 <__malloc_unlock+0x8>)
 8003a5e:	f7ff bf0a 	b.w	8003876 <__retarget_lock_release_recursive>
 8003a62:	bf00      	nop
 8003a64:	200002f0 	.word	0x200002f0

08003a68 <__ssputs_r>:
 8003a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	688e      	ldr	r6, [r1, #8]
 8003a6e:	461f      	mov	r7, r3
 8003a70:	42be      	cmp	r6, r7
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	4682      	mov	sl, r0
 8003a76:	460c      	mov	r4, r1
 8003a78:	4690      	mov	r8, r2
 8003a7a:	d82d      	bhi.n	8003ad8 <__ssputs_r+0x70>
 8003a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a84:	d026      	beq.n	8003ad4 <__ssputs_r+0x6c>
 8003a86:	6965      	ldr	r5, [r4, #20]
 8003a88:	6909      	ldr	r1, [r1, #16]
 8003a8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a8e:	eba3 0901 	sub.w	r9, r3, r1
 8003a92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a96:	1c7b      	adds	r3, r7, #1
 8003a98:	444b      	add	r3, r9
 8003a9a:	106d      	asrs	r5, r5, #1
 8003a9c:	429d      	cmp	r5, r3
 8003a9e:	bf38      	it	cc
 8003aa0:	461d      	movcc	r5, r3
 8003aa2:	0553      	lsls	r3, r2, #21
 8003aa4:	d527      	bpl.n	8003af6 <__ssputs_r+0x8e>
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7ff ff52 	bl	8003950 <_malloc_r>
 8003aac:	4606      	mov	r6, r0
 8003aae:	b360      	cbz	r0, 8003b0a <__ssputs_r+0xa2>
 8003ab0:	6921      	ldr	r1, [r4, #16]
 8003ab2:	464a      	mov	r2, r9
 8003ab4:	f000 fae6 	bl	8004084 <memcpy>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	6126      	str	r6, [r4, #16]
 8003ac6:	6165      	str	r5, [r4, #20]
 8003ac8:	444e      	add	r6, r9
 8003aca:	eba5 0509 	sub.w	r5, r5, r9
 8003ace:	6026      	str	r6, [r4, #0]
 8003ad0:	60a5      	str	r5, [r4, #8]
 8003ad2:	463e      	mov	r6, r7
 8003ad4:	42be      	cmp	r6, r7
 8003ad6:	d900      	bls.n	8003ada <__ssputs_r+0x72>
 8003ad8:	463e      	mov	r6, r7
 8003ada:	6820      	ldr	r0, [r4, #0]
 8003adc:	4632      	mov	r2, r6
 8003ade:	4641      	mov	r1, r8
 8003ae0:	f000 faa6 	bl	8004030 <memmove>
 8003ae4:	68a3      	ldr	r3, [r4, #8]
 8003ae6:	1b9b      	subs	r3, r3, r6
 8003ae8:	60a3      	str	r3, [r4, #8]
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	4433      	add	r3, r6
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	2000      	movs	r0, #0
 8003af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af6:	462a      	mov	r2, r5
 8003af8:	f000 fad2 	bl	80040a0 <_realloc_r>
 8003afc:	4606      	mov	r6, r0
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d1e0      	bne.n	8003ac4 <__ssputs_r+0x5c>
 8003b02:	6921      	ldr	r1, [r4, #16]
 8003b04:	4650      	mov	r0, sl
 8003b06:	f7ff feb7 	bl	8003878 <_free_r>
 8003b0a:	230c      	movs	r3, #12
 8003b0c:	f8ca 3000 	str.w	r3, [sl]
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	e7e9      	b.n	8003af2 <__ssputs_r+0x8a>
	...

08003b20 <_svfiprintf_r>:
 8003b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	4698      	mov	r8, r3
 8003b26:	898b      	ldrh	r3, [r1, #12]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	b09d      	sub	sp, #116	@ 0x74
 8003b2c:	4607      	mov	r7, r0
 8003b2e:	460d      	mov	r5, r1
 8003b30:	4614      	mov	r4, r2
 8003b32:	d510      	bpl.n	8003b56 <_svfiprintf_r+0x36>
 8003b34:	690b      	ldr	r3, [r1, #16]
 8003b36:	b973      	cbnz	r3, 8003b56 <_svfiprintf_r+0x36>
 8003b38:	2140      	movs	r1, #64	@ 0x40
 8003b3a:	f7ff ff09 	bl	8003950 <_malloc_r>
 8003b3e:	6028      	str	r0, [r5, #0]
 8003b40:	6128      	str	r0, [r5, #16]
 8003b42:	b930      	cbnz	r0, 8003b52 <_svfiprintf_r+0x32>
 8003b44:	230c      	movs	r3, #12
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	b01d      	add	sp, #116	@ 0x74
 8003b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b52:	2340      	movs	r3, #64	@ 0x40
 8003b54:	616b      	str	r3, [r5, #20]
 8003b56:	2300      	movs	r3, #0
 8003b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b64:	2330      	movs	r3, #48	@ 0x30
 8003b66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d04 <_svfiprintf_r+0x1e4>
 8003b6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b6e:	f04f 0901 	mov.w	r9, #1
 8003b72:	4623      	mov	r3, r4
 8003b74:	469a      	mov	sl, r3
 8003b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b7a:	b10a      	cbz	r2, 8003b80 <_svfiprintf_r+0x60>
 8003b7c:	2a25      	cmp	r2, #37	@ 0x25
 8003b7e:	d1f9      	bne.n	8003b74 <_svfiprintf_r+0x54>
 8003b80:	ebba 0b04 	subs.w	fp, sl, r4
 8003b84:	d00b      	beq.n	8003b9e <_svfiprintf_r+0x7e>
 8003b86:	465b      	mov	r3, fp
 8003b88:	4622      	mov	r2, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	f7ff ff6b 	bl	8003a68 <__ssputs_r>
 8003b92:	3001      	adds	r0, #1
 8003b94:	f000 80a7 	beq.w	8003ce6 <_svfiprintf_r+0x1c6>
 8003b98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b9a:	445a      	add	r2, fp
 8003b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 809f 	beq.w	8003ce6 <_svfiprintf_r+0x1c6>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bb2:	f10a 0a01 	add.w	sl, sl, #1
 8003bb6:	9304      	str	r3, [sp, #16]
 8003bb8:	9307      	str	r3, [sp, #28]
 8003bba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bc0:	4654      	mov	r4, sl
 8003bc2:	2205      	movs	r2, #5
 8003bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc8:	484e      	ldr	r0, [pc, #312]	@ (8003d04 <_svfiprintf_r+0x1e4>)
 8003bca:	f7fc fb01 	bl	80001d0 <memchr>
 8003bce:	9a04      	ldr	r2, [sp, #16]
 8003bd0:	b9d8      	cbnz	r0, 8003c0a <_svfiprintf_r+0xea>
 8003bd2:	06d0      	lsls	r0, r2, #27
 8003bd4:	bf44      	itt	mi
 8003bd6:	2320      	movmi	r3, #32
 8003bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bdc:	0711      	lsls	r1, r2, #28
 8003bde:	bf44      	itt	mi
 8003be0:	232b      	movmi	r3, #43	@ 0x2b
 8003be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003be6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bec:	d015      	beq.n	8003c1a <_svfiprintf_r+0xfa>
 8003bee:	9a07      	ldr	r2, [sp, #28]
 8003bf0:	4654      	mov	r4, sl
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f04f 0c0a 	mov.w	ip, #10
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bfe:	3b30      	subs	r3, #48	@ 0x30
 8003c00:	2b09      	cmp	r3, #9
 8003c02:	d94b      	bls.n	8003c9c <_svfiprintf_r+0x17c>
 8003c04:	b1b0      	cbz	r0, 8003c34 <_svfiprintf_r+0x114>
 8003c06:	9207      	str	r2, [sp, #28]
 8003c08:	e014      	b.n	8003c34 <_svfiprintf_r+0x114>
 8003c0a:	eba0 0308 	sub.w	r3, r0, r8
 8003c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	46a2      	mov	sl, r4
 8003c18:	e7d2      	b.n	8003bc0 <_svfiprintf_r+0xa0>
 8003c1a:	9b03      	ldr	r3, [sp, #12]
 8003c1c:	1d19      	adds	r1, r3, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	9103      	str	r1, [sp, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bfbb      	ittet	lt
 8003c26:	425b      	neglt	r3, r3
 8003c28:	f042 0202 	orrlt.w	r2, r2, #2
 8003c2c:	9307      	strge	r3, [sp, #28]
 8003c2e:	9307      	strlt	r3, [sp, #28]
 8003c30:	bfb8      	it	lt
 8003c32:	9204      	strlt	r2, [sp, #16]
 8003c34:	7823      	ldrb	r3, [r4, #0]
 8003c36:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c38:	d10a      	bne.n	8003c50 <_svfiprintf_r+0x130>
 8003c3a:	7863      	ldrb	r3, [r4, #1]
 8003c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c3e:	d132      	bne.n	8003ca6 <_svfiprintf_r+0x186>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	9203      	str	r2, [sp, #12]
 8003c48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c4c:	3402      	adds	r4, #2
 8003c4e:	9305      	str	r3, [sp, #20]
 8003c50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d14 <_svfiprintf_r+0x1f4>
 8003c54:	7821      	ldrb	r1, [r4, #0]
 8003c56:	2203      	movs	r2, #3
 8003c58:	4650      	mov	r0, sl
 8003c5a:	f7fc fab9 	bl	80001d0 <memchr>
 8003c5e:	b138      	cbz	r0, 8003c70 <_svfiprintf_r+0x150>
 8003c60:	9b04      	ldr	r3, [sp, #16]
 8003c62:	eba0 000a 	sub.w	r0, r0, sl
 8003c66:	2240      	movs	r2, #64	@ 0x40
 8003c68:	4082      	lsls	r2, r0
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	3401      	adds	r4, #1
 8003c6e:	9304      	str	r3, [sp, #16]
 8003c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c74:	4824      	ldr	r0, [pc, #144]	@ (8003d08 <_svfiprintf_r+0x1e8>)
 8003c76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c7a:	2206      	movs	r2, #6
 8003c7c:	f7fc faa8 	bl	80001d0 <memchr>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d036      	beq.n	8003cf2 <_svfiprintf_r+0x1d2>
 8003c84:	4b21      	ldr	r3, [pc, #132]	@ (8003d0c <_svfiprintf_r+0x1ec>)
 8003c86:	bb1b      	cbnz	r3, 8003cd0 <_svfiprintf_r+0x1b0>
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	3307      	adds	r3, #7
 8003c8c:	f023 0307 	bic.w	r3, r3, #7
 8003c90:	3308      	adds	r3, #8
 8003c92:	9303      	str	r3, [sp, #12]
 8003c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c96:	4433      	add	r3, r6
 8003c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c9a:	e76a      	b.n	8003b72 <_svfiprintf_r+0x52>
 8003c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	e7a8      	b.n	8003bf8 <_svfiprintf_r+0xd8>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	3401      	adds	r4, #1
 8003caa:	9305      	str	r3, [sp, #20]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f04f 0c0a 	mov.w	ip, #10
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb8:	3a30      	subs	r2, #48	@ 0x30
 8003cba:	2a09      	cmp	r2, #9
 8003cbc:	d903      	bls.n	8003cc6 <_svfiprintf_r+0x1a6>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0c6      	beq.n	8003c50 <_svfiprintf_r+0x130>
 8003cc2:	9105      	str	r1, [sp, #20]
 8003cc4:	e7c4      	b.n	8003c50 <_svfiprintf_r+0x130>
 8003cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cca:	4604      	mov	r4, r0
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e7f0      	b.n	8003cb2 <_svfiprintf_r+0x192>
 8003cd0:	ab03      	add	r3, sp, #12
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <_svfiprintf_r+0x1f0>)
 8003cd8:	a904      	add	r1, sp, #16
 8003cda:	4638      	mov	r0, r7
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	1c42      	adds	r2, r0, #1
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	d1d6      	bne.n	8003c94 <_svfiprintf_r+0x174>
 8003ce6:	89ab      	ldrh	r3, [r5, #12]
 8003ce8:	065b      	lsls	r3, r3, #25
 8003cea:	f53f af2d 	bmi.w	8003b48 <_svfiprintf_r+0x28>
 8003cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cf0:	e72c      	b.n	8003b4c <_svfiprintf_r+0x2c>
 8003cf2:	ab03      	add	r3, sp, #12
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <_svfiprintf_r+0x1f0>)
 8003cfa:	a904      	add	r1, sp, #16
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f000 f879 	bl	8003df4 <_printf_i>
 8003d02:	e7ed      	b.n	8003ce0 <_svfiprintf_r+0x1c0>
 8003d04:	080041a0 	.word	0x080041a0
 8003d08:	080041aa 	.word	0x080041aa
 8003d0c:	00000000 	.word	0x00000000
 8003d10:	08003a69 	.word	0x08003a69
 8003d14:	080041a6 	.word	0x080041a6

08003d18 <_printf_common>:
 8003d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1c:	4616      	mov	r6, r2
 8003d1e:	4698      	mov	r8, r3
 8003d20:	688a      	ldr	r2, [r1, #8]
 8003d22:	690b      	ldr	r3, [r1, #16]
 8003d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	bfb8      	it	lt
 8003d2c:	4613      	movlt	r3, r2
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d34:	4607      	mov	r7, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	b10a      	cbz	r2, 8003d3e <_printf_common+0x26>
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	6033      	str	r3, [r6, #0]
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	0699      	lsls	r1, r3, #26
 8003d42:	bf42      	ittt	mi
 8003d44:	6833      	ldrmi	r3, [r6, #0]
 8003d46:	3302      	addmi	r3, #2
 8003d48:	6033      	strmi	r3, [r6, #0]
 8003d4a:	6825      	ldr	r5, [r4, #0]
 8003d4c:	f015 0506 	ands.w	r5, r5, #6
 8003d50:	d106      	bne.n	8003d60 <_printf_common+0x48>
 8003d52:	f104 0a19 	add.w	sl, r4, #25
 8003d56:	68e3      	ldr	r3, [r4, #12]
 8003d58:	6832      	ldr	r2, [r6, #0]
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	dc26      	bgt.n	8003dae <_printf_common+0x96>
 8003d60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	3b00      	subs	r3, #0
 8003d68:	bf18      	it	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	0692      	lsls	r2, r2, #26
 8003d6e:	d42b      	bmi.n	8003dc8 <_printf_common+0xb0>
 8003d70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d74:	4641      	mov	r1, r8
 8003d76:	4638      	mov	r0, r7
 8003d78:	47c8      	blx	r9
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d01e      	beq.n	8003dbc <_printf_common+0xa4>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	6922      	ldr	r2, [r4, #16]
 8003d82:	f003 0306 	and.w	r3, r3, #6
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	bf02      	ittt	eq
 8003d8a:	68e5      	ldreq	r5, [r4, #12]
 8003d8c:	6833      	ldreq	r3, [r6, #0]
 8003d8e:	1aed      	subeq	r5, r5, r3
 8003d90:	68a3      	ldr	r3, [r4, #8]
 8003d92:	bf0c      	ite	eq
 8003d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d98:	2500      	movne	r5, #0
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	bfc4      	itt	gt
 8003d9e:	1a9b      	subgt	r3, r3, r2
 8003da0:	18ed      	addgt	r5, r5, r3
 8003da2:	2600      	movs	r6, #0
 8003da4:	341a      	adds	r4, #26
 8003da6:	42b5      	cmp	r5, r6
 8003da8:	d11a      	bne.n	8003de0 <_printf_common+0xc8>
 8003daa:	2000      	movs	r0, #0
 8003dac:	e008      	b.n	8003dc0 <_printf_common+0xa8>
 8003dae:	2301      	movs	r3, #1
 8003db0:	4652      	mov	r2, sl
 8003db2:	4641      	mov	r1, r8
 8003db4:	4638      	mov	r0, r7
 8003db6:	47c8      	blx	r9
 8003db8:	3001      	adds	r0, #1
 8003dba:	d103      	bne.n	8003dc4 <_printf_common+0xac>
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	e7c6      	b.n	8003d56 <_printf_common+0x3e>
 8003dc8:	18e1      	adds	r1, r4, r3
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	2030      	movs	r0, #48	@ 0x30
 8003dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dd2:	4422      	add	r2, r4
 8003dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ddc:	3302      	adds	r3, #2
 8003dde:	e7c7      	b.n	8003d70 <_printf_common+0x58>
 8003de0:	2301      	movs	r3, #1
 8003de2:	4622      	mov	r2, r4
 8003de4:	4641      	mov	r1, r8
 8003de6:	4638      	mov	r0, r7
 8003de8:	47c8      	blx	r9
 8003dea:	3001      	adds	r0, #1
 8003dec:	d0e6      	beq.n	8003dbc <_printf_common+0xa4>
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7d9      	b.n	8003da6 <_printf_common+0x8e>
	...

08003df4 <_printf_i>:
 8003df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	7e0f      	ldrb	r7, [r1, #24]
 8003dfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dfc:	2f78      	cmp	r7, #120	@ 0x78
 8003dfe:	4691      	mov	r9, r2
 8003e00:	4680      	mov	r8, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	469a      	mov	sl, r3
 8003e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e0a:	d807      	bhi.n	8003e1c <_printf_i+0x28>
 8003e0c:	2f62      	cmp	r7, #98	@ 0x62
 8003e0e:	d80a      	bhi.n	8003e26 <_printf_i+0x32>
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	f000 80d1 	beq.w	8003fb8 <_printf_i+0x1c4>
 8003e16:	2f58      	cmp	r7, #88	@ 0x58
 8003e18:	f000 80b8 	beq.w	8003f8c <_printf_i+0x198>
 8003e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e24:	e03a      	b.n	8003e9c <_printf_i+0xa8>
 8003e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e2a:	2b15      	cmp	r3, #21
 8003e2c:	d8f6      	bhi.n	8003e1c <_printf_i+0x28>
 8003e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e34 <_printf_i+0x40>)
 8003e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003e1d 	.word	0x08003e1d
 8003e40:	08003e1d 	.word	0x08003e1d
 8003e44:	08003e1d 	.word	0x08003e1d
 8003e48:	08003e1d 	.word	0x08003e1d
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003e1d 	.word	0x08003e1d
 8003e54:	08003e1d 	.word	0x08003e1d
 8003e58:	08003e1d 	.word	0x08003e1d
 8003e5c:	08003e1d 	.word	0x08003e1d
 8003e60:	08003f9f 	.word	0x08003f9f
 8003e64:	08003ecb 	.word	0x08003ecb
 8003e68:	08003f59 	.word	0x08003f59
 8003e6c:	08003e1d 	.word	0x08003e1d
 8003e70:	08003e1d 	.word	0x08003e1d
 8003e74:	08003fc1 	.word	0x08003fc1
 8003e78:	08003e1d 	.word	0x08003e1d
 8003e7c:	08003ecb 	.word	0x08003ecb
 8003e80:	08003e1d 	.word	0x08003e1d
 8003e84:	08003e1d 	.word	0x08003e1d
 8003e88:	08003f61 	.word	0x08003f61
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6032      	str	r2, [r6, #0]
 8003e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e09c      	b.n	8003fda <_printf_i+0x1e6>
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	6031      	str	r1, [r6, #0]
 8003ea8:	0606      	lsls	r6, r0, #24
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0xbc>
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <_printf_i+0xc4>
 8003eb0:	0645      	lsls	r5, r0, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0xb8>
 8003eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	da03      	bge.n	8003ec4 <_printf_i+0xd0>
 8003ebc:	232d      	movs	r3, #45	@ 0x2d
 8003ebe:	426d      	negs	r5, r5
 8003ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec4:	4858      	ldr	r0, [pc, #352]	@ (8004028 <_printf_i+0x234>)
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	e011      	b.n	8003eee <_printf_i+0xfa>
 8003eca:	6821      	ldr	r1, [r4, #0]
 8003ecc:	6833      	ldr	r3, [r6, #0]
 8003ece:	0608      	lsls	r0, r1, #24
 8003ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ed4:	d402      	bmi.n	8003edc <_printf_i+0xe8>
 8003ed6:	0649      	lsls	r1, r1, #25
 8003ed8:	bf48      	it	mi
 8003eda:	b2ad      	uxthmi	r5, r5
 8003edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ede:	4852      	ldr	r0, [pc, #328]	@ (8004028 <_printf_i+0x234>)
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	bf14      	ite	ne
 8003ee4:	230a      	movne	r3, #10
 8003ee6:	2308      	moveq	r3, #8
 8003ee8:	2100      	movs	r1, #0
 8003eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eee:	6866      	ldr	r6, [r4, #4]
 8003ef0:	60a6      	str	r6, [r4, #8]
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	db05      	blt.n	8003f02 <_printf_i+0x10e>
 8003ef6:	6821      	ldr	r1, [r4, #0]
 8003ef8:	432e      	orrs	r6, r5
 8003efa:	f021 0104 	bic.w	r1, r1, #4
 8003efe:	6021      	str	r1, [r4, #0]
 8003f00:	d04b      	beq.n	8003f9a <_printf_i+0x1a6>
 8003f02:	4616      	mov	r6, r2
 8003f04:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f08:	fb03 5711 	mls	r7, r3, r1, r5
 8003f0c:	5dc7      	ldrb	r7, [r0, r7]
 8003f0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f12:	462f      	mov	r7, r5
 8003f14:	42bb      	cmp	r3, r7
 8003f16:	460d      	mov	r5, r1
 8003f18:	d9f4      	bls.n	8003f04 <_printf_i+0x110>
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d10b      	bne.n	8003f36 <_printf_i+0x142>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	07df      	lsls	r7, r3, #31
 8003f22:	d508      	bpl.n	8003f36 <_printf_i+0x142>
 8003f24:	6923      	ldr	r3, [r4, #16]
 8003f26:	6861      	ldr	r1, [r4, #4]
 8003f28:	4299      	cmp	r1, r3
 8003f2a:	bfde      	ittt	le
 8003f2c:	2330      	movle	r3, #48	@ 0x30
 8003f2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f36:	1b92      	subs	r2, r2, r6
 8003f38:	6122      	str	r2, [r4, #16]
 8003f3a:	f8cd a000 	str.w	sl, [sp]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	aa03      	add	r2, sp, #12
 8003f42:	4621      	mov	r1, r4
 8003f44:	4640      	mov	r0, r8
 8003f46:	f7ff fee7 	bl	8003d18 <_printf_common>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d14a      	bne.n	8003fe4 <_printf_i+0x1f0>
 8003f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f52:	b004      	add	sp, #16
 8003f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	f043 0320 	orr.w	r3, r3, #32
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	4832      	ldr	r0, [pc, #200]	@ (800402c <_printf_i+0x238>)
 8003f62:	2778      	movs	r7, #120	@ 0x78
 8003f64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	6831      	ldr	r1, [r6, #0]
 8003f6c:	061f      	lsls	r7, r3, #24
 8003f6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f72:	d402      	bmi.n	8003f7a <_printf_i+0x186>
 8003f74:	065f      	lsls	r7, r3, #25
 8003f76:	bf48      	it	mi
 8003f78:	b2ad      	uxthmi	r5, r5
 8003f7a:	6031      	str	r1, [r6, #0]
 8003f7c:	07d9      	lsls	r1, r3, #31
 8003f7e:	bf44      	itt	mi
 8003f80:	f043 0320 	orrmi.w	r3, r3, #32
 8003f84:	6023      	strmi	r3, [r4, #0]
 8003f86:	b11d      	cbz	r5, 8003f90 <_printf_i+0x19c>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	e7ad      	b.n	8003ee8 <_printf_i+0xf4>
 8003f8c:	4826      	ldr	r0, [pc, #152]	@ (8004028 <_printf_i+0x234>)
 8003f8e:	e7e9      	b.n	8003f64 <_printf_i+0x170>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f023 0320 	bic.w	r3, r3, #32
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	e7f6      	b.n	8003f88 <_printf_i+0x194>
 8003f9a:	4616      	mov	r6, r2
 8003f9c:	e7bd      	b.n	8003f1a <_printf_i+0x126>
 8003f9e:	6833      	ldr	r3, [r6, #0]
 8003fa0:	6825      	ldr	r5, [r4, #0]
 8003fa2:	6961      	ldr	r1, [r4, #20]
 8003fa4:	1d18      	adds	r0, r3, #4
 8003fa6:	6030      	str	r0, [r6, #0]
 8003fa8:	062e      	lsls	r6, r5, #24
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	d501      	bpl.n	8003fb2 <_printf_i+0x1be>
 8003fae:	6019      	str	r1, [r3, #0]
 8003fb0:	e002      	b.n	8003fb8 <_printf_i+0x1c4>
 8003fb2:	0668      	lsls	r0, r5, #25
 8003fb4:	d5fb      	bpl.n	8003fae <_printf_i+0x1ba>
 8003fb6:	8019      	strh	r1, [r3, #0]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6123      	str	r3, [r4, #16]
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	e7bc      	b.n	8003f3a <_printf_i+0x146>
 8003fc0:	6833      	ldr	r3, [r6, #0]
 8003fc2:	1d1a      	adds	r2, r3, #4
 8003fc4:	6032      	str	r2, [r6, #0]
 8003fc6:	681e      	ldr	r6, [r3, #0]
 8003fc8:	6862      	ldr	r2, [r4, #4]
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f7fc f8ff 	bl	80001d0 <memchr>
 8003fd2:	b108      	cbz	r0, 8003fd8 <_printf_i+0x1e4>
 8003fd4:	1b80      	subs	r0, r0, r6
 8003fd6:	6060      	str	r0, [r4, #4]
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	6123      	str	r3, [r4, #16]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe2:	e7aa      	b.n	8003f3a <_printf_i+0x146>
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	4649      	mov	r1, r9
 8003fea:	4640      	mov	r0, r8
 8003fec:	47d0      	blx	sl
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d0ad      	beq.n	8003f4e <_printf_i+0x15a>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	079b      	lsls	r3, r3, #30
 8003ff6:	d413      	bmi.n	8004020 <_printf_i+0x22c>
 8003ff8:	68e0      	ldr	r0, [r4, #12]
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	4298      	cmp	r0, r3
 8003ffe:	bfb8      	it	lt
 8004000:	4618      	movlt	r0, r3
 8004002:	e7a6      	b.n	8003f52 <_printf_i+0x15e>
 8004004:	2301      	movs	r3, #1
 8004006:	4632      	mov	r2, r6
 8004008:	4649      	mov	r1, r9
 800400a:	4640      	mov	r0, r8
 800400c:	47d0      	blx	sl
 800400e:	3001      	adds	r0, #1
 8004010:	d09d      	beq.n	8003f4e <_printf_i+0x15a>
 8004012:	3501      	adds	r5, #1
 8004014:	68e3      	ldr	r3, [r4, #12]
 8004016:	9903      	ldr	r1, [sp, #12]
 8004018:	1a5b      	subs	r3, r3, r1
 800401a:	42ab      	cmp	r3, r5
 800401c:	dcf2      	bgt.n	8004004 <_printf_i+0x210>
 800401e:	e7eb      	b.n	8003ff8 <_printf_i+0x204>
 8004020:	2500      	movs	r5, #0
 8004022:	f104 0619 	add.w	r6, r4, #25
 8004026:	e7f5      	b.n	8004014 <_printf_i+0x220>
 8004028:	080041b1 	.word	0x080041b1
 800402c:	080041c2 	.word	0x080041c2

08004030 <memmove>:
 8004030:	4288      	cmp	r0, r1
 8004032:	b510      	push	{r4, lr}
 8004034:	eb01 0402 	add.w	r4, r1, r2
 8004038:	d902      	bls.n	8004040 <memmove+0x10>
 800403a:	4284      	cmp	r4, r0
 800403c:	4623      	mov	r3, r4
 800403e:	d807      	bhi.n	8004050 <memmove+0x20>
 8004040:	1e43      	subs	r3, r0, #1
 8004042:	42a1      	cmp	r1, r4
 8004044:	d008      	beq.n	8004058 <memmove+0x28>
 8004046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800404e:	e7f8      	b.n	8004042 <memmove+0x12>
 8004050:	4402      	add	r2, r0
 8004052:	4601      	mov	r1, r0
 8004054:	428a      	cmp	r2, r1
 8004056:	d100      	bne.n	800405a <memmove+0x2a>
 8004058:	bd10      	pop	{r4, pc}
 800405a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800405e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004062:	e7f7      	b.n	8004054 <memmove+0x24>

08004064 <_sbrk_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d06      	ldr	r5, [pc, #24]	@ (8004080 <_sbrk_r+0x1c>)
 8004068:	2300      	movs	r3, #0
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	f7fc fd5c 	bl	8000b2c <_sbrk>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_sbrk_r+0x1a>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_sbrk_r+0x1a>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	200002ec 	.word	0x200002ec

08004084 <memcpy>:
 8004084:	440a      	add	r2, r1
 8004086:	4291      	cmp	r1, r2
 8004088:	f100 33ff 	add.w	r3, r0, #4294967295
 800408c:	d100      	bne.n	8004090 <memcpy+0xc>
 800408e:	4770      	bx	lr
 8004090:	b510      	push	{r4, lr}
 8004092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800409a:	4291      	cmp	r1, r2
 800409c:	d1f9      	bne.n	8004092 <memcpy+0xe>
 800409e:	bd10      	pop	{r4, pc}

080040a0 <_realloc_r>:
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a4:	4607      	mov	r7, r0
 80040a6:	4614      	mov	r4, r2
 80040a8:	460d      	mov	r5, r1
 80040aa:	b921      	cbnz	r1, 80040b6 <_realloc_r+0x16>
 80040ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b0:	4611      	mov	r1, r2
 80040b2:	f7ff bc4d 	b.w	8003950 <_malloc_r>
 80040b6:	b92a      	cbnz	r2, 80040c4 <_realloc_r+0x24>
 80040b8:	f7ff fbde 	bl	8003878 <_free_r>
 80040bc:	4625      	mov	r5, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	f000 f81a 	bl	80040fc <_malloc_usable_size_r>
 80040c8:	4284      	cmp	r4, r0
 80040ca:	4606      	mov	r6, r0
 80040cc:	d802      	bhi.n	80040d4 <_realloc_r+0x34>
 80040ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040d2:	d8f4      	bhi.n	80040be <_realloc_r+0x1e>
 80040d4:	4621      	mov	r1, r4
 80040d6:	4638      	mov	r0, r7
 80040d8:	f7ff fc3a 	bl	8003950 <_malloc_r>
 80040dc:	4680      	mov	r8, r0
 80040de:	b908      	cbnz	r0, 80040e4 <_realloc_r+0x44>
 80040e0:	4645      	mov	r5, r8
 80040e2:	e7ec      	b.n	80040be <_realloc_r+0x1e>
 80040e4:	42b4      	cmp	r4, r6
 80040e6:	4622      	mov	r2, r4
 80040e8:	4629      	mov	r1, r5
 80040ea:	bf28      	it	cs
 80040ec:	4632      	movcs	r2, r6
 80040ee:	f7ff ffc9 	bl	8004084 <memcpy>
 80040f2:	4629      	mov	r1, r5
 80040f4:	4638      	mov	r0, r7
 80040f6:	f7ff fbbf 	bl	8003878 <_free_r>
 80040fa:	e7f1      	b.n	80040e0 <_realloc_r+0x40>

080040fc <_malloc_usable_size_r>:
 80040fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004100:	1f18      	subs	r0, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	bfbc      	itt	lt
 8004106:	580b      	ldrlt	r3, [r1, r0]
 8004108:	18c0      	addlt	r0, r0, r3
 800410a:	4770      	bx	lr

0800410c <_init>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr

08004118 <_fini>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr
