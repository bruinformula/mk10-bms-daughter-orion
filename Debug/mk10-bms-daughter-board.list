
mk10-bms-daughter-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000522c  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080053bc  080053bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005504  08005504  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005504  08005504  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005504  08005504  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005508  08005508  00006508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800550c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000010  0800551c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  0800551c  00007284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5c8  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b08  00000000  00000000  00015608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00018110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0e  00000000  00000000  00018e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c37  00000000  00000000  00019896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001041c  00000000  00000000  0003b4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc98f  00000000  00000000  0004b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b0  00000000  00000000  001182bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0011b96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053a4 	.word	0x080053a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080053a4 	.word	0x080053a4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a22:	4b5c      	ldr	r3, [pc, #368]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a24:	4a5c      	ldr	r2, [pc, #368]	@ (8000b98 <MX_ADC1_Init+0x18c>)
 8000a26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a28:	4b5a      	ldr	r3, [pc, #360]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2e:	4b59      	ldr	r3, [pc, #356]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a34:	4b57      	ldr	r3, [pc, #348]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a3a:	4b56      	ldr	r3, [pc, #344]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a40:	4b54      	ldr	r3, [pc, #336]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a46:	4b53      	ldr	r3, [pc, #332]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a4c:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8000a52:	4b50      	ldr	r3, [pc, #320]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a54:	2208      	movs	r2, #8
 8000a56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a58:	4b4e      	ldr	r3, [pc, #312]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b4c      	ldr	r3, [pc, #304]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6c:	4b49      	ldr	r3, [pc, #292]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b47      	ldr	r3, [pc, #284]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a7a:	4b46      	ldr	r3, [pc, #280]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a82:	4844      	ldr	r0, [pc, #272]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a84:	f001 fa88 	bl	8001f98 <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000a8e:	f000 fabf 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a92:	4b42      	ldr	r3, [pc, #264]	@ (8000b9c <MX_ADC1_Init+0x190>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	237f      	movs	r3, #127	@ 0x7f
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4839      	ldr	r0, [pc, #228]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000ab0:	f001 fc56 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000aba:	f000 faa9 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000abe:	4b38      	ldr	r3, [pc, #224]	@ (8000ba0 <MX_ADC1_Init+0x194>)
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4832      	ldr	r0, [pc, #200]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000acc:	f001 fc48 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000ad6:	f000 fa9b 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ada:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <MX_ADC1_Init+0x198>)
 8000adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ade:	2312      	movs	r3, #18
 8000ae0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482b      	ldr	r0, [pc, #172]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000ae8:	f001 fc3a 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000af2:	f000 fa8d 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <MX_ADC1_Init+0x19c>)
 8000af8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000afa:	2318      	movs	r3, #24
 8000afc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4824      	ldr	r0, [pc, #144]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b04:	f001 fc2c 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000b0e:	f000 fa7f 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b12:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_ADC1_Init+0x1a0>)
 8000b14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b22:	f001 fc1d 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000b2c:	f000 fa70 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <MX_ADC1_Init+0x1a4>)
 8000b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b34:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4815      	ldr	r0, [pc, #84]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b40:	f001 fc0e 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000b4a:	f000 fa61 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <MX_ADC1_Init+0x1a8>)
 8000b50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b52:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b5e:	f001 fbff 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000b68:	f000 fa52 	bl	8001010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_ADC1_Init+0x1ac>)
 8000b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b70:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000b74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b7c:	f001 fbf0 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8000b86:	f000 fa43 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000002c 	.word	0x2000002c
 8000b98:	50040000 	.word	0x50040000
 8000b9c:	14f00020 	.word	0x14f00020
 8000ba0:	19200040 	.word	0x19200040
 8000ba4:	1d500080 	.word	0x1d500080
 8000ba8:	21800100 	.word	0x21800100
 8000bac:	25b00200 	.word	0x25b00200
 8000bb0:	2a000400 	.word	0x2a000400
 8000bb4:	2e300800 	.word	0x2e300800
 8000bb8:	32601000 	.word	0x32601000

08000bbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09e      	sub	sp, #120	@ 0x78
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2254      	movs	r2, #84	@ 0x54
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fbb5 	bl	800534c <memset>
  if(adcHandle->Instance==ADC1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd4 <HAL_ADC_MspInit+0x118>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d16e      	bne.n	8000cca <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bf0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bf2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000c00:	2310      	movs	r3, #16
 8000c02:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c04:	2307      	movs	r3, #7
 8000c06:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fc88 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000c26:	f000 f9f3 	bl	8001010 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a24      	ldr	r2, [pc, #144]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = T13_Pin|T14_Pin|T15_Pin|T16_Pin
 8000c5a:	23ff      	movs	r3, #255	@ 0xff
 8000c5c:	667b      	str	r3, [r7, #100]	@ 0x64
                          |T17_Pin|T18_Pin|T19_Pin|T20_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c5e:	230b      	movs	r3, #11
 8000c60:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f002 fc78 	bl	8003564 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c76:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce0 <HAL_ADC_MspInit+0x124>)
 8000c78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cae:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000cb0:	f002 fa60 	bl	8003174 <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000cba:	f000 f9a9 	bl	8001010 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cc4:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3778      	adds	r7, #120	@ 0x78
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	50040000 	.word	0x50040000
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	20000090 	.word	0x20000090
 8000ce0:	40020008 	.word	0x40020008

08000ce4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cea:	4a18      	ldr	r2, [pc, #96]	@ (8000d4c <MX_CAN1_Init+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d02:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000d06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d0e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d36:	f002 f80f 	bl	8002d58 <HAL_CAN_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d40:	f000 f966 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200000d8 	.word	0x200000d8
 8000d4c:	40006400 	.word	0x40006400

08000d50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <HAL_CAN_MspInit+0xa4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d13b      	bne.n	8000dea <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a20      	ldr	r2, [pc, #128]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000da2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000db4:	2309      	movs	r3, #9
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc2:	f002 fbcf 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de6:	f002 fbbd 	bl	8003564 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40006400 	.word	0x40006400
 8000df8:	40021000 	.word	0x40021000

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_DMA_Init+0x38>)
 8000e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e06:	4a0b      	ldr	r2, [pc, #44]	@ (8000e34 <MX_DMA_Init+0x38>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_DMA_Init+0x38>)
 8000e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	200b      	movs	r0, #11
 8000e20:	f002 f971 	bl	8003106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e24:	200b      	movs	r0, #11
 8000e26:	f002 f98a 	bl	800313e <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	4a27      	ldr	r2, [pc, #156]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS2_Pin|CS1_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000e9c:	4815      	ldr	r0, [pc, #84]	@ (8000ef4 <MX_GPIO_Init+0xbc>)
 8000e9e:	f002 fccb 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <MX_GPIO_Init+0xc0>)
 8000ea8:	f002 fcc6 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 8000eac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480b      	ldr	r0, [pc, #44]	@ (8000ef4 <MX_GPIO_Init+0xbc>)
 8000ec6:	f002 fb4d 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS3_Pin */
  GPIO_InitStruct.Pin = CS3_Pin;
 8000eca:	2380      	movs	r3, #128	@ 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS3_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_GPIO_Init+0xc0>)
 8000ee2:	f002 fb3f 	bl	8003564 <HAL_GPIO_Init>

}
 8000ee6:	bf00      	nop
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000400 	.word	0x48000400

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f000 fde9 	bl	8001ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f83e 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f7ff ff96 	bl	8000e38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0c:	f7ff ff76 	bl	8000dfc <MX_DMA_Init>
  MX_SPI3_Init();
 8000f10:	f000 f9d6 	bl	80012c0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f14:	f7ff fd7a 	bl	8000a0c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f18:	f7ff fee4 	bl	8000ce4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  initMCP(&MCP1, &hspi3, CS1_PORT, CS1_PIN);
 8000f1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f20:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <main+0x64>)
 8000f22:	4910      	ldr	r1, [pc, #64]	@ (8000f64 <main+0x68>)
 8000f24:	4810      	ldr	r0, [pc, #64]	@ (8000f68 <main+0x6c>)
 8000f26:	f000 f879 	bl	800101c <initMCP>
  initMCP(&MCP2, &hspi3, CS2_PORT, CS2_PIN);
 8000f2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <main+0x64>)
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <main+0x68>)
 8000f32:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <main+0x70>)
 8000f34:	f000 f872 	bl	800101c <initMCP>
  initMCP(&MCP3, &hspi3, CS3_PORT, CS3_PIN);
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <main+0x74>)
 8000f3c:	4909      	ldr	r1, [pc, #36]	@ (8000f64 <main+0x68>)
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <main+0x78>)
 8000f40:	f000 f86c 	bl	800101c <initMCP>
//
//	  getLowestTemp();
//	  getHighestTemp();
//	  getAverageTemp();

	  formAddressDataframe(&penis, &(CAN_CONTEXT.address_broadcast_dataframe));
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <main+0x7c>)
 8000f46:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <main+0x80>)
 8000f48:	f000 fd16 	bl	8001978 <formAddressDataframe>
	  formThermistorDataframe(&penis, &(CAN_CONTEXT.thermistor_broadcast_dataframe));
 8000f4c:	490c      	ldr	r1, [pc, #48]	@ (8000f80 <main+0x84>)
 8000f4e:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <main+0x80>)
 8000f50:	f000 fd36 	bl	80019c0 <formThermistorDataframe>

	  HAL_Delay(200);
 8000f54:	20c8      	movs	r0, #200	@ 0xc8
 8000f56:	f000 fe33 	bl	8001bc0 <HAL_Delay>
	  formAddressDataframe(&penis, &(CAN_CONTEXT.address_broadcast_dataframe));
 8000f5a:	bf00      	nop
 8000f5c:	e7f2      	b.n	8000f44 <main+0x48>
 8000f5e:	bf00      	nop
 8000f60:	48000800 	.word	0x48000800
 8000f64:	20000118 	.word	0x20000118
 8000f68:	2000017c 	.word	0x2000017c
 8000f6c:	200001a4 	.word	0x200001a4
 8000f70:	48000400 	.word	0x48000400
 8000f74:	200001cc 	.word	0x200001cc
 8000f78:	20000104 	.word	0x20000104
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000110 	.word	0x20000110

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b096      	sub	sp, #88	@ 0x58
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2244      	movs	r2, #68	@ 0x44
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f9da 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fa6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000faa:	f002 fc6b 	bl	8003884 <HAL_PWREx_ControlVoltageScaling>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fb4:	f000 f82c 	bl	8001010 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fc4:	2360      	movs	r3, #96	@ 0x60
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fcad 	bl	8003930 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fdc:	f000 f818 	bl	8001010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 f8ad 	bl	8004158 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001004:	f000 f804 	bl	8001010 <Error_Handler>
  }
}
 8001008:	bf00      	nop
 800100a:	3758      	adds	r7, #88	@ 0x58
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <Error_Handler+0x8>

0800101c <initMCP>:
// */


#include "mcp3204.h"

void initMCP(MCP3204* mcp, SPI_HandleTypeDef* spi, GPIO_TypeDef* port, uint16_t pin) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	807b      	strh	r3, [r7, #2]
	mcp->spiInstance = spi;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	mcp->CS_PORT = port;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	605a      	str	r2, [r3, #4]
	mcp->CS_PIN = pin;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	887a      	ldrh	r2, [r7, #2]
 800103a:	811a      	strh	r2, [r3, #8]

	mcp->config.bits.RESV = RESV_BIT; // Fixed at 0
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	mcp->config.bits.START = START_BIT; // Fixed at 1
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24

	mcp->txData[1] = 0;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	72da      	strb	r2, [r3, #11]
	mcp->txData[2] = 0;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	731a      	strb	r2, [r3, #12]
	mcp->txData[3] = 0;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	735a      	strb	r2, [r3, #13]

	HAL_GPIO_WritePin(mcp->CS_PORT, mcp->CS_PIN, GPIO_PIN_SET); // Assert it high
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f002 fbdf 	bl	8003838 <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <getADCValue>:

void getADCValue(MCP3204* mcp) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af02      	add	r7, sp, #8
 8001088:	6078      	str	r0, [r7, #4]
	// Assume desired channel has been selected already...
	mcp->txData[0] = mcp->config.byte;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	729a      	strb	r2, [r3, #10]

	mcp->rxData[0] = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	739a      	strb	r2, [r3, #14]
	mcp->rxData[1] = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	73da      	strb	r2, [r3, #15]
	mcp->rxData[2] = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	741a      	strb	r2, [r3, #16]
	mcp->rxData[3] = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	745a      	strb	r2, [r3, #17]

	HAL_GPIO_WritePin(mcp->CS_PORT, mcp->CS_PIN, GPIO_PIN_RESET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f002 fbbe 	bl	8003838 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(mcp->spiInstance, mcp->txData, mcp->rxData, 4, HAL_MAX_DELAY);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f103 010a 	add.w	r1, r3, #10
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f103 020e 	add.w	r2, r3, #14
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2304      	movs	r3, #4
 80010d4:	f003 fdb7 	bl	8004c46 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(mcp->CS_PORT, mcp->CS_PIN, GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6858      	ldr	r0, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	891b      	ldrh	r3, [r3, #8]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	f002 fba8 	bl	8003838 <HAL_GPIO_WritePin>

	uint16_t value = ((uint16_t)mcp->rxData[1] << 8) | mcp->rxData[2];
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7bdb      	ldrb	r3, [r3, #15]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7c1b      	ldrb	r3, [r3, #16]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	81fb      	strh	r3, [r7, #14]
	mcp->rawADC = (value >> 3); // Use RSHIFT-3!!!
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	825a      	strh	r2, [r3, #18]
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <computeCH0>:

void computeCH0(MCP3204* mcp) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	enableCH0(mcp);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f889 	bl	8001230 <enableCH0>
	getADCValue(mcp);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffaf 	bl	8001082 <getADCValue>
	mcp->CH0_Voltage = computeVoltage(mcp->rawADC);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	8a5b      	ldrh	r3, [r3, #18]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f851 	bl	80011d0 <computeVoltage>
 800112e:	eef0 7a40 	vmov.f32	s15, s0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <computeCH1>:

void computeCH1(MCP3204* mcp) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	enableCH1(mcp);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f883 	bl	8001254 <enableCH1>
	getADCValue(mcp);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff97 	bl	8001082 <getADCValue>
	mcp->CH1_Voltage = computeVoltage(mcp->rawADC);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	8a5b      	ldrh	r3, [r3, #18]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f839 	bl	80011d0 <computeVoltage>
 800115e:	eef0 7a40 	vmov.f32	s15, s0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <computeCH2>:

void computeCH2(MCP3204* mcp) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	enableCH2(mcp);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f87d 	bl	8001278 <enableCH2>
	getADCValue(mcp);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff7f 	bl	8001082 <getADCValue>
	mcp->CH2_Voltage = computeVoltage(mcp->rawADC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	8a5b      	ldrh	r3, [r3, #18]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f821 	bl	80011d0 <computeVoltage>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <computeCH3>:

void computeCH3(MCP3204* mcp) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	enableCH3(mcp);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f877 	bl	800129c <enableCH3>
	getADCValue(mcp);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff67 	bl	8001082 <getADCValue>
	mcp->CH3_Voltage = computeVoltage(mcp->rawADC);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	8a5b      	ldrh	r3, [r3, #18]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f809 	bl	80011d0 <computeVoltage>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <computeVoltage>:

float computeVoltage(uint16_t adc_reading) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
	return (adc_reading * MCP_VREF)/4095.0;
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f949 	bl	8000474 <__aeabi_i2d>
 80011e2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001220 <computeVoltage+0x50>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f9ae 	bl	8000548 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	a30c      	add	r3, pc, #48	@ (adr r3, 8001228 <computeVoltage+0x58>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff facf 	bl	800079c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fbb1 	bl	800096c <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	ee07 3a90 	vmov	s15, r3
}
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	66666666 	.word	0x66666666
 8001224:	400a6666 	.word	0x400a6666
 8001228:	00000000 	.word	0x00000000
 800122c:	40affe00 	.word	0x40affe00

08001230 <enableCH0>:

void enableCH0(MCP3204* mcp) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_0;
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800123e:	2108      	movs	r1, #8
 8001240:	f361 0344 	bfi	r3, r1, #1, #4
 8001244:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <enableCH1>:

void enableCH1(MCP3204* mcp) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_1;
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8001262:	2109      	movs	r1, #9
 8001264:	f361 0344 	bfi	r3, r1, #1, #4
 8001268:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <enableCH2>:

void enableCH2(MCP3204* mcp) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_2;
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8001286:	210a      	movs	r1, #10
 8001288:	f361 0344 	bfi	r3, r1, #1, #4
 800128c:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <enableCH3>:

void enableCH3(MCP3204* mcp) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_3;
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80012aa:	210b      	movs	r1, #11
 80012ac:	f361 0344 	bfi	r3, r1, #1, #4
 80012b0:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <MX_SPI3_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012f6:	2218      	movs	r2, #24
 80012f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_SPI3_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_SPI3_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <MX_SPI3_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_SPI3_Init+0x74>)
 800130e:	2207      	movs	r2, #7
 8001310:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MX_SPI3_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_SPI3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_SPI3_Init+0x74>)
 8001320:	f003 fbee 	bl	8004b00 <HAL_SPI_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800132a:	f7ff fe71 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000118 	.word	0x20000118
 8001338:	40003c00 	.word	0x40003c00

0800133c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <HAL_SPI_MspInit+0x7c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d127      	bne.n	80013ae <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001362:	4a16      	ldr	r2, [pc, #88]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001368:	6593      	str	r3, [r2, #88]	@ 0x58
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800138e:	2338      	movs	r3, #56	@ 0x38
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800139e:	2306      	movs	r3, #6
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <HAL_SPI_MspInit+0x84>)
 80013aa:	f002 f8db 	bl	8003564 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40003c00 	.word	0x40003c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <NMI_Handler+0x4>

08001414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <MemManage_Handler+0x4>

08001424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <UsageFault_Handler+0x4>

08001434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001462:	f000 fb8d 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <DMA1_Channel1_IRQHandler+0x10>)
 8001472:	f001 ff97 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000090 	.word	0x20000090

08001480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <SystemInit+0x20>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <SystemInit+0x20>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <computeAllVoltages>:
float highestTemp;
float lowestTemp;
float averageTemp;

// ALL VOLTAGE CALCULATIONS!!!!!!
void computeAllVoltages() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) rawADCBuffer, 8);
 80014a8:	2208      	movs	r2, #8
 80014aa:	4916      	ldr	r1, [pc, #88]	@ (8001504 <computeAllVoltages+0x60>)
 80014ac:	4816      	ldr	r0, [pc, #88]	@ (8001508 <computeAllVoltages+0x64>)
 80014ae:	f000 feb5 	bl	800221c <HAL_ADC_Start_DMA>
	  computeSTM_ADC_Voltages();
 80014b2:	f000 f92f 	bl	8001714 <computeSTM_ADC_Voltages>

	  computeCH0(&MCP1);
 80014b6:	4815      	ldr	r0, [pc, #84]	@ (800150c <computeAllVoltages+0x68>)
 80014b8:	f7ff fe2a 	bl	8001110 <computeCH0>
	  computeCH1(&MCP1);
 80014bc:	4813      	ldr	r0, [pc, #76]	@ (800150c <computeAllVoltages+0x68>)
 80014be:	f7ff fe3f 	bl	8001140 <computeCH1>
	  computeCH2(&MCP1);
 80014c2:	4812      	ldr	r0, [pc, #72]	@ (800150c <computeAllVoltages+0x68>)
 80014c4:	f7ff fe54 	bl	8001170 <computeCH2>
	  computeCH3(&MCP1);
 80014c8:	4810      	ldr	r0, [pc, #64]	@ (800150c <computeAllVoltages+0x68>)
 80014ca:	f7ff fe69 	bl	80011a0 <computeCH3>

	  computeCH0(&MCP2);
 80014ce:	4810      	ldr	r0, [pc, #64]	@ (8001510 <computeAllVoltages+0x6c>)
 80014d0:	f7ff fe1e 	bl	8001110 <computeCH0>
	  computeCH1(&MCP2);
 80014d4:	480e      	ldr	r0, [pc, #56]	@ (8001510 <computeAllVoltages+0x6c>)
 80014d6:	f7ff fe33 	bl	8001140 <computeCH1>
	  computeCH2(&MCP2);
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <computeAllVoltages+0x6c>)
 80014dc:	f7ff fe48 	bl	8001170 <computeCH2>
	  computeCH3(&MCP2);
 80014e0:	480b      	ldr	r0, [pc, #44]	@ (8001510 <computeAllVoltages+0x6c>)
 80014e2:	f7ff fe5d 	bl	80011a0 <computeCH3>

	  computeCH0(&MCP3);
 80014e6:	480b      	ldr	r0, [pc, #44]	@ (8001514 <computeAllVoltages+0x70>)
 80014e8:	f7ff fe12 	bl	8001110 <computeCH0>
	  computeCH1(&MCP3);
 80014ec:	4809      	ldr	r0, [pc, #36]	@ (8001514 <computeAllVoltages+0x70>)
 80014ee:	f7ff fe27 	bl	8001140 <computeCH1>
	  computeCH2(&MCP3);
 80014f2:	4808      	ldr	r0, [pc, #32]	@ (8001514 <computeAllVoltages+0x70>)
 80014f4:	f7ff fe3c 	bl	8001170 <computeCH2>
	  computeCH3(&MCP3);
 80014f8:	4806      	ldr	r0, [pc, #24]	@ (8001514 <computeAllVoltages+0x70>)
 80014fa:	f7ff fe51 	bl	80011a0 <computeCH3>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000244 	.word	0x20000244
 8001508:	2000002c 	.word	0x2000002c
 800150c:	2000017c 	.word	0x2000017c
 8001510:	200001a4 	.word	0x200001a4
 8001514:	200001cc 	.word	0x200001cc

08001518 <computeAllTemps>:

void computeAllTemps() {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	  // Index i corresponds to TEMP i+1
	  temp_conversions[0] = voltageToTemp(MCP1.CH0_Voltage);
 800151c:	4b78      	ldr	r3, [pc, #480]	@ (8001700 <computeAllTemps+0x1e8>)
 800151e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	f000 f919 	bl	800175c <voltageToTemp>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
 800152e:	4b75      	ldr	r3, [pc, #468]	@ (8001704 <computeAllTemps+0x1ec>)
 8001530:	edc3 7a00 	vstr	s15, [r3]
	  temp_conversions[1] = voltageToTemp(MCP1.CH1_Voltage);
 8001534:	4b72      	ldr	r3, [pc, #456]	@ (8001700 <computeAllTemps+0x1e8>)
 8001536:	edd3 7a06 	vldr	s15, [r3, #24]
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	f000 f90d 	bl	800175c <voltageToTemp>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <computeAllTemps+0x1ec>)
 8001548:	edc3 7a01 	vstr	s15, [r3, #4]
	  temp_conversions[2] = voltageToTemp(MCP1.CH2_Voltage);
 800154c:	4b6c      	ldr	r3, [pc, #432]	@ (8001700 <computeAllTemps+0x1e8>)
 800154e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f000 f901 	bl	800175c <voltageToTemp>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
 800155e:	4b69      	ldr	r3, [pc, #420]	@ (8001704 <computeAllTemps+0x1ec>)
 8001560:	edc3 7a02 	vstr	s15, [r3, #8]
	  temp_conversions[3] = voltageToTemp(MCP1.CH3_Voltage);
 8001564:	4b66      	ldr	r3, [pc, #408]	@ (8001700 <computeAllTemps+0x1e8>)
 8001566:	edd3 7a08 	vldr	s15, [r3, #32]
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f000 f8f5 	bl	800175c <voltageToTemp>
 8001572:	eef0 7a40 	vmov.f32	s15, s0
 8001576:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <computeAllTemps+0x1ec>)
 8001578:	edc3 7a03 	vstr	s15, [r3, #12]

	  temp_conversions[4] = voltageToTemp(MCP2.CH0_Voltage);
 800157c:	4b62      	ldr	r3, [pc, #392]	@ (8001708 <computeAllTemps+0x1f0>)
 800157e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	f000 f8e9 	bl	800175c <voltageToTemp>
 800158a:	eef0 7a40 	vmov.f32	s15, s0
 800158e:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <computeAllTemps+0x1ec>)
 8001590:	edc3 7a04 	vstr	s15, [r3, #16]
	  temp_conversions[5] = voltageToTemp(MCP2.CH1_Voltage);
 8001594:	4b5c      	ldr	r3, [pc, #368]	@ (8001708 <computeAllTemps+0x1f0>)
 8001596:	edd3 7a06 	vldr	s15, [r3, #24]
 800159a:	eeb0 0a67 	vmov.f32	s0, s15
 800159e:	f000 f8dd 	bl	800175c <voltageToTemp>
 80015a2:	eef0 7a40 	vmov.f32	s15, s0
 80015a6:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <computeAllTemps+0x1ec>)
 80015a8:	edc3 7a05 	vstr	s15, [r3, #20]
	  temp_conversions[6] = voltageToTemp(MCP2.CH2_Voltage);
 80015ac:	4b56      	ldr	r3, [pc, #344]	@ (8001708 <computeAllTemps+0x1f0>)
 80015ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	f000 f8d1 	bl	800175c <voltageToTemp>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	4b51      	ldr	r3, [pc, #324]	@ (8001704 <computeAllTemps+0x1ec>)
 80015c0:	edc3 7a06 	vstr	s15, [r3, #24]
	  temp_conversions[7] = voltageToTemp(MCP2.CH3_Voltage);
 80015c4:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <computeAllTemps+0x1f0>)
 80015c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	f000 f8c5 	bl	800175c <voltageToTemp>
 80015d2:	eef0 7a40 	vmov.f32	s15, s0
 80015d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001704 <computeAllTemps+0x1ec>)
 80015d8:	edc3 7a07 	vstr	s15, [r3, #28]

	  temp_conversions[8] = voltageToTemp(MCP3.CH0_Voltage);
 80015dc:	4b4b      	ldr	r3, [pc, #300]	@ (800170c <computeAllTemps+0x1f4>)
 80015de:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	f000 f8b9 	bl	800175c <voltageToTemp>
 80015ea:	eef0 7a40 	vmov.f32	s15, s0
 80015ee:	4b45      	ldr	r3, [pc, #276]	@ (8001704 <computeAllTemps+0x1ec>)
 80015f0:	edc3 7a08 	vstr	s15, [r3, #32]
	  temp_conversions[9] = voltageToTemp(MCP3.CH1_Voltage);
 80015f4:	4b45      	ldr	r3, [pc, #276]	@ (800170c <computeAllTemps+0x1f4>)
 80015f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	f000 f8ad 	bl	800175c <voltageToTemp>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	4b3f      	ldr	r3, [pc, #252]	@ (8001704 <computeAllTemps+0x1ec>)
 8001608:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	  temp_conversions[10] = voltageToTemp(MCP3.CH2_Voltage);
 800160c:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <computeAllTemps+0x1f4>)
 800160e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	f000 f8a1 	bl	800175c <voltageToTemp>
 800161a:	eef0 7a40 	vmov.f32	s15, s0
 800161e:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <computeAllTemps+0x1ec>)
 8001620:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	  temp_conversions[11] = voltageToTemp(MCP3.CH3_Voltage);
 8001624:	4b39      	ldr	r3, [pc, #228]	@ (800170c <computeAllTemps+0x1f4>)
 8001626:	edd3 7a08 	vldr	s15, [r3, #32]
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	f000 f895 	bl	800175c <voltageToTemp>
 8001632:	eef0 7a40 	vmov.f32	s15, s0
 8001636:	4b33      	ldr	r3, [pc, #204]	@ (8001704 <computeAllTemps+0x1ec>)
 8001638:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	  temp_conversions[12] = voltageToTemp(voltageBuffer[0]);
 800163c:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <computeAllTemps+0x1f8>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	f000 f889 	bl	800175c <voltageToTemp>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <computeAllTemps+0x1ec>)
 8001650:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	  temp_conversions[13] = voltageToTemp(voltageBuffer[1]);
 8001654:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <computeAllTemps+0x1f8>)
 8001656:	edd3 7a01 	vldr	s15, [r3, #4]
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f000 f87d 	bl	800175c <voltageToTemp>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <computeAllTemps+0x1ec>)
 8001668:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	  temp_conversions[14] = voltageToTemp(voltageBuffer[2]);
 800166c:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <computeAllTemps+0x1f8>)
 800166e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	f000 f871 	bl	800175c <voltageToTemp>
 800167a:	eef0 7a40 	vmov.f32	s15, s0
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <computeAllTemps+0x1ec>)
 8001680:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	  temp_conversions[15] = voltageToTemp(voltageBuffer[3]);
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <computeAllTemps+0x1f8>)
 8001686:	edd3 7a03 	vldr	s15, [r3, #12]
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	f000 f865 	bl	800175c <voltageToTemp>
 8001692:	eef0 7a40 	vmov.f32	s15, s0
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <computeAllTemps+0x1ec>)
 8001698:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	  temp_conversions[16] = voltageToTemp(voltageBuffer[4]);
 800169c:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <computeAllTemps+0x1f8>)
 800169e:	edd3 7a04 	vldr	s15, [r3, #16]
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	f000 f859 	bl	800175c <voltageToTemp>
 80016aa:	eef0 7a40 	vmov.f32	s15, s0
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <computeAllTemps+0x1ec>)
 80016b0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	  temp_conversions[17] = voltageToTemp(voltageBuffer[5]);
 80016b4:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <computeAllTemps+0x1f8>)
 80016b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	f000 f84d 	bl	800175c <voltageToTemp>
 80016c2:	eef0 7a40 	vmov.f32	s15, s0
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <computeAllTemps+0x1ec>)
 80016c8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	  temp_conversions[18] = voltageToTemp(voltageBuffer[6]);
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <computeAllTemps+0x1f8>)
 80016ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80016d2:	eeb0 0a67 	vmov.f32	s0, s15
 80016d6:	f000 f841 	bl	800175c <voltageToTemp>
 80016da:	eef0 7a40 	vmov.f32	s15, s0
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <computeAllTemps+0x1ec>)
 80016e0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	  temp_conversions[19] = voltageToTemp(voltageBuffer[7]);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <computeAllTemps+0x1f8>)
 80016e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80016ea:	eeb0 0a67 	vmov.f32	s0, s15
 80016ee:	f000 f835 	bl	800175c <voltageToTemp>
 80016f2:	eef0 7a40 	vmov.f32	s15, s0
 80016f6:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <computeAllTemps+0x1ec>)
 80016f8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000017c 	.word	0x2000017c
 8001704:	200001f4 	.word	0x200001f4
 8001708:	200001a4 	.word	0x200001a4
 800170c:	200001cc 	.word	0x200001cc
 8001710:	20000254 	.word	0x20000254

08001714 <computeSTM_ADC_Voltages>:

void computeSTM_ADC_Voltages() {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < 8; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	e011      	b.n	8001744 <computeSTM_ADC_Voltages+0x30>
		voltageBuffer[i] = computeVoltage(rawADCBuffer[i]);
 8001720:	4a0c      	ldr	r2, [pc, #48]	@ (8001754 <computeSTM_ADC_Voltages+0x40>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fd51 	bl	80011d0 <computeVoltage>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <computeSTM_ADC_Voltages+0x44>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < 8; i++) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3301      	adds	r3, #1
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b07      	cmp	r3, #7
 8001748:	d9ea      	bls.n	8001720 <computeSTM_ADC_Voltages+0xc>
	}
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000244 	.word	0x20000244
 8001758:	20000254 	.word	0x20000254

0800175c <voltageToTemp>:

float voltageToTemp(float V) {
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	ed87 0a01 	vstr	s0, [r7, #4]
	if (V > voltage_table[0] || V < voltage_table[32]) {
 8001766:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001848 <voltageToTemp+0xec>
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dc08      	bgt.n	800178a <voltageToTemp+0x2e>
 8001778:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800184c <voltageToTemp+0xf0>
 800177c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d501      	bpl.n	800178e <voltageToTemp+0x32>
		return 999.0; // Out of range
 800178a:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <voltageToTemp+0xf4>)
 800178c:	e053      	b.n	8001836 <voltageToTemp+0xda>
	}

	for (size_t i = 0; i < 32; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e04c      	b.n	800182e <voltageToTemp+0xd2>
		float v_high = voltage_table[i];      // higher voltage, lower temp
 8001794:	4a2f      	ldr	r2, [pc, #188]	@ (8001854 <voltageToTemp+0xf8>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
		float v_low = voltage_table[i + 1];   // lower voltage, higher temp
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001854 <voltageToTemp+0xf8>)
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	617b      	str	r3, [r7, #20]

		if (V <= v_high && V >= v_low) {
 80017ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d833      	bhi.n	8001828 <voltageToTemp+0xcc>
 80017c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80017c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	db2a      	blt.n	8001828 <voltageToTemp+0xcc>
			float t_high = temp_table[i];
 80017d2:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <voltageToTemp+0xfc>)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	613b      	str	r3, [r7, #16]
			float t_low = temp_table[i + 1];
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <voltageToTemp+0xfc>)
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]

			// Linear interpolation
			float temp = t_high + (V - v_high) * (t_low - t_high) / (v_low - v_high);
 80017ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f8:	edd7 6a03 	vldr	s13, [r7, #12]
 80017fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001800:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001804:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001808:	ed97 7a05 	vldr	s14, [r7, #20]
 800180c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001810:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001818:	ed97 7a04 	vldr	s14, [r7, #16]
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	edc7 7a02 	vstr	s15, [r7, #8]
			return temp;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	e006      	b.n	8001836 <voltageToTemp+0xda>
	for (size_t i = 0; i < 32; i++) {
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b1f      	cmp	r3, #31
 8001832:	d9af      	bls.n	8001794 <voltageToTemp+0x38>
		}
	}

	return 999.0; // Should not reach here
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <voltageToTemp+0xf4>)
}
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3724      	adds	r7, #36	@ 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	401c28f6 	.word	0x401c28f6
 800184c:	3fa66666 	.word	0x3fa66666
 8001850:	4479c000 	.word	0x4479c000
 8001854:	080053fc 	.word	0x080053fc
 8001858:	08005480 	.word	0x08005480

0800185c <getLowestTemp>:

void getLowestTemp() {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
	float min = FLT_MAX;
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <getLowestTemp+0x54>)
 8001864:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	e015      	b.n	8001898 <getLowestTemp+0x3c>
		if (temp_conversions[i] < min) min = temp_conversions[i];
 800186c:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <getLowestTemp+0x58>)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ed97 7a01 	vldr	s14, [r7, #4]
 800187c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	dd05      	ble.n	8001892 <getLowestTemp+0x36>
 8001886:	4a0b      	ldr	r2, [pc, #44]	@ (80018b4 <getLowestTemp+0x58>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b13      	cmp	r3, #19
 800189c:	d9e6      	bls.n	800186c <getLowestTemp+0x10>
	}
	lowestTemp = min;
 800189e:	4a06      	ldr	r2, [pc, #24]	@ (80018b8 <getLowestTemp+0x5c>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	7f7fffff 	.word	0x7f7fffff
 80018b4:	200001f4 	.word	0x200001f4
 80018b8:	20000278 	.word	0x20000278

080018bc <getHighestTemp>:

void getHighestTemp() {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
	float max = -FLT_MAX;
 80018c2:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 80018c6:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	e015      	b.n	80018fa <getHighestTemp+0x3e>
		if (temp_conversions[i] > max) max = temp_conversions[i];
 80018ce:	4a11      	ldr	r2, [pc, #68]	@ (8001914 <getHighestTemp+0x58>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ed97 7a01 	vldr	s14, [r7, #4]
 80018de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d505      	bpl.n	80018f4 <getHighestTemp+0x38>
 80018e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <getHighestTemp+0x58>)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b13      	cmp	r3, #19
 80018fe:	d9e6      	bls.n	80018ce <getHighestTemp+0x12>
	}
	highestTemp = max;
 8001900:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <getHighestTemp+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200001f4 	.word	0x200001f4
 8001918:	20000274 	.word	0x20000274

0800191c <getAverageTemp>:

void getAverageTemp() {
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
	float sum = 0;
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	e00e      	b.n	800194c <getAverageTemp+0x30>
		sum+=temp_conversions[i];
 800192e:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <getAverageTemp+0x54>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ed97 7a01 	vldr	s14, [r7, #4]
 800193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001942:	edc7 7a01 	vstr	s15, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b13      	cmp	r3, #19
 8001950:	d9ed      	bls.n	800192e <getAverageTemp+0x12>
	}
	averageTemp = (sum/20);
 8001952:	ed97 7a01 	vldr	s14, [r7, #4]
 8001956:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800195a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <getAverageTemp+0x58>)
 8001960:	edc3 7a00 	vstr	s15, [r3]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	200001f4 	.word	0x200001f4
 8001974:	2000027c 	.word	0x2000027c

08001978 <formAddressDataframe>:

// CAN DATAFRAME IMPLEMENTATIONS
void formAddressDataframe(uint32_t* lastReadMS,  J1939_ADDRESS_BROADCAST_DF* dataframe) {
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	dataframe->data.j1931_address_b1 = 0xF3;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	22f3      	movs	r2, #243	@ 0xf3
 8001986:	701a      	strb	r2, [r3, #0]
	dataframe->data.j1931_address_b2 = 0x00;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
	dataframe->data.j1931_address_b3 = 0x80;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	709a      	strb	r2, [r3, #2]
	dataframe->data.bms_address = 0xF3;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	22f3      	movs	r2, #243	@ 0xf3
 8001998:	70da      	strb	r2, [r3, #3]
	dataframe->data.thermistor_module_number_shifted = (MODULE_NUMBER << 3);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2208      	movs	r2, #8
 800199e:	711a      	strb	r2, [r3, #4]
	dataframe->data.c1 = 0x40;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2240      	movs	r2, #64	@ 0x40
 80019a4:	715a      	strb	r2, [r3, #5]
	dataframe->data.c2 = 0x1E;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	221e      	movs	r2, #30
 80019aa:	719a      	strb	r2, [r3, #6]
	dataframe->data.c3 = 0x90;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2290      	movs	r2, #144	@ 0x90
 80019b0:	71da      	strb	r2, [r3, #7]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <formThermistorDataframe>:

void formThermistorDataframe(uint32_t* lastReadMS,  THERMISTOR_BMS_BROADCAST_DF* dataframe) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
	// Do all the necessary calculations
	computeAllVoltages();
 80019ca:	f7ff fd6b 	bl	80014a4 <computeAllVoltages>
	computeAllTemps();
 80019ce:	f7ff fda3 	bl	8001518 <computeAllTemps>

	getLowestTemp();
 80019d2:	f7ff ff43 	bl	800185c <getLowestTemp>
	getHighestTemp();
 80019d6:	f7ff ff71 	bl	80018bc <getHighestTemp>
	getAverageTemp();
 80019da:	f7ff ff9f 	bl	800191c <getAverageTemp>

	uint8_t checksum = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]

	// Now prep the dataframe!
	dataframe->data.thermistor_module_number = MODULE_NUMBER;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
	dataframe->data.lowest_temp_value = (uint8_t)lowestTemp;
 80019e8:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <formThermistorDataframe+0xb8>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80019f6:	793b      	ldrb	r3, [r7, #4]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	705a      	strb	r2, [r3, #1]
	dataframe->data.highest_temp_value = (uint8_t)highestTemp;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <formThermistorDataframe+0xbc>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a08:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a0c:	793b      	ldrb	r3, [r7, #4]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	709a      	strb	r2, [r3, #2]
	dataframe->data.average_temp_value = (uint8_t)averageTemp;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <formThermistorDataframe+0xc0>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a22:	793b      	ldrb	r3, [r7, #4]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	70da      	strb	r2, [r3, #3]
	dataframe->data.num_thermistors = NUM_THERMISTORS;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2214      	movs	r2, #20
 8001a2e:	711a      	strb	r2, [r3, #4]
	dataframe->data.highest_thermistor_id = THERMISTOR_HIGHEST_INDEX;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2213      	movs	r2, #19
 8001a34:	715a      	strb	r2, [r3, #5]
	dataframe->data.lowest_thermistor_id = THERMISTOR_LOWEST_INDEX;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	719a      	strb	r2, [r3, #6]

	for (size_t i = 0; i < 7; i++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e009      	b.n	8001a56 <formThermistorDataframe+0x96>
		checksum+=dataframe->array[i];
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4413      	add	r3, r2
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < 7; i++) {
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	3301      	adds	r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d9f2      	bls.n	8001a42 <formThermistorDataframe+0x82>
	}
	checksum+=0x39;
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	3339      	adds	r3, #57	@ 0x39
 8001a60:	75fb      	strb	r3, [r7, #23]
	checksum+=8;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	3308      	adds	r3, #8
 8001a66:	75fb      	strb	r3, [r7, #23]

	dataframe->data.checksum = checksum;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	7dfa      	ldrb	r2, [r7, #23]
 8001a6c:	71da      	strb	r2, [r3, #7]
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000278 	.word	0x20000278
 8001a7c:	20000274 	.word	0x20000274
 8001a80:	2000027c 	.word	0x2000027c

08001a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a88:	f7ff fcfa 	bl	8001480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f003 fc53 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab6:	f7ff fa21 	bl	8000efc <main>

08001aba <LoopForever>:

LoopForever:
    b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001abc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ac8:	0800550c 	.word	0x0800550c
  ldr r2, =_sbss
 8001acc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ad0:	20000284 	.word	0x20000284

08001ad4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_IRQHandler>

08001ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f001 fb05 	bl	80030f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f000 f80e 	bl	8001b08 <HAL_InitTick>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	e001      	b.n	8001afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af8:	f7ff fc64 	bl	80013c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001afc:	79fb      	ldrb	r3, [r7, #7]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b14:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <HAL_InitTick+0x6c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d023      	beq.n	8001b64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_InitTick+0x70>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <HAL_InitTick+0x6c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fb11 	bl	800315a <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10f      	bne.n	8001b5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d809      	bhi.n	8001b58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b4c:	f001 fadb 	bl	8003106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_InitTick+0x74>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e007      	b.n	8001b68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e004      	b.n	8001b68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e001      	b.n	8001b68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	20000008 	.word	0x20000008

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2000000c 	.word	0x2000000c
 8001ba4:	20000280 	.word	0x20000280

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000280 	.word	0x20000280

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ffee 	bl	8001ba8 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000000c 	.word	0x2000000c

08001c08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3360      	adds	r3, #96	@ 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <LL_ADC_SetOffset+0x44>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ca8:	bf00      	nop
 8001caa:	371c      	adds	r7, #28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	03fff000 	.word	0x03fff000

08001cb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3360      	adds	r3, #96	@ 0x60
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3360      	adds	r3, #96	@ 0x60
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3330      	adds	r3, #48	@ 0x30
 8001d50:	461a      	mov	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	211f      	movs	r1, #31
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	401a      	ands	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	f003 011f 	and.w	r1, r3, #31
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	431a      	orrs	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3314      	adds	r3, #20
 8001da8:	461a      	mov	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	0e5b      	lsrs	r3, r3, #25
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0d1b      	lsrs	r3, r3, #20
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	2107      	movs	r1, #7
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	401a      	ands	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	0d1b      	lsrs	r3, r3, #20
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0318 	and.w	r3, r3, #24
 8001e12:	4908      	ldr	r1, [pc, #32]	@ (8001e34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e14:	40d9      	lsrs	r1, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	400b      	ands	r3, r1
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	0007ffff 	.word	0x0007ffff

08001e38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6093      	str	r3, [r2, #8]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e70:	d101      	bne.n	8001e76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ec0:	d101      	bne.n	8001ec6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_IsEnabled+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_IsEnabled+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f36:	f043 0204 	orr.w	r2, r3, #4
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d101      	bne.n	8001f62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d101      	bne.n	8001f88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e126      	b.n	8002200 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7fe fdfb 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff3f 	bl	8001e5c <LL_ADC_IsDeepPowerDownEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff25 	bl	8001e38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff5a 	bl	8001eac <LL_ADC_IsInternalRegulatorEnabled>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d115      	bne.n	800202a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff3e 	bl	8001e84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002008:	4b7f      	ldr	r3, [pc, #508]	@ (8002208 <HAL_ADC_Init+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	4a7f      	ldr	r2, [pc, #508]	@ (800220c <HAL_ADC_Init+0x274>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	3301      	adds	r3, #1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800201c:	e002      	b.n	8002024 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3b01      	subs	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff3c 	bl	8001eac <LL_ADC_IsInternalRegulatorEnabled>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203e:	f043 0210 	orr.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff75 	bl	8001f4a <LL_ADC_REG_IsConversionOngoing>
 8002060:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80bf 	bne.w	80021ee <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 80bb 	bne.w	80021ee <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002080:	f043 0202 	orr.w	r2, r3, #2
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff35 	bl	8001efc <LL_ADC_IsEnabled>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002098:	485d      	ldr	r0, [pc, #372]	@ (8002210 <HAL_ADC_Init+0x278>)
 800209a:	f7ff ff2f 	bl	8001efc <LL_ADC_IsEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4619      	mov	r1, r3
 80020aa:	485a      	ldr	r0, [pc, #360]	@ (8002214 <HAL_ADC_Init+0x27c>)
 80020ac:	f7ff fdac 	bl	8001c08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7e5b      	ldrb	r3, [r3, #25]
 80020b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d106      	bne.n	80020ec <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	3b01      	subs	r3, #1
 80020e4:	045b      	lsls	r3, r3, #17
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <HAL_ADC_Init+0x280>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	430b      	orrs	r3, r1
 800211a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff25 	bl	8001f70 <LL_ADC_INJ_IsConversionOngoing>
 8002126:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d13d      	bne.n	80021aa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13a      	bne.n	80021aa <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002138:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002140:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002150:	f023 0302 	bic.w	r3, r3, #2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	69b9      	ldr	r1, [r7, #24]
 800215a:	430b      	orrs	r3, r1
 800215c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002164:	2b01      	cmp	r3, #1
 8002166:	d118      	bne.n	800219a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800218a:	430a      	orrs	r2, r1
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	611a      	str	r2, [r3, #16]
 8002198:	e007      	b.n	80021aa <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10c      	bne.n	80021cc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	f023 010f 	bic.w	r1, r3, #15
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ca:	e007      	b.n	80021dc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 020f 	bic.w	r2, r2, #15
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f023 0303 	bic.w	r3, r3, #3
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80021ec:	e007      	b.n	80021fe <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	f043 0210 	orr.w	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000004 	.word	0x20000004
 800220c:	053e2d63 	.word	0x053e2d63
 8002210:	50040000 	.word	0x50040000
 8002214:	50040300 	.word	0x50040300
 8002218:	fff0c007 	.word	0xfff0c007

0800221c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fe8c 	bl	8001f4a <LL_ADC_REG_IsConversionOngoing>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d167      	bne.n	8002308 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Start_DMA+0x2a>
 8002242:	2302      	movs	r3, #2
 8002244:	e063      	b.n	800230e <HAL_ADC_Start_DMA+0xf2>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fc68 	bl	8002b24 <ADC_Enable>
 8002254:	4603      	mov	r3, r0
 8002256:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d14f      	bne.n	80022fe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002262:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	f023 0206 	bic.w	r2, r3, #6
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58
 800228a:	e002      	b.n	8002292 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4a20      	ldr	r2, [pc, #128]	@ (8002318 <HAL_ADC_Start_DMA+0xfc>)
 8002298:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_ADC_Start_DMA+0x100>)
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <HAL_ADC_Start_DMA+0x104>)
 80022a8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	221c      	movs	r2, #28
 80022b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0210 	orr.w	r2, r2, #16
 80022c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3340      	adds	r3, #64	@ 0x40
 80022e4:	4619      	mov	r1, r3
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f000 fffb 	bl	80032e4 <HAL_DMA_Start_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fe13 	bl	8001f22 <LL_ADC_REG_StartConversion>
 80022fc:	e006      	b.n	800230c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002306:	e001      	b.n	800230c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002308:	2302      	movs	r3, #2
 800230a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800230c:	7dfb      	ldrb	r3, [r7, #23]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	08002c31 	.word	0x08002c31
 800231c:	08002d09 	.word	0x08002d09
 8002320:	08002d25 	.word	0x08002d25

08002324 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0b6      	sub	sp, #216	@ 0xd8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x22>
 800237e:	2302      	movs	r3, #2
 8002380:	e3bb      	b.n	8002afa <HAL_ADC_ConfigChannel+0x79a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fddb 	bl	8001f4a <LL_ADC_REG_IsConversionOngoing>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 83a0 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d824      	bhi.n	80023f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	3b02      	subs	r3, #2
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d81b      	bhi.n	80023ee <HAL_ADC_ConfigChannel+0x8e>
 80023b6:	a201      	add	r2, pc, #4	@ (adr r2, 80023bc <HAL_ADC_ConfigChannel+0x5c>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023cd 	.word	0x080023cd
 80023c0:	080023d5 	.word	0x080023d5
 80023c4:	080023dd 	.word	0x080023dd
 80023c8:	080023e5 	.word	0x080023e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023cc:	230c      	movs	r3, #12
 80023ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023d2:	e010      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023d4:	2312      	movs	r3, #18
 80023d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023da:	e00c      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023dc:	2318      	movs	r3, #24
 80023de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023e2:	e008      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023ee:	2306      	movs	r3, #6
 80023f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002404:	f7ff fc9c 	bl	8001d40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fd9c 	bl	8001f4a <LL_ADC_REG_IsConversionOngoing>
 8002412:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fda8 	bl	8001f70 <LL_ADC_INJ_IsConversionOngoing>
 8002420:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 81a4 	bne.w	8002776 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800242e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 819f 	bne.w	8002776 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	461a      	mov	r2, r3
 8002446:	f7ff fca7 	bl	8001d98 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	08db      	lsrs	r3, r3, #3
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00a      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6919      	ldr	r1, [r3, #16]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800247c:	f7ff fbf8 	bl	8001c70 <LL_ADC_SetOffset>
 8002480:	e179      	b.n	8002776 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fc15 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x14e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fc0a 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	e01e      	b.n	80024ec <HAL_ADC_ConfigChannel+0x18c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fbff 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e004      	b.n	80024ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80024e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1a4>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	e018      	b.n	8002536 <HAL_ADC_ConfigChannel+0x1d6>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800251c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e004      	b.n	8002536 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800252c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002536:	429a      	cmp	r2, r3
 8002538:	d106      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fbce 	bl	8001ce4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fbb2 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x214>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fba7 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 021f 	and.w	r2, r3, #31
 8002572:	e01e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x252>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fb9c 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002592:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800259a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e004      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80025a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x26a>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	e018      	b.n	80025fc <HAL_ADC_ConfigChannel+0x29c>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e004      	b.n	80025fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80025f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	2101      	movs	r1, #1
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fb6b 	bl	8001ce4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fb4f 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <HAL_ADC_ConfigChannel+0x2da>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fb44 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	e01e      	b.n	8002678 <HAL_ADC_ConfigChannel+0x318>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2102      	movs	r1, #2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fb39 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800265c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e004      	b.n	8002676 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800266c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x330>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	e014      	b.n	80026ba <HAL_ADC_ConfigChannel+0x35a>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800269e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e004      	b.n	80026ba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80026b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d106      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	2102      	movs	r1, #2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fb0c 	bl	8001ce4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2103      	movs	r1, #3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff faf0 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x398>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2103      	movs	r1, #3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fae5 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	f003 021f 	and.w	r2, r3, #31
 80026f6:	e017      	b.n	8002728 <HAL_ADC_ConfigChannel+0x3c8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2103      	movs	r1, #3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fada 	bl	8001cb8 <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002712:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e003      	b.n	8002726 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800271e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x3e0>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	e011      	b.n	8002764 <HAL_ADC_ConfigChannel+0x404>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800274e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002750:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002752:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800275c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002764:	429a      	cmp	r2, r3
 8002766:	d106      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2200      	movs	r2, #0
 800276e:	2103      	movs	r1, #3
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fab7 	bl	8001ce4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fbbe 	bl	8001efc <LL_ADC_IsEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 8140 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6819      	ldr	r1, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	461a      	mov	r2, r3
 8002796:	f7ff fb2b 	bl	8001df0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4a8f      	ldr	r2, [pc, #572]	@ (80029dc <HAL_ADC_ConfigChannel+0x67c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	f040 8131 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x46e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	3301      	adds	r3, #1
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2b09      	cmp	r3, #9
 80027c4:	bf94      	ite	ls
 80027c6:	2301      	movls	r3, #1
 80027c8:	2300      	movhi	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e019      	b.n	8002802 <HAL_ADC_ConfigChannel+0x4a2>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80027ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002802:	2b00      	cmp	r3, #0
 8002804:	d079      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x4c2>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0e9b      	lsrs	r3, r3, #26
 8002818:	3301      	adds	r3, #1
 800281a:	069b      	lsls	r3, r3, #26
 800281c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002820:	e015      	b.n	800284e <HAL_ADC_ConfigChannel+0x4ee>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002832:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e003      	b.n	8002846 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800283e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	069b      	lsls	r3, r3, #26
 800284a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_ADC_ConfigChannel+0x50e>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	3301      	adds	r3, #1
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	e017      	b.n	800289e <HAL_ADC_ConfigChannel+0x53e>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800287c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002886:	2320      	movs	r3, #32
 8002888:	e003      	b.n	8002892 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800288a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	ea42 0103 	orr.w	r1, r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x564>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0e9b      	lsrs	r3, r3, #26
 80028b4:	3301      	adds	r3, #1
 80028b6:	f003 021f 	and.w	r2, r3, #31
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	e018      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x596>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e003      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80028e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f003 021f 	and.w	r2, r3, #31
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f6:	430b      	orrs	r3, r1
 80028f8:	e081      	b.n	80029fe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x5b6>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	3301      	adds	r3, #1
 800290e:	069b      	lsls	r3, r3, #26
 8002910:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002914:	e015      	b.n	8002942 <HAL_ADC_ConfigChannel+0x5e2>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e003      	b.n	800293a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	069b      	lsls	r3, r3, #26
 800293e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x602>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	3301      	adds	r3, #1
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	e017      	b.n	8002992 <HAL_ADC_ConfigChannel+0x632>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	61bb      	str	r3, [r7, #24]
  return result;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800297a:	2320      	movs	r3, #32
 800297c:	e003      	b.n	8002986 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2101      	movs	r1, #1
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	ea42 0103 	orr.w	r1, r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_ADC_ConfigChannel+0x65e>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 021f 	and.w	r2, r3, #31
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	3b1e      	subs	r3, #30
 80029b6:	051b      	lsls	r3, r3, #20
 80029b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029bc:	e01e      	b.n	80029fc <HAL_ADC_ConfigChannel+0x69c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  return result;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e006      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x688>
 80029da:	bf00      	nop
 80029dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f003 021f 	and.w	r2, r3, #31
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	3b1e      	subs	r3, #30
 80029f6:	051b      	lsls	r3, r3, #20
 80029f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7ff f9c8 	bl	8001d98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d06c      	beq.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a14:	483c      	ldr	r0, [pc, #240]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a16:	f7ff f91d 	bl	8001c54 <LL_ADC_GetCommonPathInternalCh>
 8002a1a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a3a      	ldr	r2, [pc, #232]	@ (8002b0c <HAL_ADC_ConfigChannel+0x7ac>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d127      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d121      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a35      	ldr	r2, [pc, #212]	@ (8002b10 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d157      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a46:	4619      	mov	r1, r3
 8002a48:	482f      	ldr	r0, [pc, #188]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a4a:	f7ff f8f0 	bl	8001c2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a4e:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <HAL_ADC_ConfigChannel+0x7b4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	4a30      	ldr	r2, [pc, #192]	@ (8002b18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	099b      	lsrs	r3, r3, #6
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a76:	e03a      	b.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a27      	ldr	r2, [pc, #156]	@ (8002b1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d113      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d12a      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4819      	ldr	r0, [pc, #100]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002aa4:	f7ff f8c3 	bl	8001c2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa8:	e021      	b.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d11c      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d116      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d111      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ace:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ad6:	f7ff f8aa 	bl	8001c2e <LL_ADC_SetCommonPathInternalCh>
 8002ada:	e008      	b.n	8002aee <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002af6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	37d8      	adds	r7, #216	@ 0xd8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	80080000 	.word	0x80080000
 8002b08:	50040300 	.word	0x50040300
 8002b0c:	c7520000 	.word	0xc7520000
 8002b10:	50040000 	.word	0x50040000
 8002b14:	20000004 	.word	0x20000004
 8002b18:	053e2d63 	.word	0x053e2d63
 8002b1c:	cb840000 	.word	0xcb840000
 8002b20:	80000001 	.word	0x80000001

08002b24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff f9e1 	bl	8001efc <LL_ADC_IsEnabled>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d169      	bne.n	8002c14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <ADC_Enable+0xfc>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e055      	b.n	8002c16 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f9b0 	bl	8001ed4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b74:	482b      	ldr	r0, [pc, #172]	@ (8002c24 <ADC_Enable+0x100>)
 8002b76:	f7ff f86d 	bl	8001c54 <LL_ADC_GetCommonPathInternalCh>
 8002b7a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b84:	4b28      	ldr	r3, [pc, #160]	@ (8002c28 <ADC_Enable+0x104>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	4a28      	ldr	r2, [pc, #160]	@ (8002c2c <ADC_Enable+0x108>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b9e:	e002      	b.n	8002ba6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bac:	f7fe fffc 	bl	8001ba8 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bb2:	e028      	b.n	8002c06 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f99f 	bl	8001efc <LL_ADC_IsEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d104      	bne.n	8002bce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f983 	bl	8001ed4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bce:	f7fe ffeb 	bl	8001ba8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d914      	bls.n	8002c06 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d00d      	beq.n	8002c06 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e007      	b.n	8002c16 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d1cf      	bne.n	8002bb4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	8000003f 	.word	0x8000003f
 8002c24:	50040300 	.word	0x50040300
 8002c28:	20000004 	.word	0x20000004
 8002c2c:	053e2d63 	.word	0x053e2d63

08002c30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d14b      	bne.n	8002ce2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d021      	beq.n	8002ca8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f856 	bl	8001d1a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d032      	beq.n	8002cda <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d12b      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11f      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ca6:	e018      	b.n	8002cda <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d111      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fb22 	bl	8002324 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ce0:	e00e      	b.n	8002d00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff fb2c 	bl	800234c <HAL_ADC_ErrorCallback>
}
 8002cf4:	e004      	b.n	8002d00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff fb0e 	bl	8002338 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	f043 0204 	orr.w	r2, r3, #4
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fafe 	bl	800234c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0ed      	b.n	8002f46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd ffea 	bl	8000d50 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d8c:	f7fe ff0c 	bl	8001ba8 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d92:	e012      	b.n	8002dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d94:	f7fe ff08 	bl	8001ba8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b0a      	cmp	r3, #10
 8002da0:	d90b      	bls.n	8002dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2205      	movs	r2, #5
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0c5      	b.n	8002f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0e5      	beq.n	8002d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0202 	bic.w	r2, r2, #2
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd8:	f7fe fee6 	bl	8001ba8 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dde:	e012      	b.n	8002e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002de0:	f7fe fee2 	bl	8001ba8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b0a      	cmp	r3, #10
 8002dec:	d90b      	bls.n	8002e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e09f      	b.n	8002f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e5      	bne.n	8002de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7e1b      	ldrb	r3, [r3, #24]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d108      	bne.n	8002e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e007      	b.n	8002e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7e5b      	ldrb	r3, [r3, #25]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d108      	bne.n	8002e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e007      	b.n	8002e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7e9b      	ldrb	r3, [r3, #26]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e007      	b.n	8002e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0220 	bic.w	r2, r2, #32
 8002e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7edb      	ldrb	r3, [r3, #27]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0210 	bic.w	r2, r2, #16
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e007      	b.n	8002ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0210 	orr.w	r2, r2, #16
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7f1b      	ldrb	r3, [r3, #28]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d108      	bne.n	8002ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0208 	orr.w	r2, r2, #8
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e007      	b.n	8002ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0208 	bic.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7f5b      	ldrb	r3, [r3, #29]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0204 	orr.w	r2, r2, #4
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e007      	b.n	8002f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	ea42 0103 	orr.w	r1, r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	f003 0307 	and.w	r3, r3, #7
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	db0b      	blt.n	8002fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4907      	ldr	r1, [pc, #28]	@ (8002fec <__NVIC_EnableIRQ+0x38>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000e100 	.word	0xe000e100

08002ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	db0a      	blt.n	800301a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	490c      	ldr	r1, [pc, #48]	@ (800303c <__NVIC_SetPriority+0x4c>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	440b      	add	r3, r1
 8003014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003018:	e00a      	b.n	8003030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4908      	ldr	r1, [pc, #32]	@ (8003040 <__NVIC_SetPriority+0x50>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3b04      	subs	r3, #4
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	440b      	add	r3, r1
 800302e:	761a      	strb	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000e100 	.word	0xe000e100
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f1c3 0307 	rsb	r3, r3, #7
 800305e:	2b04      	cmp	r3, #4
 8003060:	bf28      	it	cs
 8003062:	2304      	movcs	r3, #4
 8003064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3304      	adds	r3, #4
 800306a:	2b06      	cmp	r3, #6
 800306c:	d902      	bls.n	8003074 <NVIC_EncodePriority+0x30>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3b03      	subs	r3, #3
 8003072:	e000      	b.n	8003076 <NVIC_EncodePriority+0x32>
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	401a      	ands	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800308c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43d9      	mvns	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	4313      	orrs	r3, r2
         );
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030bc:	d301      	bcc.n	80030c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030be:	2301      	movs	r3, #1
 80030c0:	e00f      	b.n	80030e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c2:	4a0a      	ldr	r2, [pc, #40]	@ (80030ec <SysTick_Config+0x40>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ca:	210f      	movs	r1, #15
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030d0:	f7ff ff8e 	bl	8002ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <SysTick_Config+0x40>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <SysTick_Config+0x40>)
 80030dc:	2207      	movs	r2, #7
 80030de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	e000e010 	.word	0xe000e010

080030f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff29 	bl	8002f50 <__NVIC_SetPriorityGrouping>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003118:	f7ff ff3e 	bl	8002f98 <__NVIC_GetPriorityGrouping>
 800311c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7ff ff8e 	bl	8003044 <NVIC_EncodePriority>
 8003128:	4602      	mov	r2, r0
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff5d 	bl	8002ff0 <__NVIC_SetPriority>
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff31 	bl	8002fb4 <__NVIC_EnableIRQ>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ffa2 	bl	80030ac <SysTick_Config>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e098      	b.n	80032b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	4b4d      	ldr	r3, [pc, #308]	@ (80032c4 <HAL_DMA_Init+0x150>)
 800318e:	429a      	cmp	r2, r3
 8003190:	d80f      	bhi.n	80031b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4b4b      	ldr	r3, [pc, #300]	@ (80032c8 <HAL_DMA_Init+0x154>)
 800319a:	4413      	add	r3, r2
 800319c:	4a4b      	ldr	r2, [pc, #300]	@ (80032cc <HAL_DMA_Init+0x158>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	009a      	lsls	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a48      	ldr	r2, [pc, #288]	@ (80032d0 <HAL_DMA_Init+0x15c>)
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80031b0:	e00e      	b.n	80031d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b46      	ldr	r3, [pc, #280]	@ (80032d4 <HAL_DMA_Init+0x160>)
 80031ba:	4413      	add	r3, r2
 80031bc:	4a43      	ldr	r2, [pc, #268]	@ (80032cc <HAL_DMA_Init+0x158>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	009a      	lsls	r2, r3, #2
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a42      	ldr	r2, [pc, #264]	@ (80032d8 <HAL_DMA_Init+0x164>)
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800322a:	d039      	beq.n	80032a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	4a27      	ldr	r2, [pc, #156]	@ (80032d0 <HAL_DMA_Init+0x15c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d11a      	bne.n	800326c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003236:	4b29      	ldr	r3, [pc, #164]	@ (80032dc <HAL_DMA_Init+0x168>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f003 031c 	and.w	r3, r3, #28
 8003242:	210f      	movs	r1, #15
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	4924      	ldr	r1, [pc, #144]	@ (80032dc <HAL_DMA_Init+0x168>)
 800324c:	4013      	ands	r3, r2
 800324e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <HAL_DMA_Init+0x168>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f003 031c 	and.w	r3, r3, #28
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	491d      	ldr	r1, [pc, #116]	@ (80032dc <HAL_DMA_Init+0x168>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
 800326a:	e019      	b.n	80032a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800326c:	4b1c      	ldr	r3, [pc, #112]	@ (80032e0 <HAL_DMA_Init+0x16c>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	f003 031c 	and.w	r3, r3, #28
 8003278:	210f      	movs	r1, #15
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	4917      	ldr	r1, [pc, #92]	@ (80032e0 <HAL_DMA_Init+0x16c>)
 8003282:	4013      	ands	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003286:	4b16      	ldr	r3, [pc, #88]	@ (80032e0 <HAL_DMA_Init+0x16c>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f003 031c 	and.w	r3, r3, #28
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	4911      	ldr	r1, [pc, #68]	@ (80032e0 <HAL_DMA_Init+0x16c>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40020407 	.word	0x40020407
 80032c8:	bffdfff8 	.word	0xbffdfff8
 80032cc:	cccccccd 	.word	0xcccccccd
 80032d0:	40020000 	.word	0x40020000
 80032d4:	bffdfbf8 	.word	0xbffdfbf8
 80032d8:	40020400 	.word	0x40020400
 80032dc:	400200a8 	.word	0x400200a8
 80032e0:	400204a8 	.word	0x400204a8

080032e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Start_IT+0x20>
 8003300:	2302      	movs	r3, #2
 8003302:	e04b      	b.n	800339c <HAL_DMA_Start_IT+0xb8>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d13a      	bne.n	800338e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f8e0 	bl	8003502 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 020e 	orr.w	r2, r2, #14
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e00f      	b.n	800337c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0204 	bic.w	r2, r2, #4
 800336a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 020a 	orr.w	r2, r2, #10
 800337a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e005      	b.n	800339a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800339a:	7dfb      	ldrb	r3, [r7, #23]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	f003 031c 	and.w	r3, r3, #28
 80033c4:	2204      	movs	r2, #4
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d026      	beq.n	800341e <HAL_DMA_IRQHandler+0x7a>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d021      	beq.n	800341e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	f003 021c 	and.w	r2, r3, #28
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	2104      	movs	r1, #4
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003410:	2b00      	cmp	r3, #0
 8003412:	d071      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800341c:	e06c      	b.n	80034f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f003 031c 	and.w	r3, r3, #28
 8003426:	2202      	movs	r2, #2
 8003428:	409a      	lsls	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d02e      	beq.n	8003490 <HAL_DMA_IRQHandler+0xec>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d029      	beq.n	8003490 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 020a 	bic.w	r2, r2, #10
 8003458:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f003 021c 	and.w	r2, r3, #28
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	2102      	movs	r1, #2
 8003470:	fa01 f202 	lsl.w	r2, r1, r2
 8003474:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d038      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800348e:	e033      	b.n	80034f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003494:	f003 031c 	and.w	r3, r3, #28
 8003498:	2208      	movs	r2, #8
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02a      	beq.n	80034fa <HAL_DMA_IRQHandler+0x156>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d025      	beq.n	80034fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 020e 	bic.w	r2, r2, #14
 80034bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f003 021c 	and.w	r2, r3, #28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
}
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003514:	f003 021c 	and.w	r2, r3, #28
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b10      	cmp	r3, #16
 8003532:	d108      	bne.n	8003546 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003544:	e007      	b.n	8003556 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003572:	e148      	b.n	8003806 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	4013      	ands	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 813a 	beq.w	8003800 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d005      	beq.n	80035a4 <HAL_GPIO_Init+0x40>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d130      	bne.n	8003606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035da:	2201      	movs	r2, #1
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	f003 0201 	and.w	r2, r3, #1
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b03      	cmp	r3, #3
 8003610:	d017      	beq.n	8003642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d123      	bne.n	8003696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8094 	beq.w	8003800 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d8:	4b52      	ldr	r3, [pc, #328]	@ (8003824 <HAL_GPIO_Init+0x2c0>)
 80036da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036dc:	4a51      	ldr	r2, [pc, #324]	@ (8003824 <HAL_GPIO_Init+0x2c0>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80036e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003824 <HAL_GPIO_Init+0x2c0>)
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003828 <HAL_GPIO_Init+0x2c4>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3302      	adds	r3, #2
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	220f      	movs	r2, #15
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800371a:	d00d      	beq.n	8003738 <HAL_GPIO_Init+0x1d4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a43      	ldr	r2, [pc, #268]	@ (800382c <HAL_GPIO_Init+0x2c8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <HAL_GPIO_Init+0x1d0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a42      	ldr	r2, [pc, #264]	@ (8003830 <HAL_GPIO_Init+0x2cc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_GPIO_Init+0x1cc>
 800372c:	2302      	movs	r3, #2
 800372e:	e004      	b.n	800373a <HAL_GPIO_Init+0x1d6>
 8003730:	2307      	movs	r3, #7
 8003732:	e002      	b.n	800373a <HAL_GPIO_Init+0x1d6>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_GPIO_Init+0x1d6>
 8003738:	2300      	movs	r3, #0
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	f002 0203 	and.w	r2, r2, #3
 8003740:	0092      	lsls	r2, r2, #2
 8003742:	4093      	lsls	r3, r2
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800374a:	4937      	ldr	r1, [pc, #220]	@ (8003828 <HAL_GPIO_Init+0x2c4>)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003758:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800377c:	4a2d      	ldr	r2, [pc, #180]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003782:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037a6:	4a23      	ldr	r2, [pc, #140]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037ac:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037d0:	4a18      	ldr	r2, [pc, #96]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3301      	adds	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f aeaf 	bne.w	8003574 <HAL_GPIO_Init+0x10>
  }
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40021000 	.word	0x40021000
 8003828:	40010000 	.word	0x40010000
 800382c:	48000400 	.word	0x48000400
 8003830:	48000800 	.word	0x48000800
 8003834:	40010400 	.word	0x40010400

08003838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
 8003844:	4613      	mov	r3, r2
 8003846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003848:	787b      	ldrb	r3, [r7, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003854:	e002      	b.n	800385c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <HAL_PWREx_GetVoltageRange+0x18>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40007000 	.word	0x40007000

08003884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003892:	d130      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800389c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a0:	d038      	beq.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2232      	movs	r2, #50	@ 0x32
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	4a1b      	ldr	r2, [pc, #108]	@ (800392c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c8:	e002      	b.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d0:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038dc:	d102      	bne.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f2      	bne.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f0:	d110      	bne.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e00f      	b.n	8003916 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d007      	beq.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003904:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800390c:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003912:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40007000 	.word	0x40007000
 8003928:	20000004 	.word	0x20000004
 800392c:	431bde83 	.word	0x431bde83

08003930 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f000 bc02 	b.w	8004148 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003944:	4b96      	ldr	r3, [pc, #600]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394e:	4b94      	ldr	r3, [pc, #592]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80e4 	beq.w	8003b2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <HAL_RCC_OscConfig+0x4c>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	f040 808b 	bne.w	8003a8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b01      	cmp	r3, #1
 8003978:	f040 8087 	bne.w	8003a8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800397c:	4b88      	ldr	r3, [pc, #544]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_OscConfig+0x64>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e3d9      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	4b81      	ldr	r3, [pc, #516]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <HAL_RCC_OscConfig+0x7e>
 80039a4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ac:	e005      	b.n	80039ba <HAL_RCC_OscConfig+0x8a>
 80039ae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d223      	bcs.n	8003a06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fd54 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e3ba      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d2:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a72      	ldr	r2, [pc, #456]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b70      	ldr	r3, [pc, #448]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	496d      	ldr	r1, [pc, #436]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f0:	4b6b      	ldr	r3, [pc, #428]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	4968      	ldr	r1, [pc, #416]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
 8003a04:	e025      	b.n	8003a52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a06:	4b66      	ldr	r3, [pc, #408]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4960      	ldr	r1, [pc, #384]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a24:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	495b      	ldr	r1, [pc, #364]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fd14 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e37a      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a52:	f000 fc81 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8003a56:	4602      	mov	r2, r0
 8003a58:	4b51      	ldr	r3, [pc, #324]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	4950      	ldr	r1, [pc, #320]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a64:	5ccb      	ldrb	r3, [r1, r3]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba8 <HAL_RCC_OscConfig+0x278>)
 8003a70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a72:	4b4e      	ldr	r3, [pc, #312]	@ (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe f846 	bl	8001b08 <HAL_InitTick>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d052      	beq.n	8003b2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	e35e      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d032      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a92:	4b43      	ldr	r3, [pc, #268]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a42      	ldr	r2, [pc, #264]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe f883 	bl	8001ba8 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aa6:	f7fe f87f 	bl	8001ba8 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e347      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab8:	4b39      	ldr	r3, [pc, #228]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac4:	4b36      	ldr	r3, [pc, #216]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a35      	ldr	r2, [pc, #212]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003aca:	f043 0308 	orr.w	r3, r3, #8
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b33      	ldr	r3, [pc, #204]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4930      	ldr	r1, [pc, #192]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	492b      	ldr	r1, [pc, #172]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
 8003af6:	e01a      	b.n	8003b2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003af8:	4b29      	ldr	r3, [pc, #164]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a28      	ldr	r2, [pc, #160]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b04:	f7fe f850 	bl	8001ba8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b0c:	f7fe f84c 	bl	8001ba8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e314      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1dc>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d073      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x21c>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d10e      	bne.n	8003b64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d063      	beq.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d15f      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e2f1      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x24c>
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e025      	b.n	8003bc8 <HAL_RCC_OscConfig+0x298>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b84:	d114      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x280>
 8003b86:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a02      	ldr	r2, [pc, #8]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e013      	b.n	8003bc8 <HAL_RCC_OscConfig+0x298>
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	080053bc 	.word	0x080053bc
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a9f      	ldr	r2, [pc, #636]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd ffea 	bl	8001ba8 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fd ffe6 	bl	8001ba8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e2ae      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bea:	4b92      	ldr	r3, [pc, #584]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2a8>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd ffd6 	bl	8001ba8 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fd ffd2 	bl	8001ba8 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e29a      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c12:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2d0>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d060      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_OscConfig+0x310>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d119      	bne.n	8003c6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d116      	bne.n	8003c6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c40:	4b7c      	ldr	r3, [pc, #496]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x328>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e277      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b76      	ldr	r3, [pc, #472]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	4973      	ldr	r1, [pc, #460]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6c:	e040      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d023      	beq.n	8003cbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c76:	4b6f      	ldr	r3, [pc, #444]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fd ff91 	bl	8001ba8 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fd ff8d 	bl	8001ba8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e255      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9c:	4b65      	ldr	r3, [pc, #404]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca8:	4b62      	ldr	r3, [pc, #392]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	495f      	ldr	r1, [pc, #380]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
 8003cbc:	e018      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fd ff6d 	bl	8001ba8 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fd ff69 	bl	8001ba8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e231      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01c      	beq.n	8003d3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d04:	4b4b      	ldr	r3, [pc, #300]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fd ff48 	bl	8001ba8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fd ff44 	bl	8001ba8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e20c      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ef      	beq.n	8003d1c <HAL_RCC_OscConfig+0x3ec>
 8003d3c:	e01b      	b.n	8003d76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	4a3b      	ldr	r2, [pc, #236]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fd ff2b 	bl	8001ba8 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fd ff27 	bl	8001ba8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1ef      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d68:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ef      	bne.n	8003d56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a6 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d88:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da0:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d118      	bne.n	8003dee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc8:	f7fd feee 	bl	8001ba8 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fd feea 	bl	8001ba8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1b2      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	4b15      	ldr	r3, [pc, #84]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4d8>
 8003df6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e06:	e029      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d115      	bne.n	8003e3c <HAL_RCC_OscConfig+0x50c>
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	4a07      	ldr	r2, [pc, #28]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e26:	4a03      	ldr	r2, [pc, #12]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	4b9a      	ldr	r3, [pc, #616]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	4a99      	ldr	r2, [pc, #612]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e4c:	4b96      	ldr	r3, [pc, #600]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	4a95      	ldr	r2, [pc, #596]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d016      	beq.n	8003e92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fd fea0 	bl	8001ba8 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fe9c 	bl	8001ba8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e162      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e82:	4b89      	ldr	r3, [pc, #548]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ed      	beq.n	8003e6c <HAL_RCC_OscConfig+0x53c>
 8003e90:	e015      	b.n	8003ebe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fd fe89 	bl	8001ba8 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd fe85 	bl	8001ba8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e14b      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ed      	bne.n	8003e9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b78      	ldr	r3, [pc, #480]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	4a77      	ldr	r2, [pc, #476]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d03c      	beq.n	8003f56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee4:	4b70      	ldr	r3, [pc, #448]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eea:	4a6f      	ldr	r2, [pc, #444]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd fe58 	bl	8001ba8 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003efc:	f7fd fe54 	bl	8001ba8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e11c      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f0e:	4b66      	ldr	r3, [pc, #408]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ef      	beq.n	8003efc <HAL_RCC_OscConfig+0x5cc>
 8003f1c:	e01b      	b.n	8003f56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f1e:	4b62      	ldr	r3, [pc, #392]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f24:	4a60      	ldr	r2, [pc, #384]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fe3b 	bl	8001ba8 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f36:	f7fd fe37 	bl	8001ba8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0ff      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f48:	4b57      	ldr	r3, [pc, #348]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ef      	bne.n	8003f36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80f3 	beq.w	8004146 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f040 80c9 	bne.w	80040fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f6a:	4b4f      	ldr	r3, [pc, #316]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0203 	and.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d12c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d123      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d113      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d109      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d06b      	beq.n	80040b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d062      	beq.n	80040a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fde:	4b32      	ldr	r3, [pc, #200]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0ac      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fee:	4b2e      	ldr	r3, [pc, #184]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8003ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ff8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ffa:	f7fd fdd5 	bl	8001ba8 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004002:	f7fd fdd1 	bl	8001ba8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e099      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004014:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004020:	4b21      	ldr	r3, [pc, #132]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	4b21      	ldr	r3, [pc, #132]	@ (80040ac <HAL_RCC_OscConfig+0x77c>)
 8004026:	4013      	ands	r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004030:	3a01      	subs	r2, #1
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800403a:	0212      	lsls	r2, r2, #8
 800403c:	4311      	orrs	r1, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004042:	0852      	lsrs	r2, r2, #1
 8004044:	3a01      	subs	r2, #1
 8004046:	0552      	lsls	r2, r2, #21
 8004048:	4311      	orrs	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800404e:	0852      	lsrs	r2, r2, #1
 8004050:	3a01      	subs	r2, #1
 8004052:	0652      	lsls	r2, r2, #25
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800405a:	06d2      	lsls	r2, r2, #27
 800405c:	430a      	orrs	r2, r1
 800405e:	4912      	ldr	r1, [pc, #72]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8004060:	4313      	orrs	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004064:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0f      	ldr	r2, [pc, #60]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004070:	4b0d      	ldr	r3, [pc, #52]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a0c      	ldr	r2, [pc, #48]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407c:	f7fd fd94 	bl	8001ba8 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fd90 	bl	8001ba8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e058      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <HAL_RCC_OscConfig+0x778>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a2:	e050      	b.n	8004146 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e04f      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b0:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d144      	bne.n	8004146 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040bc:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a23      	ldr	r2, [pc, #140]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c8:	4b21      	ldr	r3, [pc, #132]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a20      	ldr	r2, [pc, #128]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040d4:	f7fd fd68 	bl	8001ba8 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd fd64 	bl	8001ba8 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e02c      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ee:	4b18      	ldr	r3, [pc, #96]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x7ac>
 80040fa:	e024      	b.n	8004146 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	d01f      	beq.n	8004142 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004102:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a12      	ldr	r2, [pc, #72]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 8004108:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800410c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fd fd4b 	bl	8001ba8 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fd fd47 	bl	8001ba8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e00f      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4905      	ldr	r1, [pc, #20]	@ (8004150 <HAL_RCC_OscConfig+0x820>)
 800413a:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <HAL_RCC_OscConfig+0x824>)
 800413c:	4013      	ands	r3, r2
 800413e:	60cb      	str	r3, [r1, #12]
 8004140:	e001      	b.n	8004146 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	feeefffc 	.word	0xfeeefffc

08004158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0e7      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b75      	ldr	r3, [pc, #468]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b72      	ldr	r3, [pc, #456]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	4970      	ldr	r1, [pc, #448]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b6e      	ldr	r3, [pc, #440]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cf      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b66      	ldr	r3, [pc, #408]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d908      	bls.n	80041ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b63      	ldr	r3, [pc, #396]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4960      	ldr	r1, [pc, #384]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d04c      	beq.n	8004270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	4b5a      	ldr	r3, [pc, #360]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d121      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0a6      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4b54      	ldr	r3, [pc, #336]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d115      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e09a      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420e:	4b4e      	ldr	r3, [pc, #312]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e08e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800421e:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e086      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b46      	ldr	r3, [pc, #280]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4943      	ldr	r1, [pc, #268]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fd fcb2 	bl	8001ba8 <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fd fcae 	bl	8001ba8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e06e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b3a      	ldr	r3, [pc, #232]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004288:	429a      	cmp	r2, r3
 800428a:	d208      	bcs.n	800429e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b2e      	ldr	r3, [pc, #184]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	492b      	ldr	r1, [pc, #172]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800429e:	4b29      	ldr	r3, [pc, #164]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d210      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 0207 	bic.w	r2, r3, #7
 80042b4:	4923      	ldr	r1, [pc, #140]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e036      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4918      	ldr	r1, [pc, #96]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f8:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4910      	ldr	r1, [pc, #64]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800430c:	f000 f824 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	490b      	ldr	r1, [pc, #44]	@ (800434c <HAL_RCC_ClockConfig+0x1f4>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800432a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <HAL_RCC_ClockConfig+0x1fc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd fbe9 	bl	8001b08 <HAL_InitTick>
 8004336:	4603      	mov	r3, r0
 8004338:	72fb      	strb	r3, [r7, #11]

  return status;
 800433a:	7afb      	ldrb	r3, [r7, #11]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40022000 	.word	0x40022000
 8004348:	40021000 	.word	0x40021000
 800434c:	080053bc 	.word	0x080053bc
 8004350:	20000004 	.word	0x20000004
 8004354:	20000008 	.word	0x20000008

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b3e      	ldr	r3, [pc, #248]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b3b      	ldr	r3, [pc, #236]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d121      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d11e      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800438c:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004398:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e005      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d102      	bne.n	80043d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d0:	4b25      	ldr	r3, [pc, #148]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e004      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043dc:	4b23      	ldr	r3, [pc, #140]	@ (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 80043de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d134      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0xa6>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d003      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0xac>
 80043fc:	e005      	b.n	800440a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 8004400:	617b      	str	r3, [r7, #20]
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004404:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 8004406:	617b      	str	r3, [r7, #20]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	617b      	str	r3, [r7, #20]
      break;
 800440e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004410:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	3301      	adds	r3, #1
 800441c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800441e:	4b10      	ldr	r3, [pc, #64]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	fb03 f202 	mul.w	r2, r3, r2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004436:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0e5b      	lsrs	r3, r3, #25
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	3301      	adds	r3, #1
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004450:	69bb      	ldr	r3, [r7, #24]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	@ 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	080053cc 	.word	0x080053cc
 8004468:	00f42400 	.word	0x00f42400
 800446c:	007a1200 	.word	0x007a1200

08004470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800447c:	4b2a      	ldr	r3, [pc, #168]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004488:	f7ff f9ee 	bl	8003868 <HAL_PWREx_GetVoltageRange>
 800448c:	6178      	str	r0, [r7, #20]
 800448e:	e014      	b.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b25      	ldr	r3, [pc, #148]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	4a24      	ldr	r2, [pc, #144]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	@ 0x58
 800449c:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044a8:	f7ff f9de 	bl	8003868 <HAL_PWREx_GetVoltageRange>
 80044ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c0:	d10b      	bne.n	80044da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b80      	cmp	r3, #128	@ 0x80
 80044c6:	d919      	bls.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80044cc:	d902      	bls.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ce:	2302      	movs	r3, #2
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e013      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e010      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b80      	cmp	r3, #128	@ 0x80
 80044de:	d902      	bls.n	80044e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044e0:	2303      	movs	r3, #3
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e00a      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b80      	cmp	r3, #128	@ 0x80
 80044ea:	d102      	bne.n	80044f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ec:	2302      	movs	r3, #2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e004      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b70      	cmp	r3, #112	@ 0x70
 80044f6:	d101      	bne.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f8:	2301      	movs	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 0207 	bic.w	r2, r3, #7
 8004504:	4909      	ldr	r1, [pc, #36]	@ (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800450c:	4b07      	ldr	r3, [pc, #28]	@ (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	40022000 	.word	0x40022000

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004538:	2300      	movs	r3, #0
 800453a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800453c:	2300      	movs	r3, #0
 800453e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004548:	2b00      	cmp	r3, #0
 800454a:	d031      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004554:	d01a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004556:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800455a:	d814      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004560:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004564:	d10f      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004566:	4b5d      	ldr	r3, [pc, #372]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4a5c      	ldr	r2, [pc, #368]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004570:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004572:	e00c      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f9ce 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004584:	e003      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	74fb      	strb	r3, [r7, #19]
      break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800458c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004594:	4b51      	ldr	r3, [pc, #324]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a2:	494e      	ldr	r1, [pc, #312]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 809e 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045c2:	4b46      	ldr	r3, [pc, #280]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b40      	ldr	r3, [pc, #256]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045dc:	4a3f      	ldr	r2, [pc, #252]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045e4:	4b3d      	ldr	r3, [pc, #244]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f4:	4b3a      	ldr	r3, [pc, #232]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a39      	ldr	r2, [pc, #228]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004600:	f7fd fad2 	bl	8001ba8 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004608:	f7fd face 	bl	8001ba8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d902      	bls.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	74fb      	strb	r3, [r7, #19]
        break;
 800461a:	e005      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461c:	4b30      	ldr	r3, [pc, #192]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ef      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d15a      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800462e:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004638:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	429a      	cmp	r2, r3
 8004648:	d019      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800464a:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004654:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004656:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004666:	4b1d      	ldr	r3, [pc, #116]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466c:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004676:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d016      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd fa8e 	bl	8001ba8 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468e:	e00b      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fd fa8a 	bl	8001ba8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d902      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	74fb      	strb	r3, [r7, #19]
            break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ec      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046bc:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ca:	4904      	ldr	r1, [pc, #16]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046d2:	e009      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046e8:	7c7b      	ldrb	r3, [r7, #17]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	4a89      	ldr	r2, [pc, #548]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004706:	4b84      	ldr	r3, [pc, #528]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470c:	f023 0203 	bic.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	4980      	ldr	r1, [pc, #512]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004728:	4b7b      	ldr	r3, [pc, #492]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472e:	f023 020c 	bic.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	4978      	ldr	r1, [pc, #480]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800474a:	4b73      	ldr	r3, [pc, #460]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	496f      	ldr	r1, [pc, #444]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800476c:	4b6a      	ldr	r3, [pc, #424]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477a:	4967      	ldr	r1, [pc, #412]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800478e:	4b62      	ldr	r3, [pc, #392]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004794:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	495e      	ldr	r1, [pc, #376]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b0:	4b59      	ldr	r3, [pc, #356]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	4956      	ldr	r1, [pc, #344]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d2:	4b51      	ldr	r3, [pc, #324]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e0:	494d      	ldr	r1, [pc, #308]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d028      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f4:	4b48      	ldr	r3, [pc, #288]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	4945      	ldr	r1, [pc, #276]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004812:	d106      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	4b40      	ldr	r3, [pc, #256]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a3f      	ldr	r2, [pc, #252]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481e:	60d3      	str	r3, [r2, #12]
 8004820:	e011      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800482a:	d10c      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f872 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d028      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004852:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004858:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004860:	492d      	ldr	r1, [pc, #180]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004870:	d106      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004872:	4b29      	ldr	r3, [pc, #164]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4a28      	ldr	r2, [pc, #160]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800487c:	60d3      	str	r3, [r2, #12]
 800487e:	e011      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	2101      	movs	r1, #1
 8004890:	4618      	mov	r0, r3
 8004892:	f000 f843 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b0:	4b19      	ldr	r3, [pc, #100]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048be:	4916      	ldr	r1, [pc, #88]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ce:	d10c      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f820 	bl	800491c <RCCEx_PLLSAI1_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048f6:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004904:	4904      	ldr	r1, [pc, #16]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800490c:	7cbb      	ldrb	r3, [r7, #18]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000

0800491c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492a:	4b74      	ldr	r3, [pc, #464]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004936:	4b71      	ldr	r3, [pc, #452]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d10d      	bne.n	8004962 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
       ||
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800494e:	4b6b      	ldr	r3, [pc, #428]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
       ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d047      	beq.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
 8004966:	e044      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d018      	beq.n	80049a2 <RCCEx_PLLSAI1_Config+0x86>
 8004970:	2b03      	cmp	r3, #3
 8004972:	d825      	bhi.n	80049c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004974:	2b01      	cmp	r3, #1
 8004976:	d002      	beq.n	800497e <RCCEx_PLLSAI1_Config+0x62>
 8004978:	2b02      	cmp	r3, #2
 800497a:	d009      	beq.n	8004990 <RCCEx_PLLSAI1_Config+0x74>
 800497c:	e020      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497e:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11d      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498e:	e01a      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004990:	4b5a      	ldr	r3, [pc, #360]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d116      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e013      	b.n	80049ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a2:	4b56      	ldr	r3, [pc, #344]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ae:	4b53      	ldr	r3, [pc, #332]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049be:	e006      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e004      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10d      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d6:	4b49      	ldr	r3, [pc, #292]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	430b      	orrs	r3, r1
 80049ec:	4943      	ldr	r1, [pc, #268]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d17c      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049f8:	4b40      	ldr	r3, [pc, #256]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3f      	ldr	r2, [pc, #252]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a04:	f7fd f8d0 	bl	8001ba8 <HAL_GetTick>
 8004a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a0a:	e009      	b.n	8004a20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a0c:	f7fd f8cc 	bl	8001ba8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1e:	e005      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a20:	4b36      	ldr	r3, [pc, #216]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ef      	bne.n	8004a0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d15f      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d110      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a38:	4b30      	ldr	r3, [pc, #192]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
 8004a48:	0211      	lsls	r1, r2, #8
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d2      	ldr	r2, [r2, #12]
 8004a4e:	06d2      	lsls	r2, r2, #27
 8004a50:	430a      	orrs	r2, r1
 8004a52:	492a      	ldr	r1, [pc, #168]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
 8004a58:	e027      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d112      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a60:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6912      	ldr	r2, [r2, #16]
 8004a76:	0852      	lsrs	r2, r2, #1
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0552      	lsls	r2, r2, #21
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	491f      	ldr	r1, [pc, #124]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
 8004a84:	e011      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a86:	4b1d      	ldr	r3, [pc, #116]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	0211      	lsls	r1, r2, #8
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6952      	ldr	r2, [r2, #20]
 8004a9c:	0852      	lsrs	r2, r2, #1
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	0652      	lsls	r2, r2, #25
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	4915      	ldr	r1, [pc, #84]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004aaa:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fd f877 	bl	8001ba8 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004abc:	e009      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004abe:	f7fd f873 	bl	8001ba8 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	73fb      	strb	r3, [r7, #15]
          break;
 8004ad0:	e005      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ef      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	4903      	ldr	r1, [pc, #12]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e095      	b.n	8004c3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b22:	d009      	beq.n	8004b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	61da      	str	r2, [r3, #28]
 8004b2a:	e005      	b.n	8004b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc fbf2 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b78:	d902      	bls.n	8004b80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e002      	b.n	8004b86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004b8e:	d007      	beq.n	8004ba0 <HAL_SPI_Init+0xa0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b98:	d002      	beq.n	8004ba0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be2:	ea42 0103 	orr.w	r1, r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f003 0204 	and.w	r2, r3, #4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c1c:	ea42 0103 	orr.w	r1, r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b08a      	sub	sp, #40	@ 0x28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c54:	2301      	movs	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c58:	f7fc ffa6 	bl	8001ba8 <HAL_GetTick>
 8004c5c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c64:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004c70:	887b      	ldrh	r3, [r7, #2]
 8004c72:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c74:	7ffb      	ldrb	r3, [r7, #31]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d00c      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x4e>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c80:	d106      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x4a>
 8004c8a:	7ffb      	ldrb	r3, [r7, #31]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d001      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
 8004c92:	e1f3      	b.n	800507c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x60>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x60>
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e1e8      	b.n	800507c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x72>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e1e1      	b.n	800507c <HAL_SPI_TransmitReceive+0x436>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d003      	beq.n	8004cd4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2205      	movs	r2, #5
 8004cd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	887a      	ldrh	r2, [r7, #2]
 8004cec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	887a      	ldrh	r2, [r7, #2]
 8004cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	887a      	ldrh	r2, [r7, #2]
 8004d00:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d16:	d802      	bhi.n	8004d1e <HAL_SPI_TransmitReceive+0xd8>
 8004d18:	8abb      	ldrh	r3, [r7, #20]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d908      	bls.n	8004d30 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	e007      	b.n	8004d40 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4a:	2b40      	cmp	r3, #64	@ 0x40
 8004d4c:	d007      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d66:	f240 8083 	bls.w	8004e70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x132>
 8004d72:	8afb      	ldrh	r3, [r7, #22]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d16f      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d9c:	e05c      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d11b      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x19e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <HAL_SPI_TransmitReceive+0x19e>
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d113      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d11c      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x1e6>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	b292      	uxth	r2, r2
 8004e0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	1c9a      	adds	r2, r3, #2
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e2c:	f7fc febc 	bl	8001ba8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d80d      	bhi.n	8004e58 <HAL_SPI_TransmitReceive+0x212>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e42:	d009      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e111      	b.n	800507c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d19d      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x158>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d197      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x158>
 8004e6e:	e0e5      	b.n	800503c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x23a>
 8004e78:	8afb      	ldrh	r3, [r7, #22]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	f040 80d1 	bne.w	8005022 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d912      	bls.n	8004eb0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b02      	subs	r3, #2
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004eae:	e0b8      	b.n	8005022 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed6:	e0a4      	b.n	8005022 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d134      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x30a>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02f      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x30a>
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d12c      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d912      	bls.n	8004f26 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	881a      	ldrh	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f10:	1c9a      	adds	r2, r3, #2
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b02      	subs	r3, #2
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f24:	e012      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d148      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x3aa>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d042      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d923      	bls.n	8004fbe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	b292      	uxth	r2, r2
 8004f82:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	1c9a      	adds	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b02      	subs	r3, #2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d81f      	bhi.n	8004fec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	e016      	b.n	8004fec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f103 020c 	add.w	r2, r3, #12
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	7812      	ldrb	r2, [r2, #0]
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ff0:	f7fc fdda 	bl	8001ba8 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d803      	bhi.n	8005008 <HAL_SPI_TransmitReceive+0x3c2>
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005006:	d102      	bne.n	800500e <HAL_SPI_TransmitReceive+0x3c8>
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e02c      	b.n	800507c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f af55 	bne.w	8004ed8 <HAL_SPI_TransmitReceive+0x292>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	f47f af4e 	bne.w	8004ed8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f93d 	bl	80052c0 <SPI_EndRxTxTransaction>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e00e      	b.n	800507c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800507a:	2300      	movs	r3, #0
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3728      	adds	r7, #40	@ 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005094:	f7fc fd88 	bl	8001ba8 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	4413      	add	r3, r2
 80050a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050a4:	f7fc fd80 	bl	8001ba8 <HAL_GetTick>
 80050a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050aa:	4b39      	ldr	r3, [pc, #228]	@ (8005190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	015b      	lsls	r3, r3, #5
 80050b0:	0d1b      	lsrs	r3, r3, #20
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ba:	e054      	b.n	8005166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050c2:	d050      	beq.n	8005166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050c4:	f7fc fd70 	bl	8001ba8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d902      	bls.n	80050da <SPI_WaitFlagStateUntilTimeout+0x56>
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d13d      	bne.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050f2:	d111      	bne.n	8005118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fc:	d004      	beq.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005106:	d107      	bne.n	8005118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005120:	d10f      	bne.n	8005142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e017      	b.n	8005186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3b01      	subs	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	429a      	cmp	r2, r3
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	429a      	cmp	r2, r3
 8005182:	d19b      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000004 	.word	0x20000004

08005194 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	@ 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051a6:	f7fc fcff 	bl	8001ba8 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	4413      	add	r3, r2
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80051b6:	f7fc fcf7 	bl	8001ba8 <HAL_GetTick>
 80051ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051c4:	4b3d      	ldr	r3, [pc, #244]	@ (80052bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00da      	lsls	r2, r3, #3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	0d1b      	lsrs	r3, r3, #20
 80051d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051dc:	e060      	b.n	80052a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80051e4:	d107      	bne.n	80051f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051fc:	d050      	beq.n	80052a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051fe:	f7fc fcd3 	bl	8001ba8 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520a:	429a      	cmp	r2, r3
 800520c:	d902      	bls.n	8005214 <SPI_WaitFifoStateUntilTimeout+0x80>
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d13d      	bne.n	8005290 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800522c:	d111      	bne.n	8005252 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005236:	d004      	beq.n	8005242 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005240:	d107      	bne.n	8005252 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005250:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800525a:	d10f      	bne.n	800527c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800527a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e010      	b.n	80052b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	3b01      	subs	r3, #1
 800529e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d196      	bne.n	80051de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3728      	adds	r7, #40	@ 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000004 	.word	0x20000004

080052c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff ff5b 	bl	8005194 <SPI_WaitFifoStateUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e027      	b.n	8005344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2200      	movs	r2, #0
 80052fc:	2180      	movs	r1, #128	@ 0x80
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff fec0 	bl	8005084 <SPI_WaitFlagStateUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e014      	b.n	8005344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff ff34 	bl	8005194 <SPI_WaitFifoStateUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e000      	b.n	8005344 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <memset>:
 800534c:	4402      	add	r2, r0
 800534e:	4603      	mov	r3, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	@ (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	@ (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	@ (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	@ (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 f818 	bl	80053a4 <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08005504 	.word	0x08005504
 8005398:	08005504 	.word	0x08005504
 800539c:	08005504 	.word	0x08005504
 80053a0:	08005508 	.word	0x08005508

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
