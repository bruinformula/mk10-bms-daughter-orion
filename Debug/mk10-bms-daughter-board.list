
mk10-bms-daughter-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005708  08005708  00006708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005850  08005850  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005850  08005850  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005854  08005854  00006854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005858  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000000c  08005864  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005864  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea72  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b24  00000000  00000000  00015aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000185d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  00019350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c46  00000000  00000000  00019d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001047f  00000000  00000000  0003b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc94a  00000000  00000000  0004be25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011876f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b0  00000000  00000000  001187b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0011be64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056f0 	.word	0x080056f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080056f0 	.word	0x080056f0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a22:	4b5c      	ldr	r3, [pc, #368]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a24:	4a5c      	ldr	r2, [pc, #368]	@ (8000b98 <MX_ADC1_Init+0x18c>)
 8000a26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a28:	4b5a      	ldr	r3, [pc, #360]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2e:	4b59      	ldr	r3, [pc, #356]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a34:	4b57      	ldr	r3, [pc, #348]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a3a:	4b56      	ldr	r3, [pc, #344]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a40:	4b54      	ldr	r3, [pc, #336]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a46:	4b53      	ldr	r3, [pc, #332]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a4c:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8000a52:	4b50      	ldr	r3, [pc, #320]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a54:	2208      	movs	r2, #8
 8000a56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a58:	4b4e      	ldr	r3, [pc, #312]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b4c      	ldr	r3, [pc, #304]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6c:	4b49      	ldr	r3, [pc, #292]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b47      	ldr	r3, [pc, #284]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a7a:	4b46      	ldr	r3, [pc, #280]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a82:	4844      	ldr	r0, [pc, #272]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000a84:	f001 fb1a 	bl	80020bc <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000a8e:	f000 fb09 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a92:	4b42      	ldr	r3, [pc, #264]	@ (8000b9c <MX_ADC1_Init+0x190>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a96:	2306      	movs	r3, #6
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a9e:	237f      	movs	r3, #127	@ 0x7f
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4839      	ldr	r0, [pc, #228]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000ab0:	f001 fce8 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000aba:	f000 faf3 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000abe:	4b38      	ldr	r3, [pc, #224]	@ (8000ba0 <MX_ADC1_Init+0x194>)
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4832      	ldr	r0, [pc, #200]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000acc:	f001 fcda 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000ad6:	f000 fae5 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ada:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <MX_ADC1_Init+0x198>)
 8000adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ade:	2312      	movs	r3, #18
 8000ae0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482b      	ldr	r0, [pc, #172]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000ae8:	f001 fccc 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000af2:	f000 fad7 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <MX_ADC1_Init+0x19c>)
 8000af8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000afa:	2318      	movs	r3, #24
 8000afc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4824      	ldr	r0, [pc, #144]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b04:	f001 fcbe 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000b0e:	f000 fac9 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b12:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_ADC1_Init+0x1a0>)
 8000b14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b22:	f001 fcaf 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000b2c:	f000 faba 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <MX_ADC1_Init+0x1a4>)
 8000b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b34:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4815      	ldr	r0, [pc, #84]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b40:	f001 fca0 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000b4a:	f000 faab 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <MX_ADC1_Init+0x1a8>)
 8000b50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b52:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b5e:	f001 fc91 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000b68:	f000 fa9c 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_ADC1_Init+0x1ac>)
 8000b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b70:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000b74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <MX_ADC1_Init+0x188>)
 8000b7c:	f001 fc82 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8000b86:	f000 fa8d 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000028 	.word	0x20000028
 8000b98:	50040000 	.word	0x50040000
 8000b9c:	14f00020 	.word	0x14f00020
 8000ba0:	19200040 	.word	0x19200040
 8000ba4:	1d500080 	.word	0x1d500080
 8000ba8:	21800100 	.word	0x21800100
 8000bac:	25b00200 	.word	0x25b00200
 8000bb0:	2a000400 	.word	0x2a000400
 8000bb4:	2e300800 	.word	0x2e300800
 8000bb8:	32601000 	.word	0x32601000

08000bbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09e      	sub	sp, #120	@ 0x78
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2254      	movs	r2, #84	@ 0x54
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fd5b 	bl	8005698 <memset>
  if(adcHandle->Instance==ADC1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd4 <HAL_ADC_MspInit+0x118>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d16e      	bne.n	8000cca <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bf0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bf2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c00:	2308      	movs	r3, #8
 8000c02:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c04:	2307      	movs	r3, #7
 8000c06:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fe2e 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000c26:	f000 fa3d 	bl	80010a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a24      	ldr	r2, [pc, #144]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <HAL_ADC_MspInit+0x11c>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = T13_Pin|T14_Pin|T15_Pin|T16_Pin
 8000c5a:	23ff      	movs	r3, #255	@ 0xff
 8000c5c:	667b      	str	r3, [r7, #100]	@ 0x64
                          |T17_Pin|T18_Pin|T19_Pin|T20_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c5e:	230b      	movs	r3, #11
 8000c60:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f002 fe1e 	bl	80038b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c76:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce0 <HAL_ADC_MspInit+0x124>)
 8000c78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000c9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cae:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000cb0:	f002 fc06 	bl	80034c0 <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000cba:	f000 f9f3 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cc4:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <HAL_ADC_MspInit+0x120>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3778      	adds	r7, #120	@ 0x78
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	50040000 	.word	0x50040000
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	40020008 	.word	0x40020008

08000ce4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cea:	4a18      	ldr	r2, [pc, #96]	@ (8000d4c <MX_CAN1_Init+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d02:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000d06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d0e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <MX_CAN1_Init+0x64>)
 8000d36:	f002 f8a1 	bl	8002e7c <HAL_CAN_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d40:	f000 f9b0 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200000d4 	.word	0x200000d4
 8000d4c:	40006400 	.word	0x40006400

08000d50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <HAL_CAN_MspInit+0xa4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d13b      	bne.n	8000dea <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a20      	ldr	r2, [pc, #128]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_CAN_MspInit+0xa8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000da2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000db4:	2309      	movs	r3, #9
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc2:	f002 fd75 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de6:	f002 fd63 	bl	80038b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40006400 	.word	0x40006400
 8000df8:	40021000 	.word	0x40021000

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_DMA_Init+0x38>)
 8000e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e06:	4a0b      	ldr	r2, [pc, #44]	@ (8000e34 <MX_DMA_Init+0x38>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_DMA_Init+0x38>)
 8000e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	200b      	movs	r0, #11
 8000e20:	f002 fb17 	bl	8003452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e24:	200b      	movs	r0, #11
 8000e26:	f002 fb30 	bl	800348a <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	4a27      	ldr	r2, [pc, #156]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_GPIO_Init+0xb8>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS2_Pin|CS1_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000e9c:	4815      	ldr	r0, [pc, #84]	@ (8000ef4 <MX_GPIO_Init+0xbc>)
 8000e9e:	f002 fe71 	bl	8003b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <MX_GPIO_Init+0xc0>)
 8000ea8:	f002 fe6c 	bl	8003b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 8000eac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480b      	ldr	r0, [pc, #44]	@ (8000ef4 <MX_GPIO_Init+0xbc>)
 8000ec6:	f002 fcf3 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS3_Pin */
  GPIO_InitStruct.Pin = CS3_Pin;
 8000eca:	2380      	movs	r3, #128	@ 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS3_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_GPIO_Init+0xc0>)
 8000ee2:	f002 fce5 	bl	80038b0 <HAL_GPIO_Init>

}
 8000ee6:	bf00      	nop
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000400 	.word	0x48000400

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f000 fe7b 	bl	8001bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f888 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f7ff ff96 	bl	8000e38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0c:	f7ff ff76 	bl	8000dfc <MX_DMA_Init>
  MX_SPI3_Init();
 8000f10:	f000 fa22 	bl	8001358 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f14:	f7ff fd7a 	bl	8000a0c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f18:	f7ff fee4 	bl	8000ce4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000f1c:	482e      	ldr	r0, [pc, #184]	@ (8000fd8 <main+0xdc>)
 8000f1e:	f002 f8a8 	bl	8003072 <HAL_CAN_Start>

  initMCP(&MCP1, &hspi3, CS1_PORT, CS1_PIN);
 8000f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f26:	4a2d      	ldr	r2, [pc, #180]	@ (8000fdc <main+0xe0>)
 8000f28:	492d      	ldr	r1, [pc, #180]	@ (8000fe0 <main+0xe4>)
 8000f2a:	482e      	ldr	r0, [pc, #184]	@ (8000fe4 <main+0xe8>)
 8000f2c:	f000 f8c0 	bl	80010b0 <initMCP>
  initMCP(&MCP2, &hspi3, CS2_PORT, CS2_PIN);
 8000f30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f34:	4a29      	ldr	r2, [pc, #164]	@ (8000fdc <main+0xe0>)
 8000f36:	492a      	ldr	r1, [pc, #168]	@ (8000fe0 <main+0xe4>)
 8000f38:	482b      	ldr	r0, [pc, #172]	@ (8000fe8 <main+0xec>)
 8000f3a:	f000 f8b9 	bl	80010b0 <initMCP>
  initMCP(&MCP3, &hspi3, CS3_PORT, CS3_PIN);
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <main+0xf0>)
 8000f42:	4927      	ldr	r1, [pc, #156]	@ (8000fe0 <main+0xe4>)
 8000f44:	482a      	ldr	r0, [pc, #168]	@ (8000ff0 <main+0xf4>)
 8000f46:	f000 f8b3 	bl	80010b0 <initMCP>

  CAN_CONTEXT.ADDRESS_CTXHeader.IDE = CAN_ID_EXT;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <main+0xf8>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	611a      	str	r2, [r3, #16]
  CAN_CONTEXT.ADDRESS_CTXHeader.ExtId = J1939_ADDRESS_BROADCAST_ID;
 8000f50:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <main+0xf8>)
 8000f52:	4a29      	ldr	r2, [pc, #164]	@ (8000ff8 <main+0xfc>)
 8000f54:	60da      	str	r2, [r3, #12]
  CAN_CONTEXT.ADDRESS_CTXHeader.RTR = CAN_RTR_DATA;
 8000f56:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <main+0xf8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  CAN_CONTEXT.ADDRESS_CTXHeader.DLC = 8;
 8000f5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <main+0xf8>)
 8000f5e:	2208      	movs	r2, #8
 8000f60:	619a      	str	r2, [r3, #24]
  formAddressDataframe(&(CAN_CONTEXT.address_broadcast_dataframe));
 8000f62:	4824      	ldr	r0, [pc, #144]	@ (8000ff4 <main+0xf8>)
 8000f64:	f000 fd9e 	bl	8001aa4 <formAddressDataframe>

  CAN_CONTEXT.THERMISTOR_CTXHeader.ExtId = THERMISTOR_BMS_DEFAULT_BROADCAST_ID + (MODULE_NUMBER-1);
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <main+0xf8>)
 8000f6a:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <main+0x100>)
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
//  CAN_CONTEXT.THERMISTOR_CTXHeader.ExtId = THERMISTOR_BMS_DEFAULT_BROADCAST_ID;
  CAN_CONTEXT.THERMISTOR_CTXHeader.IDE = CAN_ID_EXT;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <main+0xf8>)
 8000f70:	2204      	movs	r2, #4
 8000f72:	631a      	str	r2, [r3, #48]	@ 0x30
  CAN_CONTEXT.THERMISTOR_CTXHeader.RTR = CAN_RTR_DATA;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <main+0xf8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	635a      	str	r2, [r3, #52]	@ 0x34
  CAN_CONTEXT.THERMISTOR_CTXHeader.DLC = 8;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <main+0xf8>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // This dataframe is constant, so need to reform it, sent every 200 ms
	  ADDRESS_CAN_TxStatus = HAL_CAN_AddTxMessage(&hcan1,
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <main+0x104>)
 8000f82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <main+0xf8>)
 8000f84:	491f      	ldr	r1, [pc, #124]	@ (8001004 <main+0x108>)
 8000f86:	4814      	ldr	r0, [pc, #80]	@ (8000fd8 <main+0xdc>)
 8000f88:	f002 f8b7 	bl	80030fa <HAL_CAN_AddTxMessage>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <main+0x10c>)
 8000f92:	701a      	strb	r2, [r3, #0]
			  &CAN_CONTEXT.ADDRESS_CTXHeader, CAN_CONTEXT.address_broadcast_dataframe.array, &mailbox);

	  // Meanwhile, thermistor dataframe is sent every 100ms, needs to be recomputed
	  formThermistorDataframe(&(CAN_CONTEXT.thermistor_broadcast_dataframe));
 8000f94:	481d      	ldr	r0, [pc, #116]	@ (800100c <main+0x110>)
 8000f96:	f000 fda7 	bl	8001ae8 <formThermistorDataframe>
	  THERMISTOR_CAN_TxStatus = HAL_CAN_AddTxMessage(&hcan1, &CAN_CONTEXT.THERMISTOR_CTXHeader,
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <main+0x104>)
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800100c <main+0x110>)
 8000f9e:	491c      	ldr	r1, [pc, #112]	@ (8001010 <main+0x114>)
 8000fa0:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <main+0xdc>)
 8000fa2:	f002 f8aa 	bl	80030fa <HAL_CAN_AddTxMessage>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <main+0x118>)
 8000fac:	701a      	strb	r2, [r3, #0]
			  CAN_CONTEXT.thermistor_broadcast_dataframe.array, &mailbox);
	  HAL_Delay(100);
 8000fae:	2064      	movs	r0, #100	@ 0x64
 8000fb0:	f000 fe98 	bl	8001ce4 <HAL_Delay>

	  formThermistorDataframe(&(CAN_CONTEXT.thermistor_broadcast_dataframe));
 8000fb4:	4815      	ldr	r0, [pc, #84]	@ (800100c <main+0x110>)
 8000fb6:	f000 fd97 	bl	8001ae8 <formThermistorDataframe>
	  THERMISTOR_CAN_TxStatus = HAL_CAN_AddTxMessage(&hcan1, &CAN_CONTEXT.THERMISTOR_CTXHeader,
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <main+0x104>)
 8000fbc:	4a13      	ldr	r2, [pc, #76]	@ (800100c <main+0x110>)
 8000fbe:	4914      	ldr	r1, [pc, #80]	@ (8001010 <main+0x114>)
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <main+0xdc>)
 8000fc2:	f002 f89a 	bl	80030fa <HAL_CAN_AddTxMessage>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <main+0x118>)
 8000fcc:	701a      	strb	r2, [r3, #0]
			  CAN_CONTEXT.thermistor_broadcast_dataframe.array, &mailbox);
	  HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	@ 0x64
 8000fd0:	f000 fe88 	bl	8001ce4 <HAL_Delay>
	  ADDRESS_CAN_TxStatus = HAL_CAN_AddTxMessage(&hcan1,
 8000fd4:	bf00      	nop
 8000fd6:	e7d3      	b.n	8000f80 <main+0x84>
 8000fd8:	200000d4 	.word	0x200000d4
 8000fdc:	48000800 	.word	0x48000800
 8000fe0:	20000144 	.word	0x20000144
 8000fe4:	200001a8 	.word	0x200001a8
 8000fe8:	200001d0 	.word	0x200001d0
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	200001f8 	.word	0x200001f8
 8000ff4:	200000fc 	.word	0x200000fc
 8000ff8:	18eeff80 	.word	0x18eeff80
 8000ffc:	1839f384 	.word	0x1839f384
 8001000:	20000140 	.word	0x20000140
 8001004:	20000104 	.word	0x20000104
 8001008:	2000013c 	.word	0x2000013c
 800100c:	2000011c 	.word	0x2000011c
 8001010:	20000124 	.word	0x20000124
 8001014:	2000013d 	.word	0x2000013d

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	@ 0x58
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2244      	movs	r2, #68	@ 0x44
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fb36 	bl	8005698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800103a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800103e:	f002 fdc7 	bl	8003bd0 <HAL_PWREx_ControlVoltageScaling>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001048:	f000 f82c 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800104c:	2310      	movs	r3, #16
 800104e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001058:	2370      	movs	r3, #112	@ 0x70
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fe09 	bl	8003c7c <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001070:	f000 f818 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fa09 	bl	80044a4 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001098:	f000 f804 	bl	80010a4 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3758      	adds	r7, #88	@ 0x58
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <initMCP>:
// */


#include "mcp3204.h"

void initMCP(MCP3204* mcp, SPI_HandleTypeDef* spi, GPIO_TypeDef* port, uint16_t pin) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	807b      	strh	r3, [r7, #2]
	mcp->spiInstance = spi;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	601a      	str	r2, [r3, #0]
	mcp->CS_PORT = port;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
	mcp->CS_PIN = pin;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	811a      	strh	r2, [r3, #8]

	mcp->config.bits.RESV = RESV_BIT; // Fixed at 0
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	mcp->config.bits.START = START_BIT; // Fixed at 1
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24

	mcp->txData[1] = 0;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	72da      	strb	r2, [r3, #11]
	mcp->txData[2] = 0;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	731a      	strb	r2, [r3, #12]
	mcp->txData[3] = 0;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	735a      	strb	r2, [r3, #13]

	HAL_GPIO_WritePin(mcp->CS_PORT, mcp->CS_PIN, GPIO_PIN_SET); // Assert it high
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6858      	ldr	r0, [r3, #4]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	891b      	ldrh	r3, [r3, #8]
 8001106:	2201      	movs	r2, #1
 8001108:	4619      	mov	r1, r3
 800110a:	f002 fd3b 	bl	8003b84 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <getADCValue>:

void getADCValue(MCP3204* mcp) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af02      	add	r7, sp, #8
 800111c:	6078      	str	r0, [r7, #4]
	// Assume desired channel has been selected already...
	mcp->txData[0] = mcp->config.byte;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	729a      	strb	r2, [r3, #10]

	mcp->rxData[0] = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	739a      	strb	r2, [r3, #14]
	mcp->rxData[1] = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	73da      	strb	r2, [r3, #15]
	mcp->rxData[2] = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	741a      	strb	r2, [r3, #16]
	mcp->rxData[3] = 0;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	745a      	strb	r2, [r3, #17]

	HAL_GPIO_WritePin(mcp->CS_PORT, mcp->CS_PIN, GPIO_PIN_RESET);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6858      	ldr	r0, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	891b      	ldrh	r3, [r3, #8]
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f002 fd1a 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(mcp->spiInstance, mcp->txData, mcp->rxData, 4, HAL_MAX_DELAY);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f103 010a 	add.w	r1, r3, #10
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f103 020e 	add.w	r2, r3, #14
 8001160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2304      	movs	r3, #4
 8001168:	f003 ff13 	bl	8004f92 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(mcp->CS_PORT, mcp->CS_PIN, GPIO_PIN_SET);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6858      	ldr	r0, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	891b      	ldrh	r3, [r3, #8]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	f002 fd04 	bl	8003b84 <HAL_GPIO_WritePin>

	uint16_t value = ((uint16_t)mcp->rxData[1] << 8) | mcp->rxData[2];
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7bdb      	ldrb	r3, [r3, #15]
 8001180:	b21b      	sxth	r3, r3
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7c1b      	ldrb	r3, [r3, #16]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21b      	sxth	r3, r3
 8001190:	81fb      	strh	r3, [r7, #14]
	mcp->rawADC = (value >> 3); // Use RSHIFT-3!!!
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	b29a      	uxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	825a      	strh	r2, [r3, #18]
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <computeCH0>:

void computeCH0(MCP3204* mcp) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	enableCH0(mcp);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f88b 	bl	80012c8 <enableCH0>
	getADCValue(mcp);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffaf 	bl	8001116 <getADCValue>
	mcp->CH0_Voltage = computeVoltage(mcp->rawADC);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	8a5b      	ldrh	r3, [r3, #18]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f853 	bl	8001268 <computeVoltage>
 80011c2:	eef0 7a40 	vmov.f32	s15, s0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <computeCH1>:

void computeCH1(MCP3204* mcp) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	enableCH1(mcp);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f885 	bl	80012ec <enableCH1>
	getADCValue(mcp);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff97 	bl	8001116 <getADCValue>
	mcp->CH1_Voltage = computeVoltage(mcp->rawADC);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	8a5b      	ldrh	r3, [r3, #18]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f83b 	bl	8001268 <computeVoltage>
 80011f2:	eef0 7a40 	vmov.f32	s15, s0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <computeCH2>:

void computeCH2(MCP3204* mcp) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	enableCH2(mcp);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f87f 	bl	8001310 <enableCH2>
	getADCValue(mcp);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff7f 	bl	8001116 <getADCValue>
	mcp->CH2_Voltage = computeVoltage(mcp->rawADC);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	8a5b      	ldrh	r3, [r3, #18]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f823 	bl	8001268 <computeVoltage>
 8001222:	eef0 7a40 	vmov.f32	s15, s0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <computeCH3>:

void computeCH3(MCP3204* mcp) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	enableCH3(mcp);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f879 	bl	8001334 <enableCH3>
	getADCValue(mcp);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff67 	bl	8001116 <getADCValue>
	mcp->CH3_Voltage = computeVoltage(mcp->rawADC);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	8a5b      	ldrh	r3, [r3, #18]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f80b 	bl	8001268 <computeVoltage>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0000      	movs	r0, r0
	...

08001268 <computeVoltage>:

float computeVoltage(uint16_t adc_reading) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
	return (adc_reading * MCP_VREF)/4095.0;
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8fd 	bl	8000474 <__aeabi_i2d>
 800127a:	a30f      	add	r3, pc, #60	@ (adr r3, 80012b8 <computeVoltage+0x50>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f962 	bl	8000548 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	a30c      	add	r3, pc, #48	@ (adr r3, 80012c0 <computeVoltage+0x58>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fa83 	bl	800079c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fb65 	bl	800096c <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	ee07 3a90 	vmov	s15, r3
}
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	66666666 	.word	0x66666666
 80012bc:	400a6666 	.word	0x400a6666
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40affe00 	.word	0x40affe00

080012c8 <enableCH0>:

void enableCH0(MCP3204* mcp) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_0;
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80012d6:	2108      	movs	r1, #8
 80012d8:	f361 0344 	bfi	r3, r1, #1, #4
 80012dc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <enableCH1>:

void enableCH1(MCP3204* mcp) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_1;
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80012fa:	2109      	movs	r1, #9
 80012fc:	f361 0344 	bfi	r3, r1, #1, #4
 8001300:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <enableCH2>:

void enableCH2(MCP3204* mcp) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_2;
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800131e:	210a      	movs	r1, #10
 8001320:	f361 0344 	bfi	r3, r1, #1, #4
 8001324:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <enableCH3>:

void enableCH3(MCP3204* mcp) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	mcp->config.bits.CH_SELECT = CH_3;
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8001342:	210b      	movs	r1, #11
 8001344:	f361 0344 	bfi	r3, r1, #1, #4
 8001348:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_SPI3_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <MX_SPI3_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_SPI3_Init+0x74>)
 8001364:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001368:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_SPI3_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_SPI3_Init+0x74>)
 8001372:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001376:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_SPI3_Init+0x74>)
 800137a:	2202      	movs	r2, #2
 800137c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_SPI3_Init+0x74>)
 8001380:	2201      	movs	r2, #1
 8001382:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_SPI3_Init+0x74>)
 8001386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800138a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_SPI3_Init+0x74>)
 800138e:	2218      	movs	r2, #24
 8001390:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_SPI3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_SPI3_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_SPI3_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_SPI3_Init+0x74>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_SPI3_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_SPI3_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_SPI3_Init+0x74>)
 80013b8:	f003 fd48 	bl	8004e4c <HAL_SPI_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f7ff fe6f 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000144 	.word	0x20000144
 80013d0:	40003c00 	.word	0x40003c00

080013d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a17      	ldr	r2, [pc, #92]	@ (8001450 <HAL_SPI_MspInit+0x7c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d127      	bne.n	8001446 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <HAL_SPI_MspInit+0x80>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	4a16      	ldr	r2, [pc, #88]	@ (8001454 <HAL_SPI_MspInit+0x80>)
 80013fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001400:	6593      	str	r3, [r2, #88]	@ 0x58
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <HAL_SPI_MspInit+0x80>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_SPI_MspInit+0x80>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <HAL_SPI_MspInit+0x80>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_SPI_MspInit+0x80>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001426:	2338      	movs	r3, #56	@ 0x38
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001436:	2306      	movs	r3, #6
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <HAL_SPI_MspInit+0x84>)
 8001442:	f002 fa35 	bl	80038b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40003c00 	.word	0x40003c00
 8001454:	40021000 	.word	0x40021000
 8001458:	48000400 	.word	0x48000400

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_MspInit+0x44>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_MspInit+0x44>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6613      	str	r3, [r2, #96]	@ 0x60
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_MspInit+0x44>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_MspInit+0x44>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_MspInit+0x44>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6593      	str	r3, [r2, #88]	@ 0x58
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_MspInit+0x44>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 fbd3 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <DMA1_Channel1_IRQHandler+0x10>)
 800150a:	f002 f8f1 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000008c 	.word	0x2000008c

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <computeAllVoltages>:
float averageTemp;

int numValidTemps;

// ALL VOLTAGE CALCULATIONS!!!!!!
void computeAllVoltages() {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) rawADCBuffer, 8);
 8001540:	2208      	movs	r2, #8
 8001542:	4916      	ldr	r1, [pc, #88]	@ (800159c <computeAllVoltages+0x60>)
 8001544:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <computeAllVoltages+0x64>)
 8001546:	f000 fefb 	bl	8002340 <HAL_ADC_Start_DMA>
	  computeSTM_ADC_Voltages();
 800154a:	f000 f931 	bl	80017b0 <computeSTM_ADC_Voltages>

	  computeCH0(&MCP1);
 800154e:	4815      	ldr	r0, [pc, #84]	@ (80015a4 <computeAllVoltages+0x68>)
 8001550:	f7ff fe28 	bl	80011a4 <computeCH0>
	  computeCH1(&MCP1);
 8001554:	4813      	ldr	r0, [pc, #76]	@ (80015a4 <computeAllVoltages+0x68>)
 8001556:	f7ff fe3d 	bl	80011d4 <computeCH1>
	  computeCH2(&MCP1);
 800155a:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <computeAllVoltages+0x68>)
 800155c:	f7ff fe52 	bl	8001204 <computeCH2>
	  computeCH3(&MCP1);
 8001560:	4810      	ldr	r0, [pc, #64]	@ (80015a4 <computeAllVoltages+0x68>)
 8001562:	f7ff fe67 	bl	8001234 <computeCH3>

	  computeCH0(&MCP2);
 8001566:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <computeAllVoltages+0x6c>)
 8001568:	f7ff fe1c 	bl	80011a4 <computeCH0>
	  computeCH1(&MCP2);
 800156c:	480e      	ldr	r0, [pc, #56]	@ (80015a8 <computeAllVoltages+0x6c>)
 800156e:	f7ff fe31 	bl	80011d4 <computeCH1>
	  computeCH2(&MCP2);
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <computeAllVoltages+0x6c>)
 8001574:	f7ff fe46 	bl	8001204 <computeCH2>
	  computeCH3(&MCP2);
 8001578:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <computeAllVoltages+0x6c>)
 800157a:	f7ff fe5b 	bl	8001234 <computeCH3>

	  computeCH0(&MCP3);
 800157e:	480b      	ldr	r0, [pc, #44]	@ (80015ac <computeAllVoltages+0x70>)
 8001580:	f7ff fe10 	bl	80011a4 <computeCH0>
	  computeCH1(&MCP3);
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <computeAllVoltages+0x70>)
 8001586:	f7ff fe25 	bl	80011d4 <computeCH1>
	  computeCH2(&MCP3);
 800158a:	4808      	ldr	r0, [pc, #32]	@ (80015ac <computeAllVoltages+0x70>)
 800158c:	f7ff fe3a 	bl	8001204 <computeCH2>
	  computeCH3(&MCP3);
 8001590:	4806      	ldr	r0, [pc, #24]	@ (80015ac <computeAllVoltages+0x70>)
 8001592:	f7ff fe4f 	bl	8001234 <computeCH3>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000270 	.word	0x20000270
 80015a0:	20000028 	.word	0x20000028
 80015a4:	200001a8 	.word	0x200001a8
 80015a8:	200001d0 	.word	0x200001d0
 80015ac:	200001f8 	.word	0x200001f8

080015b0 <computeAllTemps>:

void computeAllTemps() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	  // Index i corresponds to TEMP i+1
	  temp_conversions[0] = voltageToTemp(MCP1.CH0_Voltage);
 80015b4:	4b78      	ldr	r3, [pc, #480]	@ (8001798 <computeAllTemps+0x1e8>)
 80015b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	f000 f937 	bl	8001830 <voltageToTemp>
 80015c2:	eef0 7a40 	vmov.f32	s15, s0
 80015c6:	4b75      	ldr	r3, [pc, #468]	@ (800179c <computeAllTemps+0x1ec>)
 80015c8:	edc3 7a00 	vstr	s15, [r3]
	  temp_conversions[1] = voltageToTemp(MCP1.CH1_Voltage);
 80015cc:	4b72      	ldr	r3, [pc, #456]	@ (8001798 <computeAllTemps+0x1e8>)
 80015ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	f000 f92b 	bl	8001830 <voltageToTemp>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
 80015de:	4b6f      	ldr	r3, [pc, #444]	@ (800179c <computeAllTemps+0x1ec>)
 80015e0:	edc3 7a01 	vstr	s15, [r3, #4]
	  temp_conversions[2] = voltageToTemp(MCP1.CH2_Voltage);
 80015e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001798 <computeAllTemps+0x1e8>)
 80015e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	f000 f91f 	bl	8001830 <voltageToTemp>
 80015f2:	eef0 7a40 	vmov.f32	s15, s0
 80015f6:	4b69      	ldr	r3, [pc, #420]	@ (800179c <computeAllTemps+0x1ec>)
 80015f8:	edc3 7a02 	vstr	s15, [r3, #8]
	  temp_conversions[3] = voltageToTemp(MCP1.CH3_Voltage);
 80015fc:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <computeAllTemps+0x1e8>)
 80015fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	f000 f913 	bl	8001830 <voltageToTemp>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	4b63      	ldr	r3, [pc, #396]	@ (800179c <computeAllTemps+0x1ec>)
 8001610:	edc3 7a03 	vstr	s15, [r3, #12]

	  temp_conversions[4] = voltageToTemp(MCP2.CH0_Voltage);
 8001614:	4b62      	ldr	r3, [pc, #392]	@ (80017a0 <computeAllTemps+0x1f0>)
 8001616:	edd3 7a05 	vldr	s15, [r3, #20]
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	f000 f907 	bl	8001830 <voltageToTemp>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	4b5d      	ldr	r3, [pc, #372]	@ (800179c <computeAllTemps+0x1ec>)
 8001628:	edc3 7a04 	vstr	s15, [r3, #16]
	  temp_conversions[5] = voltageToTemp(MCP2.CH1_Voltage);
 800162c:	4b5c      	ldr	r3, [pc, #368]	@ (80017a0 <computeAllTemps+0x1f0>)
 800162e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	f000 f8fb 	bl	8001830 <voltageToTemp>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	4b57      	ldr	r3, [pc, #348]	@ (800179c <computeAllTemps+0x1ec>)
 8001640:	edc3 7a05 	vstr	s15, [r3, #20]
	  temp_conversions[6] = voltageToTemp(MCP2.CH2_Voltage);
 8001644:	4b56      	ldr	r3, [pc, #344]	@ (80017a0 <computeAllTemps+0x1f0>)
 8001646:	edd3 7a07 	vldr	s15, [r3, #28]
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	f000 f8ef 	bl	8001830 <voltageToTemp>
 8001652:	eef0 7a40 	vmov.f32	s15, s0
 8001656:	4b51      	ldr	r3, [pc, #324]	@ (800179c <computeAllTemps+0x1ec>)
 8001658:	edc3 7a06 	vstr	s15, [r3, #24]
	  temp_conversions[7] = voltageToTemp(MCP2.CH3_Voltage);
 800165c:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <computeAllTemps+0x1f0>)
 800165e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	f000 f8e3 	bl	8001830 <voltageToTemp>
 800166a:	eef0 7a40 	vmov.f32	s15, s0
 800166e:	4b4b      	ldr	r3, [pc, #300]	@ (800179c <computeAllTemps+0x1ec>)
 8001670:	edc3 7a07 	vstr	s15, [r3, #28]

	  temp_conversions[8] = voltageToTemp(MCP3.CH0_Voltage);
 8001674:	4b4b      	ldr	r3, [pc, #300]	@ (80017a4 <computeAllTemps+0x1f4>)
 8001676:	edd3 7a05 	vldr	s15, [r3, #20]
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	f000 f8d7 	bl	8001830 <voltageToTemp>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	4b45      	ldr	r3, [pc, #276]	@ (800179c <computeAllTemps+0x1ec>)
 8001688:	edc3 7a08 	vstr	s15, [r3, #32]
	  temp_conversions[9] = voltageToTemp(MCP3.CH1_Voltage);
 800168c:	4b45      	ldr	r3, [pc, #276]	@ (80017a4 <computeAllTemps+0x1f4>)
 800168e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	f000 f8cb 	bl	8001830 <voltageToTemp>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <computeAllTemps+0x1ec>)
 80016a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	  temp_conversions[10] = voltageToTemp(MCP3.CH2_Voltage);
 80016a4:	4b3f      	ldr	r3, [pc, #252]	@ (80017a4 <computeAllTemps+0x1f4>)
 80016a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	f000 f8bf 	bl	8001830 <voltageToTemp>
 80016b2:	eef0 7a40 	vmov.f32	s15, s0
 80016b6:	4b39      	ldr	r3, [pc, #228]	@ (800179c <computeAllTemps+0x1ec>)
 80016b8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	  temp_conversions[11] = voltageToTemp(MCP3.CH3_Voltage);
 80016bc:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <computeAllTemps+0x1f4>)
 80016be:	edd3 7a08 	vldr	s15, [r3, #32]
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	f000 f8b3 	bl	8001830 <voltageToTemp>
 80016ca:	eef0 7a40 	vmov.f32	s15, s0
 80016ce:	4b33      	ldr	r3, [pc, #204]	@ (800179c <computeAllTemps+0x1ec>)
 80016d0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	  temp_conversions[12] = voltageToTemp(voltageBuffer[0]);
 80016d4:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <computeAllTemps+0x1f8>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	f000 f8a7 	bl	8001830 <voltageToTemp>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
 80016e6:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <computeAllTemps+0x1ec>)
 80016e8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	  temp_conversions[13] = voltageToTemp(voltageBuffer[1]);
 80016ec:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <computeAllTemps+0x1f8>)
 80016ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f2:	eeb0 0a67 	vmov.f32	s0, s15
 80016f6:	f000 f89b 	bl	8001830 <voltageToTemp>
 80016fa:	eef0 7a40 	vmov.f32	s15, s0
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <computeAllTemps+0x1ec>)
 8001700:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	  temp_conversions[14] = voltageToTemp(voltageBuffer[2]);
 8001704:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <computeAllTemps+0x1f8>)
 8001706:	edd3 7a02 	vldr	s15, [r3, #8]
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	f000 f88f 	bl	8001830 <voltageToTemp>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <computeAllTemps+0x1ec>)
 8001718:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	  temp_conversions[15] = voltageToTemp(voltageBuffer[3]);
 800171c:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <computeAllTemps+0x1f8>)
 800171e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	f000 f883 	bl	8001830 <voltageToTemp>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <computeAllTemps+0x1ec>)
 8001730:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	  temp_conversions[16] = voltageToTemp(voltageBuffer[4]);
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <computeAllTemps+0x1f8>)
 8001736:	edd3 7a04 	vldr	s15, [r3, #16]
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	f000 f877 	bl	8001830 <voltageToTemp>
 8001742:	eef0 7a40 	vmov.f32	s15, s0
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <computeAllTemps+0x1ec>)
 8001748:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	  temp_conversions[17] = voltageToTemp(voltageBuffer[5]);
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <computeAllTemps+0x1f8>)
 800174e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	f000 f86b 	bl	8001830 <voltageToTemp>
 800175a:	eef0 7a40 	vmov.f32	s15, s0
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <computeAllTemps+0x1ec>)
 8001760:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	  temp_conversions[18] = voltageToTemp(voltageBuffer[6]);
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <computeAllTemps+0x1f8>)
 8001766:	edd3 7a06 	vldr	s15, [r3, #24]
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	f000 f85f 	bl	8001830 <voltageToTemp>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <computeAllTemps+0x1ec>)
 8001778:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	  temp_conversions[19] = voltageToTemp(voltageBuffer[7]);
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <computeAllTemps+0x1f8>)
 800177e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	f000 f853 	bl	8001830 <voltageToTemp>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
 800178e:	4b03      	ldr	r3, [pc, #12]	@ (800179c <computeAllTemps+0x1ec>)
 8001790:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200001a8 	.word	0x200001a8
 800179c:	20000220 	.word	0x20000220
 80017a0:	200001d0 	.word	0x200001d0
 80017a4:	200001f8 	.word	0x200001f8
 80017a8:	20000280 	.word	0x20000280
 80017ac:	00000000 	.word	0x00000000

080017b0 <computeSTM_ADC_Voltages>:

void computeSTM_ADC_Voltages() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < 8; i++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	e023      	b.n	8001804 <computeSTM_ADC_Voltages+0x54>
		voltageBuffer[i] = (rawADCBuffer[i] * ADC_VREF)/4095.0;
 80017bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001828 <computeSTM_ADC_Voltages+0x78>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe55 	bl	8000474 <__aeabi_i2d>
 80017ca:	a313      	add	r3, pc, #76	@ (adr r3, 8001818 <computeSTM_ADC_Voltages+0x68>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe feba 	bl	8000548 <__aeabi_dmul>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	a310      	add	r3, pc, #64	@ (adr r3, 8001820 <computeSTM_ADC_Voltages+0x70>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ffdb 	bl	800079c <__aeabi_ddiv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff f8bd 	bl	800096c <__aeabi_d2f>
 80017f2:	4602      	mov	r2, r0
 80017f4:	490d      	ldr	r1, [pc, #52]	@ (800182c <computeSTM_ADC_Voltages+0x7c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < 8; i++) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3301      	adds	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b07      	cmp	r3, #7
 8001808:	d9d8      	bls.n	80017bc <computeSTM_ADC_Voltages+0xc>
	}
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	f3af 8000 	nop.w
 8001818:	a7ef9db2 	.word	0xa7ef9db2
 800181c:	400b4bc6 	.word	0x400b4bc6
 8001820:	00000000 	.word	0x00000000
 8001824:	40affe00 	.word	0x40affe00
 8001828:	20000270 	.word	0x20000270
 800182c:	20000280 	.word	0x20000280

08001830 <voltageToTemp>:

float voltageToTemp(float V) {
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0a01 	vstr	s0, [r7, #4]
	if (V > voltage_table[0] || V < voltage_table[32]) {
 800183a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800191c <voltageToTemp+0xec>
 800183e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dc08      	bgt.n	800185e <voltageToTemp+0x2e>
 800184c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001920 <voltageToTemp+0xf0>
 8001850:	edd7 7a01 	vldr	s15, [r7, #4]
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d501      	bpl.n	8001862 <voltageToTemp+0x32>
		return 999.0; // Out of range
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <voltageToTemp+0xf4>)
 8001860:	e053      	b.n	800190a <voltageToTemp+0xda>
	}

	for (size_t i = 0; i < 32; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e04c      	b.n	8001902 <voltageToTemp+0xd2>
		float v_high = voltage_table[i];      // higher voltage, lower temp
 8001868:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <voltageToTemp+0xf8>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61bb      	str	r3, [r7, #24]
		float v_low = voltage_table[i + 1];   // lower voltage, higher temp
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	3301      	adds	r3, #1
 8001878:	4a2b      	ldr	r2, [pc, #172]	@ (8001928 <voltageToTemp+0xf8>)
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	617b      	str	r3, [r7, #20]

		if (V <= v_high && V >= v_low) {
 8001882:	ed97 7a01 	vldr	s14, [r7, #4]
 8001886:	edd7 7a06 	vldr	s15, [r7, #24]
 800188a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	d833      	bhi.n	80018fc <voltageToTemp+0xcc>
 8001894:	ed97 7a01 	vldr	s14, [r7, #4]
 8001898:	edd7 7a05 	vldr	s15, [r7, #20]
 800189c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	db2a      	blt.n	80018fc <voltageToTemp+0xcc>
			float t_high = temp_table[i];
 80018a6:	4a21      	ldr	r2, [pc, #132]	@ (800192c <voltageToTemp+0xfc>)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	613b      	str	r3, [r7, #16]
			float t_low = temp_table[i + 1];
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <voltageToTemp+0xfc>)
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60fb      	str	r3, [r7, #12]

			// Linear interpolation
			float temp = t_high + (V - v_high) * (t_low - t_high) / (v_low - v_high);
 80018c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80018c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018cc:	edd7 6a03 	vldr	s13, [r7, #12]
 80018d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80018e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80018f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f4:	edc7 7a02 	vstr	s15, [r7, #8]
			return temp;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	e006      	b.n	800190a <voltageToTemp+0xda>
	for (size_t i = 0; i < 32; i++) {
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	3301      	adds	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b1f      	cmp	r3, #31
 8001906:	d9af      	bls.n	8001868 <voltageToTemp+0x38>
		}
	}

	return 999.0; // Should not reach here
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <voltageToTemp+0xf4>)
}
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb0 0a67 	vmov.f32	s0, s15
 8001912:	3724      	adds	r7, #36	@ 0x24
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	401c28f6 	.word	0x401c28f6
 8001920:	3fa66666 	.word	0x3fa66666
 8001924:	4479c000 	.word	0x4479c000
 8001928:	08005748 	.word	0x08005748
 800192c:	080057cc 	.word	0x080057cc

08001930 <getLowestTemp>:

void getLowestTemp() {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
	float min = FLT_MAX;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <getLowestTemp+0x54>)
 8001938:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	e015      	b.n	800196c <getLowestTemp+0x3c>
		if (temp_conversions[i] < min) min = temp_conversions[i];
 8001940:	4a11      	ldr	r2, [pc, #68]	@ (8001988 <getLowestTemp+0x58>)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	dd05      	ble.n	8001966 <getLowestTemp+0x36>
 800195a:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <getLowestTemp+0x58>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b13      	cmp	r3, #19
 8001970:	d9e6      	bls.n	8001940 <getLowestTemp+0x10>
	}
	lowestTemp = min;
 8001972:	4a06      	ldr	r2, [pc, #24]	@ (800198c <getLowestTemp+0x5c>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	7f7fffff 	.word	0x7f7fffff
 8001988:	20000220 	.word	0x20000220
 800198c:	200002a4 	.word	0x200002a4

08001990 <getHighestTemp>:

void getHighestTemp() {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
	float max = -FLT_MAX;
 8001996:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 800199a:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 800199c:	2300      	movs	r3, #0
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	e022      	b.n	80019e8 <getHighestTemp+0x58>
		if (temp_conversions[i] > max && temp_conversions[i] < 999) max = temp_conversions[i];
 80019a2:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <getHighestTemp+0x70>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	d512      	bpl.n	80019e2 <getHighestTemp+0x52>
 80019bc:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <getHighestTemp+0x70>)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001a04 <getHighestTemp+0x74>
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d505      	bpl.n	80019e2 <getHighestTemp+0x52>
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <getHighestTemp+0x70>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < 20; i++) {
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b13      	cmp	r3, #19
 80019ec:	d9d9      	bls.n	80019a2 <getHighestTemp+0x12>
	}
	highestTemp = max;
 80019ee:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <getHighestTemp+0x78>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000220 	.word	0x20000220
 8001a04:	4479c000 	.word	0x4479c000
 8001a08:	200002a0 	.word	0x200002a0

08001a0c <getAverageTemp>:

void getAverageTemp() {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
	int count = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
	float sum = 0;
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
	for (size_t i = 0; i < 20; i++) {
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	e01e      	b.n	8001a60 <getAverageTemp+0x54>
		if (temp_conversions[i] < 999) {
 8001a22:	4a1c      	ldr	r2, [pc, #112]	@ (8001a94 <getAverageTemp+0x88>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001a98 <getAverageTemp+0x8c>
 8001a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	d50e      	bpl.n	8001a5a <getAverageTemp+0x4e>
			sum+=temp_conversions[i];
 8001a3c:	4a15      	ldr	r2, [pc, #84]	@ (8001a94 <getAverageTemp+0x88>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	edc7 7a02 	vstr	s15, [r7, #8]
			count++;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < 20; i++) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b13      	cmp	r3, #19
 8001a64:	d9dd      	bls.n	8001a22 <getAverageTemp+0x16>
		}
	}
	numValidTemps = count; // Reset the value of numValidTemps based on this new count
 8001a66:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <getAverageTemp+0x90>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6013      	str	r3, [r2, #0]
	averageTemp = (sum/numValidTemps);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <getAverageTemp+0x90>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a78:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a80:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <getAverageTemp+0x94>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000220 	.word	0x20000220
 8001a98:	4479c000 	.word	0x4479c000
 8001a9c:	200002ac 	.word	0x200002ac
 8001aa0:	200002a8 	.word	0x200002a8

08001aa4 <formAddressDataframe>:

// CAN DATAFRAME IMPLEMENTATIONS
void formAddressDataframe(J1939_ADDRESS_BROADCAST_DF* dataframe) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	dataframe->data.j1931_address_b1 = 0xF3;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	22f3      	movs	r2, #243	@ 0xf3
 8001ab0:	701a      	strb	r2, [r3, #0]
	dataframe->data.j1931_address_b2 = 0x00;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	705a      	strb	r2, [r3, #1]
	dataframe->data.j1931_address_b3 = 0x80;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2280      	movs	r2, #128	@ 0x80
 8001abc:	709a      	strb	r2, [r3, #2]
	dataframe->data.bms_address = 0xF3;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	22f3      	movs	r2, #243	@ 0xf3
 8001ac2:	70da      	strb	r2, [r3, #3]
//	dataframe->data.thermistor_module_number_shifted = (MODULE_NUMBER << 3);
	dataframe->data.thermistor_module_number_shifted = ((MODULE_NUMBER-1) << 3);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	711a      	strb	r2, [r3, #4]
	dataframe->data.c1 = 0x40;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2240      	movs	r2, #64	@ 0x40
 8001ace:	715a      	strb	r2, [r3, #5]
	dataframe->data.c2 = 0x1E;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	221e      	movs	r2, #30
 8001ad4:	719a      	strb	r2, [r3, #6]
	dataframe->data.c3 = 0x90;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2290      	movs	r2, #144	@ 0x90
 8001ada:	71da      	strb	r2, [r3, #7]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <formThermistorDataframe>:

void formThermistorDataframe(THERMISTOR_BMS_BROADCAST_DF* dataframe) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	// Do all the necessary calculations
	computeAllVoltages();
 8001af0:	f7ff fd24 	bl	800153c <computeAllVoltages>
	computeAllTemps();
 8001af4:	f7ff fd5c 	bl	80015b0 <computeAllTemps>

	getLowestTemp();
 8001af8:	f7ff ff1a 	bl	8001930 <getLowestTemp>
	getHighestTemp();
 8001afc:	f7ff ff48 	bl	8001990 <getHighestTemp>
	getAverageTemp();
 8001b00:	f7ff ff84 	bl	8001a0c <getAverageTemp>

	uint8_t checksum = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]

	// Now prepare the dataframe!
//	dataframe->data.thermistor_module_number = MODULE_NUMBER;
	dataframe->data.thermistor_module_number = (MODULE_NUMBER-1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	701a      	strb	r2, [r3, #0]
	dataframe->data.lowest_temp_value = (int8_t)lowestTemp;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <formThermistorDataframe+0xb4>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b18:	edc7 7a00 	vstr	s15, [r7]
 8001b1c:	783b      	ldrb	r3, [r7, #0]
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	705a      	strb	r2, [r3, #1]
	dataframe->data.highest_temp_value = (int8_t)highestTemp;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <formThermistorDataframe+0xb8>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2e:	edc7 7a00 	vstr	s15, [r7]
 8001b32:	783b      	ldrb	r3, [r7, #0]
 8001b34:	b25a      	sxtb	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	709a      	strb	r2, [r3, #2]
	dataframe->data.average_temp_value = (int8_t)averageTemp;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <formThermistorDataframe+0xbc>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b44:	edc7 7a00 	vstr	s15, [r7]
 8001b48:	783b      	ldrb	r3, [r7, #0]
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	70da      	strb	r2, [r3, #3]
	dataframe->data.num_thermistors = NUM_THERMISTORS;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2214      	movs	r2, #20
 8001b54:	711a      	strb	r2, [r3, #4]
	dataframe->data.highest_thermistor_id = THERMISTOR_HIGHEST_INDEX;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2213      	movs	r2, #19
 8001b5a:	715a      	strb	r2, [r3, #5]
	dataframe->data.lowest_thermistor_id = THERMISTOR_LOWEST_INDEX;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	719a      	strb	r2, [r3, #6]

	for (size_t i = 0; i < 7; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	e009      	b.n	8001b7c <formThermistorDataframe+0x94>
		checksum+=dataframe->array[i];
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	4413      	add	r3, r2
 8001b74:	73fb      	strb	r3, [r7, #15]
	for (size_t i = 0; i < 7; i++) {
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d9f2      	bls.n	8001b68 <formThermistorDataframe+0x80>
	}
	checksum+=0x39;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	3339      	adds	r3, #57	@ 0x39
 8001b86:	73fb      	strb	r3, [r7, #15]
	checksum+=8;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	73fb      	strb	r3, [r7, #15]

	dataframe->data.checksum = checksum;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	71da      	strb	r2, [r3, #7]
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200002a4 	.word	0x200002a4
 8001ba0:	200002a0 	.word	0x200002a0
 8001ba4:	200002a8 	.word	0x200002a8

08001ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bac:	f7ff fcb4 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb2:	490d      	ldr	r1, [pc, #52]	@ (8001be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <LoopForever+0xe>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf4 <LoopForever+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f003 fd67 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bda:	f7ff f98f 	bl	8000efc <main>

08001bde <LoopForever>:

LoopForever:
    b LoopForever
 8001bde:	e7fe      	b.n	8001bde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bec:	08005858 	.word	0x08005858
  ldr r2, =_sbss
 8001bf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bf4:	200002b4 	.word	0x200002b4

08001bf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_IRQHandler>

08001bfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f001 fc19 	bl	800343c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f80e 	bl	8001c2c <HAL_InitTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	e001      	b.n	8001c20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c1c:	f7ff fc1e 	bl	800145c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c38:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <HAL_InitTick+0x6c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d023      	beq.n	8001c88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <HAL_InitTick+0x70>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_InitTick+0x6c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fc25 	bl	80034a6 <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d809      	bhi.n	8001c7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c70:	f001 fbef 	bl	8003452 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_InitTick+0x74>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e007      	b.n	8001c8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e004      	b.n	8001c8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e001      	b.n	8001c8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	200002b0 	.word	0x200002b0

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200002b0 	.word	0x200002b0

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008

08001d2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3360      	adds	r3, #96	@ 0x60
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <LL_ADC_SetOffset+0x44>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dcc:	bf00      	nop
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	03fff000 	.word	0x03fff000

08001ddc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3360      	adds	r3, #96	@ 0x60
 8001dea:	461a      	mov	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3360      	adds	r3, #96	@ 0x60
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3330      	adds	r3, #48	@ 0x30
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	4413      	add	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	211f      	movs	r1, #31
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0e9b      	lsrs	r3, r3, #26
 8001e9c:	f003 011f 	and.w	r1, r3, #31
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3314      	adds	r3, #20
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0e5b      	lsrs	r3, r3, #25
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	4413      	add	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0d1b      	lsrs	r3, r3, #20
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2107      	movs	r1, #7
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	0d1b      	lsrs	r3, r3, #20
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0318 	and.w	r3, r3, #24
 8001f36:	4908      	ldr	r1, [pc, #32]	@ (8001f58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f38:	40d9      	lsrs	r1, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	431a      	orrs	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	0007ffff 	.word	0x0007ffff

08001f5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6093      	str	r3, [r2, #8]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fe4:	d101      	bne.n	8001fea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002008:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <LL_ADC_IsEnabled+0x18>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_ADC_IsEnabled+0x1a>
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002056:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b04      	cmp	r3, #4
 8002080:	d101      	bne.n	8002086 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d101      	bne.n	80020ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e126      	b.n	8002324 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7fe fd69 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff3f 	bl	8001f80 <LL_ADC_IsDeepPowerDownEnabled>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff25 	bl	8001f5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff5a 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff3e 	bl	8001fa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800212c:	4b7f      	ldr	r3, [pc, #508]	@ (800232c <HAL_ADC_Init+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	4a7f      	ldr	r2, [pc, #508]	@ (8002330 <HAL_ADC_Init+0x274>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	3301      	adds	r3, #1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002140:	e002      	b.n	8002148 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff3c 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff75 	bl	800206e <LL_ADC_REG_IsConversionOngoing>
 8002184:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 80bf 	bne.w	8002312 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 80bb 	bne.w	8002312 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021a4:	f043 0202 	orr.w	r2, r3, #2
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff35 	bl	8002020 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021bc:	485d      	ldr	r0, [pc, #372]	@ (8002334 <HAL_ADC_Init+0x278>)
 80021be:	f7ff ff2f 	bl	8002020 <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4619      	mov	r1, r3
 80021ce:	485a      	ldr	r0, [pc, #360]	@ (8002338 <HAL_ADC_Init+0x27c>)
 80021d0:	f7ff fdac 	bl	8001d2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e5b      	ldrb	r3, [r3, #25]
 80021d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d106      	bne.n	8002210 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	3b01      	subs	r3, #1
 8002208:	045b      	lsls	r3, r3, #17
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	4b42      	ldr	r3, [pc, #264]	@ (800233c <HAL_ADC_Init+0x280>)
 8002234:	4013      	ands	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	430b      	orrs	r3, r1
 800223e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff25 	bl	8002094 <LL_ADC_INJ_IsConversionOngoing>
 800224a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d13d      	bne.n	80022ce <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d13a      	bne.n	80022ce <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800225c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002264:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002274:	f023 0302 	bic.w	r3, r3, #2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	69b9      	ldr	r1, [r7, #24]
 800227e:	430b      	orrs	r3, r1
 8002280:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002288:	2b01      	cmp	r3, #1
 800228a:	d118      	bne.n	80022be <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022ae:	430a      	orrs	r2, r1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	e007      	b.n	80022ce <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10c      	bne.n	80022f0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	f023 010f 	bic.w	r1, r3, #15
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	1e5a      	subs	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ee:	e007      	b.n	8002300 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 020f 	bic.w	r2, r2, #15
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f023 0303 	bic.w	r3, r3, #3
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002310:	e007      	b.n	8002322 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002322:	7ffb      	ldrb	r3, [r7, #31]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000000 	.word	0x20000000
 8002330:	053e2d63 	.word	0x053e2d63
 8002334:	50040000 	.word	0x50040000
 8002338:	50040300 	.word	0x50040300
 800233c:	fff0c007 	.word	0xfff0c007

08002340 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fe8c 	bl	800206e <LL_ADC_REG_IsConversionOngoing>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d167      	bne.n	800242c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADC_Start_DMA+0x2a>
 8002366:	2302      	movs	r3, #2
 8002368:	e063      	b.n	8002432 <HAL_ADC_Start_DMA+0xf2>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fc68 	bl	8002c48 <ADC_Enable>
 8002378:	4603      	mov	r3, r0
 800237a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d14f      	bne.n	8002422 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002386:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	f023 0206 	bic.w	r2, r3, #6
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80023ae:	e002      	b.n	80023b6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	4a20      	ldr	r2, [pc, #128]	@ (800243c <HAL_ADC_Start_DMA+0xfc>)
 80023bc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002440 <HAL_ADC_Start_DMA+0x100>)
 80023c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002444 <HAL_ADC_Start_DMA+0x104>)
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	221c      	movs	r2, #28
 80023d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0210 	orr.w	r2, r2, #16
 80023ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3340      	adds	r3, #64	@ 0x40
 8002408:	4619      	mov	r1, r3
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f001 f90f 	bl	8003630 <HAL_DMA_Start_IT>
 8002412:	4603      	mov	r3, r0
 8002414:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fe13 	bl	8002046 <LL_ADC_REG_StartConversion>
 8002420:	e006      	b.n	8002430 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800242a:	e001      	b.n	8002430 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800242c:	2302      	movs	r3, #2
 800242e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	08002d55 	.word	0x08002d55
 8002440:	08002e2d 	.word	0x08002e2d
 8002444:	08002e49 	.word	0x08002e49

08002448 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0b6      	sub	sp, #216	@ 0xd8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x22>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e3bb      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x79a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fddb 	bl	800206e <LL_ADC_REG_IsConversionOngoing>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 83a0 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d824      	bhi.n	800251a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	3b02      	subs	r3, #2
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d81b      	bhi.n	8002512 <HAL_ADC_ConfigChannel+0x8e>
 80024da:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <HAL_ADC_ConfigChannel+0x5c>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	080024f9 	.word	0x080024f9
 80024e8:	08002501 	.word	0x08002501
 80024ec:	08002509 	.word	0x08002509
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024f0:	230c      	movs	r3, #12
 80024f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024f6:	e010      	b.n	800251a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024f8:	2312      	movs	r3, #18
 80024fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024fe:	e00c      	b.n	800251a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002500:	2318      	movs	r3, #24
 8002502:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002506:	e008      	b.n	800251a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800250c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002510:	e003      	b.n	800251a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002512:	2306      	movs	r3, #6
 8002514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002518:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002528:	f7ff fc9c 	bl	8001e64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd9c 	bl	800206e <LL_ADC_REG_IsConversionOngoing>
 8002536:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fda8 	bl	8002094 <LL_ADC_INJ_IsConversionOngoing>
 8002544:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 81a4 	bne.w	800289a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 819f 	bne.w	800289a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	461a      	mov	r2, r3
 800256a:	f7ff fca7 	bl	8001ebc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d00a      	beq.n	80025a6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6919      	ldr	r1, [r3, #16]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025a0:	f7ff fbf8 	bl	8001d94 <LL_ADC_SetOffset>
 80025a4:	e179      	b.n	800289a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fc15 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x14e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fc0a 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	e01e      	b.n	8002610 <HAL_ADC_ConfigChannel+0x18c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fbff 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e004      	b.n	800260e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1a4>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	e018      	b.n	800265a <HAL_ADC_ConfigChannel+0x1d6>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800263c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002640:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e004      	b.n	800265a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800265a:	429a      	cmp	r2, r3
 800265c:	d106      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fbce 	bl	8001e08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fbb2 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x214>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fba7 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	e01e      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x252>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fb9c 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e004      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x26a>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	e018      	b.n	8002720 <HAL_ADC_ConfigChannel+0x29c>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002702:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002706:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800270a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e004      	b.n	8002720 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002716:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002720:	429a      	cmp	r2, r3
 8002722:	d106      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	2101      	movs	r1, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fb6b 	bl	8001e08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fb4f 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_ADC_ConfigChannel+0x2da>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2102      	movs	r1, #2
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fb44 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	0e9b      	lsrs	r3, r3, #26
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	e01e      	b.n	800279c <HAL_ADC_ConfigChannel+0x318>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2102      	movs	r1, #2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fb39 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800277c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e004      	b.n	800279a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x330>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	e014      	b.n	80027de <HAL_ADC_ConfigChannel+0x35a>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e004      	b.n	80027de <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80027d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027de:	429a      	cmp	r2, r3
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fb0c 	bl	8001e08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff faf0 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x398>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fae5 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 021f 	and.w	r2, r3, #31
 800281a:	e017      	b.n	800284c <HAL_ADC_ConfigChannel+0x3c8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fada 	bl	8001ddc <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002836:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x3e0>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	e011      	b.n	8002888 <HAL_ADC_ConfigChannel+0x404>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002874:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002876:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002888:	429a      	cmp	r2, r3
 800288a:	d106      	bne.n	800289a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	2103      	movs	r1, #3
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fab7 	bl	8001e08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fbbe 	bl	8002020 <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8140 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f7ff fb2b 	bl	8001f14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4a8f      	ldr	r2, [pc, #572]	@ (8002b00 <HAL_ADC_ConfigChannel+0x67c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f040 8131 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10b      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x46e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2b09      	cmp	r3, #9
 80028e8:	bf94      	ite	ls
 80028ea:	2301      	movls	r3, #1
 80028ec:	2300      	movhi	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	e019      	b.n	8002926 <HAL_ADC_ConfigChannel+0x4a2>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002902:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e003      	b.n	8002916 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800290e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2b09      	cmp	r3, #9
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002926:	2b00      	cmp	r3, #0
 8002928:	d079      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x4c2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002944:	e015      	b.n	8002972 <HAL_ADC_ConfigChannel+0x4ee>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002956:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e003      	b.n	800296a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3301      	adds	r3, #1
 800296c:	069b      	lsls	r3, r3, #26
 800296e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x50e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	e017      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x53e>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	ea42 0103 	orr.w	r1, r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x564>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 021f 	and.w	r2, r3, #31
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	051b      	lsls	r3, r3, #20
 80029e6:	e018      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x596>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	e081      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x5b6>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	3301      	adds	r3, #1
 8002a32:	069b      	lsls	r3, r3, #26
 8002a34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a38:	e015      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x5e2>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a52:	2320      	movs	r3, #32
 8002a54:	e003      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	069b      	lsls	r3, r3, #26
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x602>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	e017      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x632>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	61bb      	str	r3, [r7, #24]
  return result;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	ea42 0103 	orr.w	r1, r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x65e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 021f 	and.w	r2, r3, #31
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ae0:	e01e      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x69c>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	60fb      	str	r3, [r7, #12]
  return result;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e006      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x688>
 8002afe:	bf00      	nop
 8002b00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	051b      	lsls	r3, r3, #20
 8002b1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7ff f9c8 	bl	8001ebc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7a4>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d06c      	beq.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b38:	483c      	ldr	r0, [pc, #240]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7a8>)
 8002b3a:	f7ff f91d 	bl	8001d78 <LL_ADC_GetCommonPathInternalCh>
 8002b3e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a3a      	ldr	r2, [pc, #232]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d127      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d121      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a35      	ldr	r2, [pc, #212]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d157      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	482f      	ldr	r0, [pc, #188]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7a8>)
 8002b6e:	f7ff f8f0 	bl	8001d52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b72:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7b8>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b8c:	e002      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f9      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b9a:	e03a      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a27      	ldr	r2, [pc, #156]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d113      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7b0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d12a      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7a8>)
 8002bc8:	f7ff f8c3 	bl	8001d52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bcc:	e021      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c44 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d11c      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d116      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7b0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d111      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	480c      	ldr	r0, [pc, #48]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7a8>)
 8002bfa:	f7ff f8aa 	bl	8001d52 <LL_ADC_SetCommonPathInternalCh>
 8002bfe:	e008      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	37d8      	adds	r7, #216	@ 0xd8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	80080000 	.word	0x80080000
 8002c2c:	50040300 	.word	0x50040300
 8002c30:	c7520000 	.word	0xc7520000
 8002c34:	50040000 	.word	0x50040000
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	053e2d63 	.word	0x053e2d63
 8002c40:	cb840000 	.word	0xcb840000
 8002c44:	80000001 	.word	0x80000001

08002c48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f9e1 	bl	8002020 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d169      	bne.n	8002d38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <ADC_Enable+0xfc>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e055      	b.n	8002d3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff f9b0 	bl	8001ff8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c98:	482b      	ldr	r0, [pc, #172]	@ (8002d48 <ADC_Enable+0x100>)
 8002c9a:	f7ff f86d 	bl	8001d78 <LL_ADC_GetCommonPathInternalCh>
 8002c9e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <ADC_Enable+0x104>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <ADC_Enable+0x108>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cc2:	e002      	b.n	8002cca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f9      	bne.n	8002cc4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fffc 	bl	8001ccc <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd6:	e028      	b.n	8002d2a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff f99f 	bl	8002020 <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f983 	bl	8001ff8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cf2:	f7fe ffeb 	bl	8001ccc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d914      	bls.n	8002d2a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d00d      	beq.n	8002d2a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e007      	b.n	8002d3a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d1cf      	bne.n	8002cd8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	8000003f 	.word	0x8000003f
 8002d48:	50040300 	.word	0x50040300
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	053e2d63 	.word	0x053e2d63

08002d54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d66:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d14b      	bne.n	8002e06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d021      	beq.n	8002dcc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f856 	bl	8001e3e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d032      	beq.n	8002dfe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d12b      	bne.n	8002dfe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d11f      	bne.n	8002dfe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002dca:	e018      	b.n	8002dfe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d111      	bne.n	8002dfe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff fb22 	bl	8002448 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e04:	e00e      	b.n	8002e24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff fb2c 	bl	8002470 <HAL_ADC_ErrorCallback>
}
 8002e18:	e004      	b.n	8002e24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7ff fb0e 	bl	800245c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	f043 0204 	orr.w	r2, r3, #4
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff fafe 	bl	8002470 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0ed      	b.n	800306a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd ff58 	bl	8000d50 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb0:	f7fe ff0c 	bl	8001ccc <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb6:	e012      	b.n	8002ede <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb8:	f7fe ff08 	bl	8001ccc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b0a      	cmp	r3, #10
 8002ec4:	d90b      	bls.n	8002ede <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0c5      	b.n	800306a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0e5      	beq.n	8002eb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0202 	bic.w	r2, r2, #2
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002efc:	f7fe fee6 	bl	8001ccc <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f02:	e012      	b.n	8002f2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f04:	f7fe fee2 	bl	8001ccc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b0a      	cmp	r3, #10
 8002f10:	d90b      	bls.n	8002f2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2205      	movs	r2, #5
 8002f22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e09f      	b.n	800306a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7e1b      	ldrb	r3, [r3, #24]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e007      	b.n	8002f62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7e5b      	ldrb	r3, [r3, #25]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d108      	bne.n	8002f7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e9b      	ldrb	r3, [r3, #26]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d108      	bne.n	8002fa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0220 	orr.w	r2, r2, #32
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0220 	bic.w	r2, r2, #32
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7edb      	ldrb	r3, [r3, #27]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0210 	bic.w	r2, r2, #16
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e007      	b.n	8002fe0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0210 	orr.w	r2, r2, #16
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7f1b      	ldrb	r3, [r3, #28]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d108      	bne.n	8002ffa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e007      	b.n	800300a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7f5b      	ldrb	r3, [r3, #29]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0204 	orr.w	r2, r2, #4
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e007      	b.n	8003034 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	ea42 0103 	orr.w	r1, r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d12e      	bne.n	80030e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800309e:	f7fe fe15 	bl	8001ccc <HAL_GetTick>
 80030a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030a4:	e012      	b.n	80030cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030a6:	f7fe fe11 	bl	8001ccc <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b0a      	cmp	r3, #10
 80030b2:	d90b      	bls.n	80030cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2205      	movs	r2, #5
 80030c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e012      	b.n	80030f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e5      	bne.n	80030a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e006      	b.n	80030f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b089      	sub	sp, #36	@ 0x24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003118:	7ffb      	ldrb	r3, [r7, #31]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d003      	beq.n	8003126 <HAL_CAN_AddTxMessage+0x2c>
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b02      	cmp	r3, #2
 8003122:	f040 80ad 	bne.w	8003280 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8095 	beq.w	8003270 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	0e1b      	lsrs	r3, r3, #24
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003150:	2201      	movs	r2, #1
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	409a      	lsls	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800316c:	68f9      	ldr	r1, [r7, #12]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	431a      	orrs	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3318      	adds	r3, #24
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	440b      	add	r3, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e00f      	b.n	800319e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003188:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003192:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3318      	adds	r3, #24
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	440b      	add	r3, r1
 800319c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3318      	adds	r3, #24
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	440b      	add	r3, r1
 80031ae:	3304      	adds	r3, #4
 80031b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	7d1b      	ldrb	r3, [r3, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d111      	bne.n	80031de <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3318      	adds	r3, #24
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	4413      	add	r3, r2
 80031c6:	3304      	adds	r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6811      	ldr	r1, [r2, #0]
 80031ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3318      	adds	r3, #24
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	440b      	add	r3, r1
 80031da:	3304      	adds	r3, #4
 80031dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3307      	adds	r3, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	061a      	lsls	r2, r3, #24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3306      	adds	r3, #6
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3305      	adds	r3, #5
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4313      	orrs	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	3204      	adds	r2, #4
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	4610      	mov	r0, r2
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6811      	ldr	r1, [r2, #0]
 8003206:	ea43 0200 	orr.w	r2, r3, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	440b      	add	r3, r1
 8003210:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003214:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3303      	adds	r3, #3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	061a      	lsls	r2, r3, #24
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3302      	adds	r3, #2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3301      	adds	r3, #1
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	4313      	orrs	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	4610      	mov	r0, r2
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	6811      	ldr	r1, [r2, #0]
 800323c:	ea43 0200 	orr.w	r2, r3, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	440b      	add	r3, r1
 8003246:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800324a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3318      	adds	r3, #24
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	6811      	ldr	r1, [r2, #0]
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3318      	adds	r3, #24
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	440b      	add	r3, r1
 800326a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e00e      	b.n	800328e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e006      	b.n	800328e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	@ 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ac:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ce:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	60d3      	str	r3, [r2, #12]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <__NVIC_GetPriorityGrouping+0x18>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 0307 	and.w	r3, r3, #7
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db0b      	blt.n	800332a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4907      	ldr	r1, [pc, #28]	@ (8003338 <__NVIC_EnableIRQ+0x38>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2001      	movs	r0, #1
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	db0a      	blt.n	8003366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	490c      	ldr	r1, [pc, #48]	@ (8003388 <__NVIC_SetPriority+0x4c>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	440b      	add	r3, r1
 8003360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003364:	e00a      	b.n	800337c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4908      	ldr	r1, [pc, #32]	@ (800338c <__NVIC_SetPriority+0x50>)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	3b04      	subs	r3, #4
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	440b      	add	r3, r1
 800337a:	761a      	strb	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	@ 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f1c3 0307 	rsb	r3, r3, #7
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	bf28      	it	cs
 80033ae:	2304      	movcs	r3, #4
 80033b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d902      	bls.n	80033c0 <NVIC_EncodePriority+0x30>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3b03      	subs	r3, #3
 80033be:	e000      	b.n	80033c2 <NVIC_EncodePriority+0x32>
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	401a      	ands	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43d9      	mvns	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	4313      	orrs	r3, r2
         );
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	@ 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003408:	d301      	bcc.n	800340e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800340a:	2301      	movs	r3, #1
 800340c:	e00f      	b.n	800342e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340e:	4a0a      	ldr	r2, [pc, #40]	@ (8003438 <SysTick_Config+0x40>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003416:	210f      	movs	r1, #15
 8003418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800341c:	f7ff ff8e 	bl	800333c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <SysTick_Config+0x40>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003426:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <SysTick_Config+0x40>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	e000e010 	.word	0xe000e010

0800343c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ff29 	bl	800329c <__NVIC_SetPriorityGrouping>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	4603      	mov	r3, r0
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003464:	f7ff ff3e 	bl	80032e4 <__NVIC_GetPriorityGrouping>
 8003468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f7ff ff8e 	bl	8003390 <NVIC_EncodePriority>
 8003474:	4602      	mov	r2, r0
 8003476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff5d 	bl	800333c <__NVIC_SetPriority>
}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff31 	bl	8003300 <__NVIC_EnableIRQ>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffa2 	bl	80033f8 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e098      	b.n	8003604 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003610 <HAL_DMA_Init+0x150>)
 80034da:	429a      	cmp	r2, r3
 80034dc:	d80f      	bhi.n	80034fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003614 <HAL_DMA_Init+0x154>)
 80034e6:	4413      	add	r3, r2
 80034e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003618 <HAL_DMA_Init+0x158>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	009a      	lsls	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a48      	ldr	r2, [pc, #288]	@ (800361c <HAL_DMA_Init+0x15c>)
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80034fc:	e00e      	b.n	800351c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	4b46      	ldr	r3, [pc, #280]	@ (8003620 <HAL_DMA_Init+0x160>)
 8003506:	4413      	add	r3, r2
 8003508:	4a43      	ldr	r2, [pc, #268]	@ (8003618 <HAL_DMA_Init+0x158>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	009a      	lsls	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a42      	ldr	r2, [pc, #264]	@ (8003624 <HAL_DMA_Init+0x164>)
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003536:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003576:	d039      	beq.n	80035ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	4a27      	ldr	r2, [pc, #156]	@ (800361c <HAL_DMA_Init+0x15c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d11a      	bne.n	80035b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003582:	4b29      	ldr	r3, [pc, #164]	@ (8003628 <HAL_DMA_Init+0x168>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f003 031c 	and.w	r3, r3, #28
 800358e:	210f      	movs	r1, #15
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	4924      	ldr	r1, [pc, #144]	@ (8003628 <HAL_DMA_Init+0x168>)
 8003598:	4013      	ands	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800359c:	4b22      	ldr	r3, [pc, #136]	@ (8003628 <HAL_DMA_Init+0x168>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a8:	f003 031c 	and.w	r3, r3, #28
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	491d      	ldr	r1, [pc, #116]	@ (8003628 <HAL_DMA_Init+0x168>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
 80035b6:	e019      	b.n	80035ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035b8:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <HAL_DMA_Init+0x16c>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f003 031c 	and.w	r3, r3, #28
 80035c4:	210f      	movs	r1, #15
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4917      	ldr	r1, [pc, #92]	@ (800362c <HAL_DMA_Init+0x16c>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035d2:	4b16      	ldr	r3, [pc, #88]	@ (800362c <HAL_DMA_Init+0x16c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	f003 031c 	and.w	r3, r3, #28
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	4911      	ldr	r1, [pc, #68]	@ (800362c <HAL_DMA_Init+0x16c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40020407 	.word	0x40020407
 8003614:	bffdfff8 	.word	0xbffdfff8
 8003618:	cccccccd 	.word	0xcccccccd
 800361c:	40020000 	.word	0x40020000
 8003620:	bffdfbf8 	.word	0xbffdfbf8
 8003624:	40020400 	.word	0x40020400
 8003628:	400200a8 	.word	0x400200a8
 800362c:	400204a8 	.word	0x400204a8

08003630 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Start_IT+0x20>
 800364c:	2302      	movs	r3, #2
 800364e:	e04b      	b.n	80036e8 <HAL_DMA_Start_IT+0xb8>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d13a      	bne.n	80036da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f8e0 	bl	800384e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 020e 	orr.w	r2, r2, #14
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00f      	b.n	80036c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0204 	bic.w	r2, r2, #4
 80036b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 020a 	orr.w	r2, r2, #10
 80036c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e005      	b.n	80036e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370c:	f003 031c 	and.w	r3, r3, #28
 8003710:	2204      	movs	r2, #4
 8003712:	409a      	lsls	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d026      	beq.n	800376a <HAL_DMA_IRQHandler+0x7a>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d021      	beq.n	800376a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0204 	bic.w	r2, r2, #4
 8003742:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003748:	f003 021c 	and.w	r2, r3, #28
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2104      	movs	r1, #4
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	2b00      	cmp	r3, #0
 800375e:	d071      	beq.n	8003844 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003768:	e06c      	b.n	8003844 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	f003 031c 	and.w	r3, r3, #28
 8003772:	2202      	movs	r2, #2
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d02e      	beq.n	80037dc <HAL_DMA_IRQHandler+0xec>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d029      	beq.n	80037dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 020a 	bic.w	r2, r2, #10
 80037a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f003 021c 	and.w	r2, r3, #28
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2102      	movs	r1, #2
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d038      	beq.n	8003844 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037da:	e033      	b.n	8003844 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e0:	f003 031c 	and.w	r3, r3, #28
 80037e4:	2208      	movs	r2, #8
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02a      	beq.n	8003846 <HAL_DMA_IRQHandler+0x156>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d025      	beq.n	8003846 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020e 	bic.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f003 021c 	and.w	r2, r3, #28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003844:	bf00      	nop
 8003846:	bf00      	nop
}
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	f003 021c 	and.w	r2, r3, #28
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	2101      	movs	r1, #1
 800386a:	fa01 f202 	lsl.w	r2, r1, r2
 800386e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b10      	cmp	r3, #16
 800387e:	d108      	bne.n	8003892 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003890:	e007      	b.n	80038a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	60da      	str	r2, [r3, #12]
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038be:	e148      	b.n	8003b52 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2101      	movs	r1, #1
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 813a 	beq.w	8003b4c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d005      	beq.n	80038f0 <HAL_GPIO_Init+0x40>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d130      	bne.n	8003952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003926:	2201      	movs	r2, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 0201 	and.w	r2, r3, #1
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b03      	cmp	r3, #3
 800395c:	d017      	beq.n	800398e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d123      	bne.n	80039e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	08da      	lsrs	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3208      	adds	r2, #8
 80039a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	220f      	movs	r2, #15
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	08da      	lsrs	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3208      	adds	r2, #8
 80039dc:	6939      	ldr	r1, [r7, #16]
 80039de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2203      	movs	r2, #3
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0203 	and.w	r2, r3, #3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8094 	beq.w	8003b4c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a24:	4b52      	ldr	r3, [pc, #328]	@ (8003b70 <HAL_GPIO_Init+0x2c0>)
 8003a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a28:	4a51      	ldr	r2, [pc, #324]	@ (8003b70 <HAL_GPIO_Init+0x2c0>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a30:	4b4f      	ldr	r3, [pc, #316]	@ (8003b70 <HAL_GPIO_Init+0x2c0>)
 8003a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b74 <HAL_GPIO_Init+0x2c4>)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	3302      	adds	r3, #2
 8003a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a66:	d00d      	beq.n	8003a84 <HAL_GPIO_Init+0x1d4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a43      	ldr	r2, [pc, #268]	@ (8003b78 <HAL_GPIO_Init+0x2c8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <HAL_GPIO_Init+0x1d0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a42      	ldr	r2, [pc, #264]	@ (8003b7c <HAL_GPIO_Init+0x2cc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_GPIO_Init+0x1cc>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e004      	b.n	8003a86 <HAL_GPIO_Init+0x1d6>
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	e002      	b.n	8003a86 <HAL_GPIO_Init+0x1d6>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_GPIO_Init+0x1d6>
 8003a84:	2300      	movs	r3, #0
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	f002 0203 	and.w	r2, r2, #3
 8003a8c:	0092      	lsls	r2, r2, #2
 8003a8e:	4093      	lsls	r3, r2
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a96:	4937      	ldr	r1, [pc, #220]	@ (8003b74 <HAL_GPIO_Init+0x2c4>)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa4:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ace:	4b2c      	ldr	r3, [pc, #176]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af2:	4a23      	ldr	r2, [pc, #140]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003af8:	4b21      	ldr	r3, [pc, #132]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b1c:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b22:	4b17      	ldr	r3, [pc, #92]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b46:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <HAL_GPIO_Init+0x2d0>)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f aeaf 	bne.w	80038c0 <HAL_GPIO_Init+0x10>
  }
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40010000 	.word	0x40010000
 8003b78:	48000400 	.word	0x48000400
 8003b7c:	48000800 	.word	0x48000800
 8003b80:	40010400 	.word	0x40010400

08003b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
 8003b90:	4613      	mov	r3, r2
 8003b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b94:	787b      	ldrb	r3, [r7, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ba0:	e002      	b.n	8003ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <HAL_PWREx_GetVoltageRange+0x18>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40007000 	.word	0x40007000

08003bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bde:	d130      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be0:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bec:	d038      	beq.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2232      	movs	r2, #50	@ 0x32
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	4a1b      	ldr	r2, [pc, #108]	@ (8003c78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	3301      	adds	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c14:	e002      	b.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c28:	d102      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f2      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c30:	4b0f      	ldr	r3, [pc, #60]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3c:	d110      	bne.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e00f      	b.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4e:	d007      	beq.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c50:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c58:	4a05      	ldr	r2, [pc, #20]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40007000 	.word	0x40007000
 8003c74:	20000000 	.word	0x20000000
 8003c78:	431bde83 	.word	0x431bde83

08003c7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f000 bc02 	b.w	8004494 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c90:	4b96      	ldr	r3, [pc, #600]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9a:	4b94      	ldr	r3, [pc, #592]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80e4 	beq.w	8003e7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4c>
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	f040 808b 	bne.w	8003dd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f040 8087 	bne.w	8003dd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc8:	4b88      	ldr	r3, [pc, #544]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x64>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e3d9      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	4b81      	ldr	r3, [pc, #516]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_RCC_OscConfig+0x7e>
 8003cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cf8:	e005      	b.n	8003d06 <HAL_RCC_OscConfig+0x8a>
 8003cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d223      	bcs.n	8003d52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fd54 	bl	80047bc <RCC_SetFlashLatencyFromMSIRange>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e3ba      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d1e:	4b73      	ldr	r3, [pc, #460]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a72      	ldr	r2, [pc, #456]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d24:	f043 0308 	orr.w	r3, r3, #8
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b70      	ldr	r3, [pc, #448]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	496d      	ldr	r1, [pc, #436]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	4968      	ldr	r1, [pc, #416]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
 8003d50:	e025      	b.n	8003d9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d52:	4b66      	ldr	r3, [pc, #408]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a65      	ldr	r2, [pc, #404]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d58:	f043 0308 	orr.w	r3, r3, #8
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b63      	ldr	r3, [pc, #396]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	4960      	ldr	r1, [pc, #384]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d70:	4b5e      	ldr	r3, [pc, #376]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	495b      	ldr	r1, [pc, #364]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fd14 	bl	80047bc <RCC_SetFlashLatencyFromMSIRange>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e37a      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d9e:	f000 fc81 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b51      	ldr	r3, [pc, #324]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	4950      	ldr	r1, [pc, #320]	@ (8003ef0 <HAL_RCC_OscConfig+0x274>)
 8003db0:	5ccb      	ldrb	r3, [r1, r3]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef4 <HAL_RCC_OscConfig+0x278>)
 8003dbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd ff32 	bl	8001c2c <HAL_InitTick>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d052      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	e35e      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d032      	beq.n	8003e44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dde:	4b43      	ldr	r3, [pc, #268]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a42      	ldr	r2, [pc, #264]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dea:	f7fd ff6f 	bl	8001ccc <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003df2:	f7fd ff6b 	bl	8001ccc <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e347      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e10:	4b36      	ldr	r3, [pc, #216]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a35      	ldr	r2, [pc, #212]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e16:	f043 0308 	orr.w	r3, r3, #8
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b33      	ldr	r3, [pc, #204]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4930      	ldr	r1, [pc, #192]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	492b      	ldr	r1, [pc, #172]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
 8003e42:	e01a      	b.n	8003e7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e44:	4b29      	ldr	r3, [pc, #164]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a28      	ldr	r2, [pc, #160]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e50:	f7fd ff3c 	bl	8001ccc <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e58:	f7fd ff38 	bl	8001ccc <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e314      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x1dc>
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d073      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_OscConfig+0x21c>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d10e      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	4b14      	ldr	r3, [pc, #80]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d063      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d15f      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e2f1      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb8:	d106      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
 8003eba:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e025      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ed0:	d114      	bne.n	8003efc <HAL_RCC_OscConfig+0x280>
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a05      	ldr	r2, [pc, #20]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b03      	ldr	r3, [pc, #12]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a02      	ldr	r2, [pc, #8]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e013      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08005708 	.word	0x08005708
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	4ba0      	ldr	r3, [pc, #640]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a9f      	ldr	r2, [pc, #636]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b9d      	ldr	r3, [pc, #628]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a9c      	ldr	r2, [pc, #624]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fd fed6 	bl	8001ccc <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fd fed2 	bl	8001ccc <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	@ 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e2ae      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b92      	ldr	r3, [pc, #584]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2a8>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fec2 	bl	8001ccc <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fd febe 	bl	8001ccc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	@ 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e29a      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5e:	4b88      	ldr	r3, [pc, #544]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2d0>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d060      	beq.n	800403c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_OscConfig+0x310>
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d116      	bne.n	8003fba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x328>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e277      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b76      	ldr	r3, [pc, #472]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	4973      	ldr	r1, [pc, #460]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb8:	e040      	b.n	800403c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d023      	beq.n	800400a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fd fe7d 	bl	8001ccc <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fd fe79 	bl	8001ccc <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e255      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe8:	4b65      	ldr	r3, [pc, #404]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b62      	ldr	r3, [pc, #392]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	495f      	ldr	r1, [pc, #380]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004004:	4313      	orrs	r3, r2
 8004006:	604b      	str	r3, [r1, #4]
 8004008:	e018      	b.n	800403c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400a:	4b5d      	ldr	r3, [pc, #372]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5c      	ldr	r2, [pc, #368]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fd fe59 	bl	8001ccc <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401e:	f7fd fe55 	bl	8001ccc <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e231      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004030:	4b53      	ldr	r3, [pc, #332]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01c      	beq.n	800408a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004050:	4b4b      	ldr	r3, [pc, #300]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004056:	4a4a      	ldr	r2, [pc, #296]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd fe34 	bl	8001ccc <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004068:	f7fd fe30 	bl	8001ccc <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e20c      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407a:	4b41      	ldr	r3, [pc, #260]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ef      	beq.n	8004068 <HAL_RCC_OscConfig+0x3ec>
 8004088:	e01b      	b.n	80040c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408a:	4b3d      	ldr	r3, [pc, #244]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004090:	4a3b      	ldr	r2, [pc, #236]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fd fe17 	bl	8001ccc <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fd fe13 	bl	8001ccc <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e1ef      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b4:	4b32      	ldr	r3, [pc, #200]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ef      	bne.n	80040a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80a6 	beq.w	800421c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10d      	bne.n	80040fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	4a26      	ldr	r2, [pc, #152]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ec:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f8:	2301      	movs	r3, #1
 80040fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040fc:	4b21      	ldr	r3, [pc, #132]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d118      	bne.n	800413a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004108:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1d      	ldr	r2, [pc, #116]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004112:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004114:	f7fd fdda 	bl	8001ccc <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fd fdd6 	bl	8001ccc <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1b2      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <HAL_RCC_OscConfig+0x508>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d108      	bne.n	8004154 <HAL_RCC_OscConfig+0x4d8>
 8004142:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	4a0d      	ldr	r2, [pc, #52]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004152:	e029      	b.n	80041a8 <HAL_RCC_OscConfig+0x52c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d115      	bne.n	8004188 <HAL_RCC_OscConfig+0x50c>
 800415c:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	4a07      	ldr	r2, [pc, #28]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004164:	f043 0304 	orr.w	r3, r3, #4
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a03      	ldr	r2, [pc, #12]	@ (8004180 <HAL_RCC_OscConfig+0x504>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800417c:	e014      	b.n	80041a8 <HAL_RCC_OscConfig+0x52c>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	4b9a      	ldr	r3, [pc, #616]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	4a99      	ldr	r2, [pc, #612]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004198:	4b96      	ldr	r3, [pc, #600]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	4a95      	ldr	r2, [pc, #596]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d016      	beq.n	80041de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd fd8c 	bl	8001ccc <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fd fd88 	bl	8001ccc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e162      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ce:	4b89      	ldr	r3, [pc, #548]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ed      	beq.n	80041b8 <HAL_RCC_OscConfig+0x53c>
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fd fd75 	bl	8001ccc <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd fd71 	bl	8001ccc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e14b      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fc:	4b7d      	ldr	r3, [pc, #500]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ed      	bne.n	80041e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420a:	7ffb      	ldrb	r3, [r7, #31]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b78      	ldr	r3, [pc, #480]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	4a77      	ldr	r2, [pc, #476]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03c      	beq.n	80042a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01c      	beq.n	800426a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004230:	4b70      	ldr	r3, [pc, #448]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004236:	4a6f      	ldr	r2, [pc, #444]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fd fd44 	bl	8001ccc <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004248:	f7fd fd40 	bl	8001ccc <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e11c      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800425a:	4b66      	ldr	r3, [pc, #408]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 800425c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ef      	beq.n	8004248 <HAL_RCC_OscConfig+0x5cc>
 8004268:	e01b      	b.n	80042a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800426a:	4b62      	ldr	r3, [pc, #392]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 800426c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004270:	4a60      	ldr	r2, [pc, #384]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fd fd27 	bl	8001ccc <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004282:	f7fd fd23 	bl	8001ccc <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0ff      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004294:	4b57      	ldr	r3, [pc, #348]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ef      	bne.n	8004282 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80f3 	beq.w	8004492 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	f040 80c9 	bne.w	8004448 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042b6:	4b4f      	ldr	r3, [pc, #316]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d12c      	bne.n	8004324 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	3b01      	subs	r3, #1
 80042d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d123      	bne.n	8004324 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d11b      	bne.n	8004324 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d113      	bne.n	8004324 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	3b01      	subs	r3, #1
 800430a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d109      	bne.n	8004324 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	3b01      	subs	r3, #1
 800431e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d06b      	beq.n	80043fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d062      	beq.n	80043f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800432a:	4b32      	ldr	r3, [pc, #200]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0ac      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800433a:	4b2e      	ldr	r3, [pc, #184]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2d      	ldr	r2, [pc, #180]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004344:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004346:	f7fd fcc1 	bl	8001ccc <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434e:	f7fd fcbd 	bl	8001ccc <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e099      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004360:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436c:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	4b21      	ldr	r3, [pc, #132]	@ (80043f8 <HAL_RCC_OscConfig+0x77c>)
 8004372:	4013      	ands	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800437c:	3a01      	subs	r2, #1
 800437e:	0112      	lsls	r2, r2, #4
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004386:	0212      	lsls	r2, r2, #8
 8004388:	4311      	orrs	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800438e:	0852      	lsrs	r2, r2, #1
 8004390:	3a01      	subs	r2, #1
 8004392:	0552      	lsls	r2, r2, #21
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800439a:	0852      	lsrs	r2, r2, #1
 800439c:	3a01      	subs	r2, #1
 800439e:	0652      	lsls	r2, r2, #25
 80043a0:	4311      	orrs	r1, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043a6:	06d2      	lsls	r2, r2, #27
 80043a8:	430a      	orrs	r2, r1
 80043aa:	4912      	ldr	r1, [pc, #72]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043b0:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0f      	ldr	r2, [pc, #60]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043bc:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a0c      	ldr	r2, [pc, #48]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043c8:	f7fd fc80 	bl	8001ccc <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd fc7c 	bl	8001ccc <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e058      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <HAL_RCC_OscConfig+0x778>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ee:	e050      	b.n	8004492 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04f      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
 80043f4:	40021000 	.word	0x40021000
 80043f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043fc:	4b27      	ldr	r3, [pc, #156]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d144      	bne.n	8004492 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004408:	4b24      	ldr	r3, [pc, #144]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a23      	ldr	r2, [pc, #140]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004414:	4b21      	ldr	r3, [pc, #132]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a20      	ldr	r2, [pc, #128]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 800441a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004420:	f7fd fc54 	bl	8001ccc <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fd fc50 	bl	8001ccc <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e02c      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	4b18      	ldr	r3, [pc, #96]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x7ac>
 8004446:	e024      	b.n	8004492 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d01f      	beq.n	800448e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b13      	ldr	r3, [pc, #76]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a12      	ldr	r2, [pc, #72]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 8004454:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fd fc37 	bl	8001ccc <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fd fc33 	bl	8001ccc <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e00f      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4905      	ldr	r1, [pc, #20]	@ (800449c <HAL_RCC_OscConfig+0x820>)
 8004486:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCC_OscConfig+0x824>)
 8004488:	4013      	ands	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
 800448c:	e001      	b.n	8004492 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	feeefffc 	.word	0xfeeefffc

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0e7      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b75      	ldr	r3, [pc, #468]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b72      	ldr	r3, [pc, #456]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 0207 	bic.w	r2, r3, #7
 80044ce:	4970      	ldr	r1, [pc, #448]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0cf      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b66      	ldr	r3, [pc, #408]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004500:	429a      	cmp	r2, r3
 8004502:	d908      	bls.n	8004516 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b63      	ldr	r3, [pc, #396]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4960      	ldr	r1, [pc, #384]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04c      	beq.n	80045bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452a:	4b5a      	ldr	r3, [pc, #360]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d121      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0a6      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004542:	4b54      	ldr	r3, [pc, #336]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d115      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e09a      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800455a:	4b4e      	ldr	r3, [pc, #312]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e08e      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456a:	4b4a      	ldr	r3, [pc, #296]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e086      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b46      	ldr	r3, [pc, #280]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4943      	ldr	r1, [pc, #268]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fd fb9e 	bl	8001ccc <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fd fb9a 	bl	8001ccc <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e06e      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b31      	ldr	r3, [pc, #196]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d208      	bcs.n	80045ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	492b      	ldr	r1, [pc, #172]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ea:	4b29      	ldr	r3, [pc, #164]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d210      	bcs.n	800461a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f8:	4b25      	ldr	r3, [pc, #148]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 0207 	bic.w	r2, r3, #7
 8004600:	4923      	ldr	r1, [pc, #140]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004608:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e036      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004626:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4918      	ldr	r1, [pc, #96]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004644:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4910      	ldr	r1, [pc, #64]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004658:	f000 f824 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	490b      	ldr	r1, [pc, #44]	@ (8004698 <HAL_RCC_ClockConfig+0x1f4>)
 800466a:	5ccb      	ldrb	r3, [r1, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	4a09      	ldr	r2, [pc, #36]	@ (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004676:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004678:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <HAL_RCC_ClockConfig+0x1fc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fad5 	bl	8001c2c <HAL_InitTick>
 8004682:	4603      	mov	r3, r0
 8004684:	72fb      	strb	r3, [r7, #11]

  return status;
 8004686:	7afb      	ldrb	r3, [r7, #11]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	08005708 	.word	0x08005708
 800469c:	20000000 	.word	0x20000000
 80046a0:	20000004 	.word	0x20000004

080046a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	@ 0x24
 80046a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046bc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x34>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d121      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11e      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046d8:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e4:	4b31      	ldr	r3, [pc, #196]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e005      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f4:	4b2d      	ldr	r3, [pc, #180]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004700:	4a2b      	ldr	r2, [pc, #172]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004714:	e00a      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d102      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800471c:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e004      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d101      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004728:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800472a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d134      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004732:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d003      	beq.n	800474a <HAL_RCC_GetSysClockFreq+0xa6>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d003      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0xac>
 8004748:	e005      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800474a:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800474c:	617b      	str	r3, [r7, #20]
      break;
 800474e:	e005      	b.n	800475c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004752:	617b      	str	r3, [r7, #20]
      break;
 8004754:	e002      	b.n	800475c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	617b      	str	r3, [r7, #20]
      break;
 800475a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800475c:	4b13      	ldr	r3, [pc, #76]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800476a:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	fb03 f202 	mul.w	r2, r3, r2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	0e5b      	lsrs	r3, r3, #25
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	3301      	adds	r3, #1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800479c:	69bb      	ldr	r3, [r7, #24]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	@ 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08005718 	.word	0x08005718
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	007a1200 	.word	0x007a1200

080047bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047d4:	f7ff f9ee 	bl	8003bb4 <HAL_PWREx_GetVoltageRange>
 80047d8:	6178      	str	r0, [r7, #20]
 80047da:	e014      	b.n	8004806 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4b25      	ldr	r3, [pc, #148]	@ (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e0:	4a24      	ldr	r2, [pc, #144]	@ (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047e8:	4b22      	ldr	r3, [pc, #136]	@ (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047f4:	f7ff f9de 	bl	8003bb4 <HAL_PWREx_GetVoltageRange>
 80047f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800480c:	d10b      	bne.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b80      	cmp	r3, #128	@ 0x80
 8004812:	d919      	bls.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2ba0      	cmp	r3, #160	@ 0xa0
 8004818:	d902      	bls.n	8004820 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800481a:	2302      	movs	r3, #2
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	e013      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004820:	2301      	movs	r3, #1
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	e010      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b80      	cmp	r3, #128	@ 0x80
 800482a:	d902      	bls.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800482c:	2303      	movs	r3, #3
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	e00a      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b80      	cmp	r3, #128	@ 0x80
 8004836:	d102      	bne.n	800483e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004838:	2302      	movs	r3, #2
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e004      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b70      	cmp	r3, #112	@ 0x70
 8004842:	d101      	bne.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004844:	2301      	movs	r3, #1
 8004846:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 0207 	bic.w	r2, r3, #7
 8004850:	4909      	ldr	r1, [pc, #36]	@ (8004878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004858:	4b07      	ldr	r3, [pc, #28]	@ (8004878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d001      	beq.n	800486a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	40022000 	.word	0x40022000

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004884:	2300      	movs	r3, #0
 8004886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004888:	2300      	movs	r3, #0
 800488a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004894:	2b00      	cmp	r3, #0
 8004896:	d031      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048a0:	d01a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80048a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048a6:	d814      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048b0:	d10f      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80048b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048be:	e00c      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f9ce 	bl	8004c68 <RCCEx_PLLSAI1_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048d0:	e003      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	74fb      	strb	r3, [r7, #19]
      break;
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80048d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048e0:	4b51      	ldr	r3, [pc, #324]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	494e      	ldr	r1, [pc, #312]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048f6:	e001      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 809e 	beq.w	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800490e:	4b46      	ldr	r3, [pc, #280]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00d      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004924:	4b40      	ldr	r3, [pc, #256]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004928:	4a3f      	ldr	r2, [pc, #252]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004930:	4b3d      	ldr	r3, [pc, #244]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493c:	2301      	movs	r3, #1
 800493e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004940:	4b3a      	ldr	r3, [pc, #232]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a39      	ldr	r2, [pc, #228]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800494a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800494c:	f7fd f9be 	bl	8001ccc <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004952:	e009      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004954:	f7fd f9ba 	bl	8001ccc <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	74fb      	strb	r3, [r7, #19]
        break;
 8004966:	e005      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004968:	4b30      	ldr	r3, [pc, #192]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ef      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d15a      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800497a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004984:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01e      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	429a      	cmp	r2, r3
 8004994:	d019      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004996:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049a2:	4b21      	ldr	r3, [pc, #132]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049c2:	4a19      	ldr	r2, [pc, #100]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d016      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd f97a 	bl	8001ccc <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049da:	e00b      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fd f976 	bl	8001ccc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d902      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	74fb      	strb	r3, [r7, #19]
            break;
 80049f2:	e006      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ec      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a08:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a16:	4904      	ldr	r1, [pc, #16]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a1e:	e009      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
 8004a24:	e006      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a34:	7c7b      	ldrb	r3, [r7, #17]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d105      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3a:	4b8a      	ldr	r3, [pc, #552]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	4a89      	ldr	r2, [pc, #548]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a52:	4b84      	ldr	r3, [pc, #528]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a58:	f023 0203 	bic.w	r2, r3, #3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4980      	ldr	r1, [pc, #512]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a74:	4b7b      	ldr	r3, [pc, #492]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7a:	f023 020c 	bic.w	r2, r3, #12
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	4978      	ldr	r1, [pc, #480]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a96:	4b73      	ldr	r3, [pc, #460]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	496f      	ldr	r1, [pc, #444]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac6:	4967      	ldr	r1, [pc, #412]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ada:	4b62      	ldr	r3, [pc, #392]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	495e      	ldr	r1, [pc, #376]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004afc:	4b59      	ldr	r3, [pc, #356]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	4956      	ldr	r1, [pc, #344]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b1e:	4b51      	ldr	r3, [pc, #324]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	494d      	ldr	r1, [pc, #308]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d028      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b40:	4b48      	ldr	r3, [pc, #288]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	4945      	ldr	r1, [pc, #276]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b60:	4b40      	ldr	r3, [pc, #256]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a3f      	ldr	r2, [pc, #252]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b6a:	60d3      	str	r3, [r2, #12]
 8004b6c:	e011      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b76:	d10c      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f872 	bl	8004c68 <RCCEx_PLLSAI1_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004b8e:	7cfb      	ldrb	r3, [r7, #19]
 8004b90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b9e:	4b31      	ldr	r3, [pc, #196]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	492d      	ldr	r1, [pc, #180]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bbc:	d106      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbe:	4b29      	ldr	r3, [pc, #164]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a28      	ldr	r2, [pc, #160]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc8:	60d3      	str	r3, [r2, #12]
 8004bca:	e011      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f843 	bl	8004c68 <RCCEx_PLLSAI1_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01c      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bfc:	4b19      	ldr	r3, [pc, #100]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c0a:	4916      	ldr	r1, [pc, #88]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c1a:	d10c      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f820 	bl	8004c68 <RCCEx_PLLSAI1_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004c32:	7cfb      	ldrb	r3, [r7, #19]
 8004c34:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c42:	4b08      	ldr	r3, [pc, #32]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c50:	4904      	ldr	r1, [pc, #16]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c58:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000

08004c68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c76:	4b74      	ldr	r3, [pc, #464]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d018      	beq.n	8004cb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c82:	4b71      	ldr	r3, [pc, #452]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0203 	and.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d10d      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
       ||
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c9a:	4b6b      	ldr	r3, [pc, #428]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
       ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d047      	beq.n	8004d3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e044      	b.n	8004d3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d018      	beq.n	8004cee <RCCEx_PLLSAI1_Config+0x86>
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d825      	bhi.n	8004d0c <RCCEx_PLLSAI1_Config+0xa4>
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d002      	beq.n	8004cca <RCCEx_PLLSAI1_Config+0x62>
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d009      	beq.n	8004cdc <RCCEx_PLLSAI1_Config+0x74>
 8004cc8:	e020      	b.n	8004d0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cca:	4b5f      	ldr	r3, [pc, #380]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cda:	e01a      	b.n	8004d12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d116      	bne.n	8004d16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cec:	e013      	b.n	8004d16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cee:	4b56      	ldr	r3, [pc, #344]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10f      	bne.n	8004d1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cfa:	4b53      	ldr	r3, [pc, #332]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d0a:	e006      	b.n	8004d1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d10:	e004      	b.n	8004d1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d12:	bf00      	nop
 8004d14:	e002      	b.n	8004d1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d22:	4b49      	ldr	r3, [pc, #292]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	430b      	orrs	r3, r1
 8004d38:	4943      	ldr	r1, [pc, #268]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d17c      	bne.n	8004e3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d44:	4b40      	ldr	r3, [pc, #256]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3f      	ldr	r2, [pc, #252]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d50:	f7fc ffbc 	bl	8001ccc <HAL_GetTick>
 8004d54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d56:	e009      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d58:	f7fc ffb8 	bl	8001ccc <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d902      	bls.n	8004d6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	73fb      	strb	r3, [r7, #15]
        break;
 8004d6a:	e005      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d6c:	4b36      	ldr	r3, [pc, #216]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1ef      	bne.n	8004d58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d15f      	bne.n	8004e3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d110      	bne.n	8004da6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d84:	4b30      	ldr	r3, [pc, #192]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004d8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6892      	ldr	r2, [r2, #8]
 8004d94:	0211      	lsls	r1, r2, #8
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68d2      	ldr	r2, [r2, #12]
 8004d9a:	06d2      	lsls	r2, r2, #27
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	492a      	ldr	r1, [pc, #168]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	610b      	str	r3, [r1, #16]
 8004da4:	e027      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d112      	bne.n	8004dd2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dac:	4b26      	ldr	r3, [pc, #152]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004db4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6892      	ldr	r2, [r2, #8]
 8004dbc:	0211      	lsls	r1, r2, #8
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6912      	ldr	r2, [r2, #16]
 8004dc2:	0852      	lsrs	r2, r2, #1
 8004dc4:	3a01      	subs	r2, #1
 8004dc6:	0552      	lsls	r2, r2, #21
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	491f      	ldr	r1, [pc, #124]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	610b      	str	r3, [r1, #16]
 8004dd0:	e011      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004dda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6892      	ldr	r2, [r2, #8]
 8004de2:	0211      	lsls	r1, r2, #8
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6952      	ldr	r2, [r2, #20]
 8004de8:	0852      	lsrs	r2, r2, #1
 8004dea:	3a01      	subs	r2, #1
 8004dec:	0652      	lsls	r2, r2, #25
 8004dee:	430a      	orrs	r2, r1
 8004df0:	4915      	ldr	r1, [pc, #84]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004df6:	4b14      	ldr	r3, [pc, #80]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a13      	ldr	r2, [pc, #76]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fc ff63 	bl	8001ccc <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e08:	e009      	b.n	8004e1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e0a:	f7fc ff5f 	bl	8001ccc <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d902      	bls.n	8004e1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	73fb      	strb	r3, [r7, #15]
          break;
 8004e1c:	e005      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ef      	beq.n	8004e0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e30:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	4903      	ldr	r1, [pc, #12]	@ (8004e48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e095      	b.n	8004f8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc fa98 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ec4:	d902      	bls.n	8004ecc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e002      	b.n	8004ed2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004eda:	d007      	beq.n	8004eec <HAL_SPI_Init+0xa0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2e:	ea42 0103 	orr.w	r1, r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	0c1b      	lsrs	r3, r3, #16
 8004f48:	f003 0204 	and.w	r2, r3, #4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b08a      	sub	sp, #40	@ 0x28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa4:	f7fc fe92 	bl	8001ccc <HAL_GetTick>
 8004fa8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fb0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fc0:	7ffb      	ldrb	r3, [r7, #31]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_SPI_TransmitReceive+0x4e>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fcc:	d106      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x4a>
 8004fd6:	7ffb      	ldrb	r3, [r7, #31]
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d001      	beq.n	8004fe0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e1f3      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x60>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x60>
 8004fec:	887b      	ldrh	r3, [r7, #2]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e1e8      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_SPI_TransmitReceive+0x72>
 8005000:	2302      	movs	r3, #2
 8005002:	e1e1      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x436>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b04      	cmp	r3, #4
 8005016:	d003      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2205      	movs	r2, #5
 800501c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	887a      	ldrh	r2, [r7, #2]
 8005046:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	887a      	ldrh	r2, [r7, #2]
 800504c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005062:	d802      	bhi.n	800506a <HAL_SPI_TransmitReceive+0xd8>
 8005064:	8abb      	ldrh	r3, [r7, #20]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d908      	bls.n	800507c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	e007      	b.n	800508c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005096:	2b40      	cmp	r3, #64	@ 0x40
 8005098:	d007      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050b2:	f240 8083 	bls.w	80051bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x132>
 80050be:	8afb      	ldrh	r3, [r7, #22]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d16f      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e8:	e05c      	b.n	80051a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d11b      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x19e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x19e>
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	2b01      	cmp	r3, #1
 8005106:	d113      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d11c      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x1e6>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	b292      	uxth	r2, r2
 8005156:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005174:	2301      	movs	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005178:	f7fc fda8 	bl	8001ccc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005184:	429a      	cmp	r2, r3
 8005186:	d80d      	bhi.n	80051a4 <HAL_SPI_TransmitReceive+0x212>
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800518e:	d009      	beq.n	80051a4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e111      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d19d      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x158>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d197      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x158>
 80051ba:	e0e5      	b.n	8005388 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x23a>
 80051c4:	8afb      	ldrh	r3, [r7, #22]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f040 80d1 	bne.w	800536e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d912      	bls.n	80051fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	881a      	ldrh	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	1c9a      	adds	r2, r3, #2
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b02      	subs	r3, #2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051fa:	e0b8      	b.n	800536e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005222:	e0a4      	b.n	800536e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b02      	cmp	r3, #2
 8005230:	d134      	bne.n	800529c <HAL_SPI_TransmitReceive+0x30a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02f      	beq.n	800529c <HAL_SPI_TransmitReceive+0x30a>
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	2b01      	cmp	r3, #1
 8005240:	d12c      	bne.n	800529c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d912      	bls.n	8005272 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	1c9a      	adds	r2, r3, #2
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b02      	subs	r3, #2
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005270:	e012      	b.n	8005298 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	7812      	ldrb	r2, [r2, #0]
 800527e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d148      	bne.n	800533c <HAL_SPI_TransmitReceive+0x3aa>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d042      	beq.n	800533c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d923      	bls.n	800530a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	b292      	uxth	r2, r2
 80052ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b02      	subs	r3, #2
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d81f      	bhi.n	8005338 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	e016      	b.n	8005338 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f103 020c 	add.w	r2, r3, #12
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	7812      	ldrb	r2, [r2, #0]
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005338:	2301      	movs	r3, #1
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800533c:	f7fc fcc6 	bl	8001ccc <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005348:	429a      	cmp	r2, r3
 800534a:	d803      	bhi.n	8005354 <HAL_SPI_TransmitReceive+0x3c2>
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005352:	d102      	bne.n	800535a <HAL_SPI_TransmitReceive+0x3c8>
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e02c      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	f47f af55 	bne.w	8005224 <HAL_SPI_TransmitReceive+0x292>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f af4e 	bne.w	8005224 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005388:	6a3a      	ldr	r2, [r7, #32]
 800538a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f93d 	bl	800560c <SPI_EndRxTxTransaction>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00e      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3728      	adds	r7, #40	@ 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053e0:	f7fc fc74 	bl	8001ccc <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053f0:	f7fc fc6c 	bl	8001ccc <HAL_GetTick>
 80053f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053f6:	4b39      	ldr	r3, [pc, #228]	@ (80054dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	015b      	lsls	r3, r3, #5
 80053fc:	0d1b      	lsrs	r3, r3, #20
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	fb02 f303 	mul.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005406:	e054      	b.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540e:	d050      	beq.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005410:	f7fc fc5c 	bl	8001ccc <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	429a      	cmp	r2, r3
 800541e:	d902      	bls.n	8005426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d13d      	bne.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800543e:	d111      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005448:	d004      	beq.n	8005454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005452:	d107      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800546c:	d10f      	bne.n	800548e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800548c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e017      	b.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	bf0c      	ite	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	2300      	movne	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d19b      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000000 	.word	0x20000000

080054e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	@ 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054f2:	f7fc fbeb 	bl	8001ccc <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005502:	f7fc fbe3 	bl	8001ccc <HAL_GetTick>
 8005506:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005510:	4b3d      	ldr	r3, [pc, #244]	@ (8005608 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00da      	lsls	r2, r3, #3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	0d1b      	lsrs	r3, r3, #20
 8005520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005528:	e060      	b.n	80055ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005530:	d107      	bne.n	8005542 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005540:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005548:	d050      	beq.n	80055ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800554a:	f7fc fbbf 	bl	8001ccc <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005556:	429a      	cmp	r2, r3
 8005558:	d902      	bls.n	8005560 <SPI_WaitFifoStateUntilTimeout+0x80>
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d13d      	bne.n	80055dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800556e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005578:	d111      	bne.n	800559e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005582:	d004      	beq.n	800558e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800558c:	d107      	bne.n	800559e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800559c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a6:	d10f      	bne.n	80055c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e010      	b.n	80055fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d196      	bne.n	800552a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3728      	adds	r7, #40	@ 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000000 	.word	0x20000000

0800560c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff ff5b 	bl	80054e0 <SPI_WaitFifoStateUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e027      	b.n	8005690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	2180      	movs	r1, #128	@ 0x80
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fec0 	bl	80053d0 <SPI_WaitFlagStateUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e014      	b.n	8005690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff ff34 	bl	80054e0 <SPI_WaitFifoStateUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e000      	b.n	8005690 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <memset>:
 8005698:	4402      	add	r2, r0
 800569a:	4603      	mov	r3, r0
 800569c:	4293      	cmp	r3, r2
 800569e:	d100      	bne.n	80056a2 <memset+0xa>
 80056a0:	4770      	bx	lr
 80056a2:	f803 1b01 	strb.w	r1, [r3], #1
 80056a6:	e7f9      	b.n	800569c <memset+0x4>

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4d0d      	ldr	r5, [pc, #52]	@ (80056e0 <__libc_init_array+0x38>)
 80056ac:	4c0d      	ldr	r4, [pc, #52]	@ (80056e4 <__libc_init_array+0x3c>)
 80056ae:	1b64      	subs	r4, r4, r5
 80056b0:	10a4      	asrs	r4, r4, #2
 80056b2:	2600      	movs	r6, #0
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	4d0b      	ldr	r5, [pc, #44]	@ (80056e8 <__libc_init_array+0x40>)
 80056ba:	4c0c      	ldr	r4, [pc, #48]	@ (80056ec <__libc_init_array+0x44>)
 80056bc:	f000 f818 	bl	80056f0 <_init>
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	2600      	movs	r6, #0
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	08005850 	.word	0x08005850
 80056e4:	08005850 	.word	0x08005850
 80056e8:	08005850 	.word	0x08005850
 80056ec:	08005854 	.word	0x08005854

080056f0 <_init>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr

080056fc <_fini>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr
